bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
2	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
3	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
4	[BUG]  [BUGGY]  Node  newExpr  =  expr.getFirstChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  expr.getFirstChild();  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
5	[BUG]  [BUGGY]  Node  newExpr  =  expr.getLastChild();  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  expr.getLastChild();  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getLastChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
6	[BUG]  [BUGGY]  Node  newExpr  =  expr.getLastChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  expr.getLastChild();  n.removeChild(newExpr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getLastChild();  n.removeChild(newExpr);	      	non-compiled	[CE]  ')'  expected	7	None	replace
7	[BUG]  [BUGGY]  Node  newExpr  =  expr.getFirstChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                          AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  expr.getFirstChild();  n.removeChild(newExpr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getFirstChild();  n.removeChild(newExpr);	      	non-compiled	[CE]  ')'  expected	7	None	replace
8	[BUG]  [BUGGY]  Node  newExpr  =  n.getFirstChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  n.getFirstChild();  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  n.getFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
9	[BUG]  [BUGGY]  Node  newExpr  =  expr.getFirstChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                              AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  expr.getFirstChild();  parent.replaceChild(n,  newExpr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getFirstChild();  parent.replaceChild(n,  newExpr);	      	non-compiled	[CE]  ')'  expected	7	None	replace
10	[BUG]  [BUGGY]  Node  newExpr  =  expr.getLastChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  expr.getLastChild();  parent.replaceChild(n,  newExpr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getLastChild();  parent.replaceChild(n,  newExpr);	      	non-compiled	[CE]  ')'  expected	7	None	replace
11	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
12	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
13	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
14	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.getLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
15	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
16	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.getLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
17	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType());    	non-compiled	[CE]  ')'  expected	5	None	replace
18	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType());    	non-compiled	[CE]  ')'  expected	5	None	replace
19	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType());    	non-compiled	[CE]  ')'  expected	5	None	replace
20	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType());    	non-compiled	[CE]  ')'  expected	5	None	replace
21	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType());    	non-compiled	[CE]  ')'  expected	5	None	replace
22	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  parent);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  parent);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
23	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
24	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
25	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
26	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
27	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
28	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getType());  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getType());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(and,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
29	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
30	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n);  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  n);	  Node    newExpr    =    NodeUtil.newExpr(and,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
31	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getFirstChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
32	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext());  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent());    	non-compiled	[CE]  ')'  expected	9	None	replace
33	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent());    	non-compiled	[CE]  ')'  expected	9	None	replace
34	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent());    	non-compiled	[CE]  ')'  expected	9	None	replace
35	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	3	None	replace
36	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	3	None	replace
37	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  OR_PRECEDENCE);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	3	None	replace
38	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	6	None	replace
39	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeFirstChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	6	None	replace
40	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.removeFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.removeFirstChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	6	None	replace
41	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.removeFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.removeFirstChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	6	None	replace
42	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getFirstChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getFirstChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	3	None	replace
43	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  false);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  false);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  false);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
44	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  ref);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  ref);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  ref);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
45	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent());  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent());    	non-compiled	[CE]  ')'  expected	9	None	replace
46	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  InVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  InVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  InVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType());    	non-compiled	[CE]  ')'  expected	5	None	replace
47	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType());    	non-compiled	[CE]  ')'  expected	5	None	replace
48	[BUG]  [BUGGY]  Node  newExpr  =  and.removeFirstChild();  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  and.removeFirstChild();  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.removeFirstChild();	      	non-compiled	[CE]  ')'  expected	7	None	replace
49	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  -  1);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  -  1);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr  -  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
50	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.removeFirstChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
51	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
52	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	6	None	replace
53	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	6	None	replace
54	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree());  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
55	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
56	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
57	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	8	None	replace
58	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	6	None	replace
59	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree());  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent());    	non-compiled	[CE]  ')'  expected	9	None	replace
60	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr);  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent());    	non-compiled	[CE]  ')'  expected	9	None	replace
61	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.nextChild());  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.nextChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.nextChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
62	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	2	None	replace
63	[BUG]  [BUGGY]  Node  newExpr  =  expr.getNext();  [CE]  ')'  expected  [FE]                    AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  expr.getNext();  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getNext();	      	non-compiled	[CE]  ')'  expected	7	None	replace
64	[BUG]  [BUGGY]  n.removeChild(cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  n.removeChild(cond);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	n.removeChild(cond);	      	non-compiled	[CE]  ')'  expected	7	None	replace
65	[BUG]  [BUGGY]  Node  newExpr  =  and.getNext();  [CE]  ')'  expected  [FE]                        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  and.getNext();  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.getNext();	      	non-compiled	[CE]  ')'  expected	7	None	replace
66	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType());    	non-compiled	[CE]  ')'  expected	5	None	replace
67	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getLastChild());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType());    	non-compiled	[CE]  ')'  expected	5	None	replace
68	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree());  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    n);    	non-compiled	[CE]  ')'  expected	4	None	replace
69	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1);  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);    [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1);  [BUGGY]    parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
