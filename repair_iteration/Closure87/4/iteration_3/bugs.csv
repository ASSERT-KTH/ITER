bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
2	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getLastChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getLastChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getLastChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
3	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
4	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
5	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getLastChild()));  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getLastChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getLastChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
6	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getLastChild()));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getLastChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getLastChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
7	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
8	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  ref);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  ref);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  ref);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    ref);    	non-compiled	[CE]  ')'  expected	44	None	replace
9	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(ref,  expr.cloneTree(),  and);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(ref,  expr.cloneTree(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(ref,  expr.cloneTree(),  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    ref);    	non-compiled	[CE]  ')'  expected	44	None	replace
10	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  ref.cloneTree(),  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  ref.cloneTree(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  ref.cloneTree(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    ref);    	non-compiled	[CE]  ')'  expected	44	None	replace
11	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  ref);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  ref);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  ref);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    ref);    	non-compiled	[CE]  ')'  expected	44	None	replace
12	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  ref,  parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  ref,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  ref,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    ref);    	non-compiled	[CE]  ')'  expected	44	None	replace
13	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeLastChild());    	non-compiled	[CE]  ')'  expected	52	None	replace
14	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeLastChild());    	non-compiled	[CE]  ')'  expected	52	None	replace
15	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeLastChild());    	non-compiled	[CE]  ')'  expected	52	None	replace
16	[BUG]  [BUGGY]  Node  newExpr  =  n.getNext();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  n.getNext();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  n.getNext();	  Node    newExpr    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	63	None	replace
17	[BUG]  [BUGGY]  Node  newExpr  =  cond.getNext();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  cond.getNext();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  cond.getNext();	  Node    newExpr    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	63	None	replace
18	[BUG]  [BUGGY]  Node  newExpr  =  expr.getNext(),  and;  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.getNext(),  and;  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getNext(),  and;	  Node    newExpr    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	63	None	replace
19	[BUG]  [BUGGY]  Node  newExpr  =  or.getNext();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  or.getNext();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  or.getNext();	  Node    newExpr    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	63	None	replace
20	[BUG]  [BUGGY]  Node  newExpr  =  parent.getNext();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  parent.getNext();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  parent.getNext();	  Node    newExpr    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	63	None	replace
21	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  and);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  and);	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
22	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getParent());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getParent());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getParent());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
23	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getNext());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getNext());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getNext());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
24	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and.getParent());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and.getParent());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  and.getParent());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
25	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  and);	  Node    newExpr    =    NodeUtil.newExpr(cond,    n);    	non-compiled	[CE]  ')'  expected	30	None	replace
26	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  cond);	  Node    newExpr    =    NodeUtil.newExpr(cond,    n);    	non-compiled	[CE]  ')'  expected	30	None	replace
27	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  n);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  n);	  Node    newExpr    =    NodeUtil.newExpr(cond,    n);    	non-compiled	[CE]  ')'  expected	30	None	replace
28	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  n);	  Node    newExpr    =    NodeUtil.newExpr(cond,    n);    	non-compiled	[CE]  ')'  expected	30	None	replace
29	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	37	None	replace
30	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	37	None	replace
31	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	37	None	replace
32	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  OR_PRECEDENCE,  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  OR_PRECEDENCE,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  OR_PRECEDENCE,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	37	None	replace
33	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getFirstChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getFirstChild(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getFirstChild(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	37	None	replace
34	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getFirstChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getFirstChild(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getFirstChild(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	37	None	replace
35	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n.removeFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  n.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n.removeFirstChild());    	non-compiled	[CE]  ')'  expected	40	None	replace
36	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n.removeFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  n.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n.removeFirstChild());    	non-compiled	[CE]  ')'  expected	40	None	replace
37	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.removeFirstChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n.removeFirstChild());    	non-compiled	[CE]  ')'  expected	40	None	replace
38	[BUG]  [BUGGY]  Node  newExpr  =  and.getFirstChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.getFirstChild();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.getFirstChild();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getFirstChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	9	None	replace
39	[BUG]  [BUGGY]  Node  newExpr  =  n.getFirstChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  n.getFirstChild();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  n.getFirstChild();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getFirstChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	9	None	replace
40	[BUG]  [BUGGY]  Node  newExpr  =  expr.getNext();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.getNext();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getNext();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getFirstChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	9	None	replace
41	[BUG]  [BUGGY]  Node  newExpr  =  parent.getFirstChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  parent.getFirstChild();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  parent.getFirstChild();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getFirstChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	9	None	replace
42	[BUG]  [BUGGY]  Node  newExpr  =  expr.getFirstChild();  parent.replaceChild(n,  and);  [CE]  ')'  expected  [FE]                                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.getFirstChild();  parent.replaceChild(n,  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getFirstChild();  parent.replaceChild(n,  and);	  Node    newExpr    =    expr.getFirstChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	9	None	replace
43	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
44	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
45	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  CONSTRUCTORS);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  CONSTRUCTORS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  CONSTRUCTORS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
46	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
47	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  parent);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
48	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  isLowerPrecedenceInExpression(expr.getLastChild()));  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  isLowerPrecedenceInExpression(expr.getLastChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  isLowerPrecedenceInExpression(expr.getLastChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
49	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	67	None	replace
50	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	67	None	replace
51	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	67	None	replace
52	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.getType(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.getType(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond.getType(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	67	None	replace
53	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getLastChild(),  cond);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getLastChild(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getLastChild(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	67	None	replace
54	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent.getType(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent.getType(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent.getType(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	67	None	replace
55	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.getType(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.getType(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n.getType(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	67	None	replace
56	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  expr);	  Node    newExpr    =    NodeUtil.newExpr(n,    expr);    	non-compiled	[CE]  ')'  expected	3	None	replace
57	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and);	  Node    newExpr    =    NodeUtil.newExpr(n,    expr);    	non-compiled	[CE]  ')'  expected	3	None	replace
58	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr);	  Node    newExpr    =    NodeUtil.newExpr(n,    expr);    	non-compiled	[CE]  ')'  expected	3	None	replace
59	[BUG]  [BUGGY]  Node  newExpr  =  and.getFirstChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.getFirstChild();  n.removeChild(newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.getFirstChild();  n.removeChild(newExpr);	  Node    newExpr    =    expr.getFirstChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	7	None	replace
60	[BUG]  [BUGGY]  Node  newExpr  =  n.getFirstChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  n.getFirstChild();  n.removeChild(newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  n.getFirstChild();  n.removeChild(newExpr);	  Node    newExpr    =    expr.getFirstChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	7	None	replace
61	[BUG]  [BUGGY]  Node  newExpr  =  cond.getFirstChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  cond.getFirstChild();  n.removeChild(newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  cond.getFirstChild();  n.removeChild(newExpr);	  Node    newExpr    =    expr.getFirstChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	7	None	replace
62	[BUG]  [BUGGY]  Node  newExpr  =  expr.getNext();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.getNext();  n.removeChild(newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getNext();  n.removeChild(newExpr);	  Node    newExpr    =    expr.getFirstChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	7	None	replace
63	[BUG]  [BUGGY]  Node  newExpr  =  else.getFirstChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  else.getFirstChild();  n.removeChild(newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  else.getFirstChild();  n.removeChild(newExpr);	  Node    newExpr    =    expr.getFirstChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	7	None	replace
64	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild()  +  1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild()  +  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild()  +  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
65	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr  +  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr  +  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr  +  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
66	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr  +  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr  +  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
67	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType()  +  1);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType()  +  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType()  +  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
68	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild()  +  1);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild()  +  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild()  +  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
69	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  expr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
70	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent(),  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
71	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
72	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent(),  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
73	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
74	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
75	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
76	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
77	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
78	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
79	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
80	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
81	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
82	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
83	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n,  and.getLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n,  and.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  n,  and.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	29	None	replace
84	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.removeFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  and.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.removeFirstChild());    	non-compiled	[CE]  ')'  expected	41	None	replace
85	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.getFirstChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.removeFirstChild());    	non-compiled	[CE]  ')'  expected	41	None	replace
86	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and.removeFirstChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  and.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.removeFirstChild());    	non-compiled	[CE]  ')'  expected	41	None	replace
87	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  and.removeFirstChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  and.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  and.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.removeFirstChild());    	non-compiled	[CE]  ')'  expected	41	None	replace
88	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  and.removeFirstChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  and.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  and.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.removeFirstChild());    	non-compiled	[CE]  ')'  expected	41	None	replace
89	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeFirstChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	53	None	replace
90	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	53	None	replace
91	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	53	None	replace
92	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.removeFirstChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n.removeFirstChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	53	None	replace
93	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  cond);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	53	None	replace
94	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.removeFirstChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond.removeFirstChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	53	None	replace
95	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.removeFirstChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	53	None	replace
96	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  cond);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
97	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
98	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(any,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(any,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(any,  expr);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
99	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  expr.cloneTree());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
100	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent(),  expr.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
101	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
102	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
103	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
104	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
105	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_CONSTRUCTORS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_SYNTHETIC);    	non-compiled	[CE]  ')'  expected	47	None	replace
106	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_SYNTHETIC);    	non-compiled	[CE]  ')'  expected	47	None	replace
107	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_SYNTHETIC);    	non-compiled	[CE]  ')'  expected	47	None	replace
108	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.getParent());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.getParent());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  and.getParent());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getParent());    	non-compiled	[CE]  ')'  expected	34	None	replace
109	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getNext());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getNext());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getNext());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getParent());    	non-compiled	[CE]  ')'  expected	34	None	replace
110	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent(),  and);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getParent(),  and);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getParent());    	non-compiled	[CE]  ')'  expected	34	None	replace
111	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
112	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  InVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  InVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  InVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
113	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  InVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  InVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  InVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
114	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  assign);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  assign);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  assign);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
115	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
116	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild()  -  1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild()  -  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild()  -  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    -    1);    	non-compiled	[CE]  ')'  expected	49	None	replace
117	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild()  -  1);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild()  -  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild()  -  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    -    1);    	non-compiled	[CE]  ')'  expected	49	None	replace
118	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr  -  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr  -  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr  -  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    -    1);    	non-compiled	[CE]  ')'  expected	49	None	replace
119	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  expr.cloneTree());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
120	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  parent);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
121	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  cond);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
122	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
123	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
124	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.cloneTree(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.cloneTree(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond.cloneTree(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
125	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
126	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
127	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
128	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
129	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.getType(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.getType(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond.getType(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
130	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
131	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.getType(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.getType(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n.getType(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
132	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	12	None	replace
133	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	12	None	replace
134	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.getParent());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.getParent());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and.getParent());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getParent());    	non-compiled	[CE]  ')'  expected	33	None	replace
135	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  parent);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  parent);	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getParent());    	non-compiled	[CE]  ')'  expected	33	None	replace
136	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.getParent());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.getParent());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.getParent());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getParent());    	non-compiled	[CE]  ')'  expected	33	None	replace
137	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree(),  and);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree(),  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
138	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  n);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  n);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  n);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
139	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent.cloneTree(),  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent.cloneTree(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent.cloneTree(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
140	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
141	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
142	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  assign);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  assign);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  assign);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
143	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	19	None	replace
144	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	19	None	replace
145	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	19	None	replace
146	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getLastChild()));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getLastChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getLastChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	19	None	replace
147	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  cond);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	19	None	replace
148	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.getType());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getType());    	non-compiled	[CE]  ')'  expected	28	None	replace
149	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getType());    	non-compiled	[CE]  ')'  expected	28	None	replace
150	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getType());    	non-compiled	[CE]  ')'  expected	28	None	replace
151	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.getType());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getType());    	non-compiled	[CE]  ')'  expected	28	None	replace
152	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n,  and.getType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n,  and.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  n,  and.getType());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getType());    	non-compiled	[CE]  ')'  expected	28	None	replace
153	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getType());    	non-compiled	[CE]  ')'  expected	28	None	replace
154	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
155	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
156	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
157	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr,  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
158	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  parent);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
159	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr,  parent);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
160	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	17	None	replace
161	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	17	None	replace
162	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  STANDARD_OBJECT_CONSTRUCTORS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	17	None	replace
163	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getLastChild(),  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getLastChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getLastChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild(),    expr);    	non-compiled	[CE]  ')'  expected	62	None	replace
164	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild(),  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild(),    expr);    	non-compiled	[CE]  ')'  expected	62	None	replace
165	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild(),  expr);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild(),    expr);    	non-compiled	[CE]  ')'  expected	62	None	replace
166	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getLastChild(),  and);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getLastChild(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getLastChild(),  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild(),    expr);    	non-compiled	[CE]  ')'  expected	62	None	replace
167	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild(),    expr);    	non-compiled	[CE]  ')'  expected	62	None	replace
168	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getLastChild(),  expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getLastChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getLastChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild(),    expr);    	non-compiled	[CE]  ')'  expected	62	None	replace
169	[BUG]  [BUGGY]  n.removeChild(expr);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  n.removeChild(expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	n.removeChild(expr);	  n.removeChild(cond);    	non-compiled	[CE]  ')'  expected	64	None	replace
170	[BUG]  [BUGGY]  n.removeChild(and);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  n.removeChild(and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	n.removeChild(and);	  n.removeChild(cond);    	non-compiled	[CE]  ')'  expected	64	None	replace
171	[BUG]  [BUGGY]  n.removeChild(assign);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  n.removeChild(assign);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	n.removeChild(assign);	  n.removeChild(cond);    	non-compiled	[CE]  ')'  expected	64	None	replace
172	[BUG]  [BUGGY]  parent.replaceChild(n,  and);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  parent.replaceChild(n,  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	parent.replaceChild(n,  and);	  n.removeChild(cond);    	non-compiled	[CE]  ')'  expected	64	None	replace
173	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  and.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
174	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
175	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild(),  and);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild(),  and);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
176	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.nextChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.nextChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.nextChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.nextChild());    	non-compiled	[CE]  ')'  expected	61	None	replace
177	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.nextChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.nextChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.nextChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.nextChild());    	non-compiled	[CE]  ')'  expected	61	None	replace
178	[BUG]  [BUGGY]  Node  newExpr  =  and.getFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.getFirstChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.getFirstChild();	  Node    newExpr    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	8	None	replace
179	[BUG]  [BUGGY]  Node  newExpr  =  n.getLastChild();  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  n.getLastChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  n.getLastChild();	  Node    newExpr    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	8	None	replace
180	[BUG]  [BUGGY]  Node  newExpr  =  parent.getFirstChild();  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  parent.getFirstChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  parent.getFirstChild();	  Node    newExpr    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	8	None	replace
181	[BUG]  [BUGGY]  Node  newExpr  =  cond.getFirstChild();  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  cond.getFirstChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  cond.getFirstChild();	  Node    newExpr    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	8	None	replace
182	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  and);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  and);	  Node    newExpr    =    NodeUtil.newExpr(n,    and);    	non-compiled	[CE]  ')'  expected	27	None	replace
183	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  as);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  as);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  as);	  Node    newExpr    =    NodeUtil.newExpr(n,    and);    	non-compiled	[CE]  ')'  expected	27	None	replace
184	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
185	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
186	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
187	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  cond);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
188	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
189	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
190	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
191	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  assign);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  assign);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  assign);	  Node    newExpr    =    NodeUtil.newExpr(and,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
192	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
193	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
194	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	39	None	replace
195	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	39	None	replace
196	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(an,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(an,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(an,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	39	None	replace
197	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  and.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.getLastChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
198	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  and.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  and.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  and.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.getLastChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
199	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
200	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(any,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(any,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(any,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
201	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
202	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  and);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
203	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.cloneTree(),  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.cloneTree(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond.cloneTree(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
204	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
205	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  or);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  or);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  or);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
206	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
207	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  parent);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
208	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  cond);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
209	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  and.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	23	None	replace
210	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond.cloneTree());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  cond.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	23	None	replace
211	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	23	None	replace
212	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	31	None	replace
213	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	31	None	replace
214	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	31	None	replace
215	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	31	None	replace
216	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	31	None	replace
217	[BUG]  [BUGGY]  Node  newExpr  =  and.getLastChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.getLastChild();  n.removeChild(newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.getLastChild();  n.removeChild(newExpr);	  Node    newExpr    =    expr.getLastChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	6	None	replace
218	[BUG]  [BUGGY]  Node  newExpr  =  n.getLastChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  n.getLastChild();  n.removeChild(newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  n.getLastChild();  n.removeChild(newExpr);	  Node    newExpr    =    expr.getLastChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	6	None	replace
219	[BUG]  [BUGGY]  Node  newExpr  =  cond.getLastChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  cond.getLastChild();  n.removeChild(newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  cond.getLastChild();  n.removeChild(newExpr);	  Node    newExpr    =    expr.getLastChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	6	None	replace
220	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
221	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
222	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
223	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
224	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.getFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	35	None	replace
225	[BUG]  [BUGGY]  Node  newExpr  =  and.getLastChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.getLastChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.getLastChild();	  Node    newExpr    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	5	None	replace
226	[BUG]  [BUGGY]  Node  newExpr  =  cond.getLastChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  cond.getLastChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  cond.getLastChild();	  Node    newExpr    =    expr.getLastChild();    	non-compiled	[CE]  ')'  expected	5	None	replace
227	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.getFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  and.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	15	None	replace
228	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	15	None	replace
229	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	15	None	replace
230	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  and);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getFirstChild(),  and);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	15	None	replace
231	[BUG]  [BUGGY]  Node  newExpr  =  expr.removeFirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.removeFirstChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.removeFirstChild();	  Node    newExpr    =    and.removeFirstChild();    	non-compiled	[CE]  ')'  expected	48	None	replace
232	[BUG]  [BUGGY]  Node  newExpr  =  n.removeFirstChild();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  n.removeFirstChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  n.removeFirstChild();	  Node    newExpr    =    and.removeFirstChild();    	non-compiled	[CE]  ')'  expected	48	None	replace
233	[BUG]  [BUGGY]  Node  newExpr  =  cond.removeFirstChild();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  cond.removeFirstChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  cond.removeFirstChild();	  Node    newExpr    =    and.removeFirstChild();    	non-compiled	[CE]  ')'  expected	48	None	replace
234	[BUG]  [BUGGY]  Node  newExpr  =  and.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.removeFirstChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.removeFirstChild(),  expr.getLastChild());	  Node    newExpr    =    and.removeFirstChild();    	non-compiled	[CE]  ')'  expected	48	None	replace
235	[BUG]  [BUGGY]  Node  newExpr  =  and.removeFirstChild(),  expr.getLastChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.removeFirstChild(),  expr.getLastChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.removeFirstChild(),  expr.getLastChild();	  Node    newExpr    =    and.removeFirstChild();    	non-compiled	[CE]  ')'  expected	48	None	replace
236	[BUG]  [BUGGY]  Node  newExpr  =  or.getFirstChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  or.getFirstChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  or.getFirstChild();	  Node    newExpr    =    expr.getFirstChild();    	non-compiled	[CE]  ')'  expected	4	None	replace
237	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  and.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  and.getType());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getType());    	non-compiled	[CE]  ')'  expected	18	None	replace
238	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  and);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  and);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getType());    	non-compiled	[CE]  ')'  expected	18	None	replace
239	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getType(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getType());    	non-compiled	[CE]  ')'  expected	18	None	replace
240	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getType());    	non-compiled	[CE]  ')'  expected	18	None	replace
241	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getType());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getType());    	non-compiled	[CE]  ')'  expected	18	None	replace
242	[BUG]  [BUGGY]  Node  newExpr  =  and.getLastChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.getLastChild();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.getLastChild();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getLastChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
243	[BUG]  [BUGGY]  Node  newExpr  =  n.getLastChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  n.getLastChild();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  n.getLastChild();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getLastChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
244	[BUG]  [BUGGY]  Node  newExpr  =  parent.getLastChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  parent.getLastChild();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  parent.getLastChild();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getLastChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
245	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(any,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(any,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(any,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
246	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getLastChild(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	36	None	replace
247	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getFirstChild(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	36	None	replace
248	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getFirstChild(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getFirstChild(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	36	None	replace
249	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.getLastChild(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	36	None	replace
250	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	36	None	replace
251	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	68	None	replace
252	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	68	None	replace
253	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  n,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	68	None	replace
254	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  parent);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	68	None	replace
255	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  cond);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	68	None	replace
256	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n,  and.cloneTree());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n,  and.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  n,  and.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	68	None	replace
257	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.cloneTree());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	68	None	replace
258	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild(),  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr);    	non-compiled	[CE]  ')'  expected	58	None	replace
259	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeFirstChild(),  expr);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeFirstChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.removeFirstChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr);    	non-compiled	[CE]  ')'  expected	58	None	replace
260	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.removeFirstChild(),  and);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.removeFirstChild(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.removeFirstChild(),  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr);    	non-compiled	[CE]  ')'  expected	58	None	replace
261	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.removeFirstChild(),  expr);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  cond.removeFirstChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  cond.removeFirstChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr);    	non-compiled	[CE]  ')'  expected	58	None	replace
262	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getNext());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getNext());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getNext());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getNext());    	non-compiled	[CE]  ')'  expected	32	None	replace
263	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getString());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getString());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getString());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getNext());    	non-compiled	[CE]  ')'  expected	32	None	replace
264	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  true);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  true);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  true);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
265	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  false);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  false);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  false);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
266	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  false);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  false);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  false);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
267	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  false,  cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  false,  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  false,  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
268	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.cloneTree(),  false);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(assign,  expr.cloneTree(),  false);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(assign,  expr.cloneTree(),  false);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
269	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(And,  expr.cloneTree(),  true);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(And,  expr.cloneTree(),  true);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(And,  expr.cloneTree(),  true);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
270	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree(),  true);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree(),  true);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree(),  true);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
271	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  expr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
272	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.cloneTree(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
273	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.cloneTree(),  and);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.cloneTree(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.cloneTree(),  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
274	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	25	None	replace
275	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	25	None	replace
276	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	25	None	replace
277	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  and);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.cloneTree(),  and);	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	25	None	replace
278	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getType(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	20	None	replace
279	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  parent);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	20	None	replace
280	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getLastChild()));  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getLastChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getLastChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	20	None	replace
281	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  n.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  n.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n.getLastChild());    	non-compiled	[CE]  ')'  expected	16	None	replace
282	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  n.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  n.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n.getLastChild());    	non-compiled	[CE]  ')'  expected	16	None	replace
283	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.getFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n.getLastChild());    	non-compiled	[CE]  ')'  expected	16	None	replace
284	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
285	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.getType());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and,  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getType());    	non-compiled	[CE]  ')'  expected	28	None	replace
286	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getType());    	non-compiled	[CE]  ')'  expected	28	None	replace
287	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  PROPERTY);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  PROPERTY);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  PROPERTY);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_SYNTHETIC);    	non-compiled	[CE]  ')'  expected	47	None	replace
288	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  elseOp);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  elseOp);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  elseOp);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
289	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  returnNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  returnNode);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  returnNode);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
290	[BUG]  [BUGGY]  Node  newExpr  =  and.getParent();  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.getParent();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.getParent();	  Node    newExpr    =    and.getNext();    	non-compiled	[CE]  ')'  expected	65	None	replace
291	[BUG]  [BUGGY]  Node  newExpr  =  and.getPrevious();  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.getPrevious();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.getPrevious();	  Node    newExpr    =    and.getNext();    	non-compiled	[CE]  ')'  expected	65	None	replace
292	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.nextChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.nextChild(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.nextChild(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.nextChild());    	non-compiled	[CE]  ')'  expected	61	None	replace
293	[BUG]  [BUGGY]  Node  newExpr  =  expr.getLastChild();  parent.replaceChild(n,  and);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.getLastChild();  parent.replaceChild(n,  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getLastChild();  parent.replaceChild(n,  and);	  Node    newExpr    =    expr.getLastChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
294	[BUG]  [BUGGY]  Node  newExpr  =  node.getFirstChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  node.getFirstChild();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  node.getFirstChild();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getLastChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
295	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	53	None	replace
296	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  elseOp);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  elseOp);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  elseOp);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	53	None	replace
297	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  cond.getType());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getType());    	non-compiled	[CE]  ')'  expected	18	None	replace
298	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.getParent());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.getParent());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(a,  expr.getParent());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getParent());    	non-compiled	[CE]  ')'  expected	33	None	replace
299	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent(),  and);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr.getParent(),  and);	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getParent());    	non-compiled	[CE]  ')'  expected	33	None	replace
300	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  elseBranchIsExpressionBlock);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  elseBranchIsExpressionBlock);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  elseBranchIsExpressionBlock);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
301	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
302	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  elseBranch);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  elseBranch);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  elseBranch);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	46	None	replace
303	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  n.removeFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  n.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  n.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n.removeFirstChild());    	non-compiled	[CE]  ')'  expected	40	None	replace
304	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.removeFirstChild(),  expr);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n.removeFirstChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n.removeFirstChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    n.removeFirstChild());    	non-compiled	[CE]  ')'  expected	40	None	replace
305	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  and.getFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  and.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  and.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.removeFirstChild());    	non-compiled	[CE]  ')'  expected	41	None	replace
306	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.removeFirstChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.removeFirstChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.removeFirstChild());    	non-compiled	[CE]  ')'  expected	41	None	replace
307	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
308	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.removeFirstChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.removeFirstChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.removeFirstChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	50	None	replace
309	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild(),  and);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(cond,  expr.removeFirstChild(),  and);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
310	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond.removeFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  cond.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
311	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and.getFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  and.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  and.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
312	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(und,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
313	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(or,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
314	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getNext());    	non-compiled	[CE]  ')'  expected	32	None	replace
315	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	36	None	replace
316	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(a,  expr);	  Node    newExpr    =    NodeUtil.newExpr(n,    expr);    	non-compiled	[CE]  ')'  expected	3	None	replace
317	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(And,  expr);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(And,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(And,  expr);	  Node    newExpr    =    NodeUtil.newExpr(n,    expr);    	non-compiled	[CE]  ')'  expected	3	None	replace
318	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  returnNode);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  returnNode);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  returnNode);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
319	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  returnNode);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  returnNode);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  returnNode);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
320	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeLastChild(),  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeLastChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeLastChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr);    	non-compiled	[CE]  ')'  expected	58	None	replace
321	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  cond);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr);    	non-compiled	[CE]  ')'  expected	58	None	replace
322	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	20	None	replace
323	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(n,    and);    	non-compiled	[CE]  ')'  expected	27	None	replace
324	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  or);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  or);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  or);	  Node    newExpr    =    NodeUtil.newExpr(n,    and);    	non-compiled	[CE]  ')'  expected	27	None	replace
325	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  node);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  node);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  node);	  Node    newExpr    =    NodeUtil.newExpr(n,    and);    	non-compiled	[CE]  ')'  expected	27	None	replace
326	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr.getLastChild());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(und,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
327	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(a,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	13	None	replace
328	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  returnNode);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  returnNode);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  returnNode);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
329	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  elseBranch);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  elseBranch);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  elseBranch);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
330	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  elseOp);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  elseOp);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  elseOp);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
331	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  returnNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  returnNode);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  returnNode);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
332	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  n.getLastChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  n.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  n.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n.getLastChild());    	non-compiled	[CE]  ')'  expected	16	None	replace
333	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  n.getLastChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  n.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  n.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n.getLastChild());    	non-compiled	[CE]  ')'  expected	16	None	replace
334	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  false);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  false);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  false);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	68	None	replace
335	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	37	None	replace
336	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  returnNode);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  returnNode);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  returnNode);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	19	None	replace
337	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond.getFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  cond.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  cond.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	15	None	replace
338	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(after,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(after,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(after,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	15	None	replace
339	[BUG]  [BUGGY]  Node  newExpr  =  expr.getFirstChild();  parent.removeChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.getFirstChild();  parent.removeChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getFirstChild();  parent.removeChild(n,  newExpr);	  Node    newExpr    =    expr.getFirstChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	9	None	replace
340	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(or,  expr);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
341	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(und,  expr);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr);    	non-compiled	[CE]  ')'  expected	1	None	replace
342	[BUG]  [BUGGY]  Node  newExpr  =  expr.removeFirstChild();  n.removeChild(newExpr);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.removeFirstChild();  n.removeChild(newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.removeFirstChild();  n.removeChild(newExpr);	  Node    newExpr    =    expr.getLastChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	6	None	replace
343	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  parent);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr);    	non-compiled	[CE]  ')'  expected	60	None	replace
344	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(const,  expr.getFirstChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(const,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(const,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	11	None	replace
345	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(a,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	39	None	replace
346	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(und,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	39	None	replace
347	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(a,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	35	None	replace
348	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(refr,  expr.cloneTree(),  and);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(refr,  expr.cloneTree(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(refr,  expr.cloneTree(),  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    ref);    	non-compiled	[CE]  ')'  expected	44	None	replace
349	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getParent());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getParent());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getParent());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getParent());    	non-compiled	[CE]  ')'  expected	34	None	replace
350	[BUG]  [BUGGY]  Node  newExpr  =  expr.getNext()  -  1;  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.getNext()  -  1;  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getNext()  -  1;	  Node    newExpr    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	63	None	replace
351	[BUG]  [BUGGY]  Node  newExpr  =  then.getNext();  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  then.getNext();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  then.getNext();	  Node    newExpr    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	63	None	replace
352	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  n);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  n);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(und,  n);	  Node    newExpr    =    NodeUtil.newExpr(cond,    n);    	non-compiled	[CE]  ')'  expected	30	None	replace
353	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  n);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  n);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(or,  n);	  Node    newExpr    =    NodeUtil.newExpr(cond,    n);    	non-compiled	[CE]  ')'  expected	30	None	replace
354	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(And,  n);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(And,  n);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(And,  n);	  Node    newExpr    =    NodeUtil.newExpr(cond,    n);    	non-compiled	[CE]  ')'  expected	30	None	replace
355	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(a,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(a,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	25	None	replace
356	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(und,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(und,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	25	None	replace
357	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getType(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getType(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getType(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	67	None	replace
358	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(const,  expr.cloneTree(),  and);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(const,  expr.cloneTree(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(const,  expr.cloneTree(),  and);	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	23	None	replace
359	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.cloneTree(),  expr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.cloneTree(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and.cloneTree(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
360	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  elseOp);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  elseOp);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr,  elseOp);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
361	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  elseBranch);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  elseBranch);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr,  elseBranch);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
362	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
363	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  inVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  inVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  inVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
364	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  parent.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  parent.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
365	[BUG]  [BUGGY]  Node  newExpr  =  expr.getFirstChild();  n.removeChild(and);  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.getFirstChild();  n.removeChild(and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getFirstChild();  n.removeChild(and);	  Node    newExpr    =    expr.getFirstChild();    n.removeChild(newExpr);    	non-compiled	[CE]  ')'  expected	7	None	replace
366	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  returnNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  returnNode);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  returnNode);	  Node    newExpr    =    NodeUtil.newExpr(and,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
367	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  name1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  name1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  name1);	  Node    newExpr    =    NodeUtil.newExpr(and,    parent);    	non-compiled	[CE]  ')'  expected	2	None	replace
368	[BUG]  [BUGGY]  Node  newExpr  =  and.removeLastChild();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.removeLastChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.removeLastChild();	  Node    newExpr    =    and.removeFirstChild();    	non-compiled	[CE]  ')'  expected	48	None	replace
369	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  cond);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
370	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  expr.cloneTree());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(parent,  expr.getParent(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
371	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  *  1);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  *  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr  *  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
372	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  2);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  2);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  2);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
373	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  expr  +  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  expr  +  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
374	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1,  parent);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
375	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1  -  cond);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1  -  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1  -  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ')'  expected	69	None	replace
376	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(n,  and.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(n,  and.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
377	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(parent.getFirstChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(parent.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(parent.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
378	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  false);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  false);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  false);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
379	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  false);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  false);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  false);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
380	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree(),  false);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree(),  false);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree(),  false);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
381	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  and.getLastChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  and.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  and.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.getLastChild());    	non-compiled	[CE]  ')'  expected	14	None	replace
382	[BUG]  [BUGGY]  n.addChildToFront(and);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  n.addChildToFront(and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	n.addChildToFront(and);	  n.removeChild(cond);    	non-compiled	[CE]  ')'  expected	64	None	replace
383	[BUG]  [BUGGY]  Node  newExpr  =  AND.getFirstChild();  [CE]  ')'  expected  [FE]                                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  AND.getFirstChild();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  AND.getFirstChild();	  Node    newExpr    =    n.getFirstChild();    	non-compiled	[CE]  ')'  expected	8	None	replace
384	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(e,  and.removeFirstChild());  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(e,  and.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(e,  and.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(expr,    and.removeFirstChild());    	non-compiled	[CE]  ')'  expected	41	None	replace
385	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  expr);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
386	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.getLastChild(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
387	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.cloneTree(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.cloneTree(),  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.cloneTree(),  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
388	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree(),  expr.getFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree(),  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.cloneTree(),  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	56	None	replace
389	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(an,  expr.getFirstChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(an,  expr.getFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(an,  expr.getFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getFirstChild());    	non-compiled	[CE]  ')'  expected	42	None	replace
390	[BUG]  [BUGGY]  Node  newExpr  =  expr.removeFirstChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.removeFirstChild();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.removeFirstChild();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getLastChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	10	None	replace
391	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getFirstChild(),  and);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getFirstChild(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  expr.getFirstChild(),  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getLastChild(),    expr);    	non-compiled	[CE]  ')'  expected	62	None	replace
392	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(or,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	25	None	replace
393	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  OR_PRECEDENCE,  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    OR_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	26	None	replace
394	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [CE]  ')'  expected  [FE]                            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getFirstChild(),  STANDARD_OBJECT_EXPRESSION_FLAGS);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
395	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  expr.cloneTree());  [CE]  ')'  expected  [FE]                              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_EXPRESSION_FLAGS,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	21	None	replace
396	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  expr.getLastChild());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getNext(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getNext());    	non-compiled	[CE]  ')'  expected	32	None	replace
397	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  repr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  repr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  repr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    ref);    	non-compiled	[CE]  ')'  expected	44	None	replace
398	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  ref,  cond);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  ref,  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  ref,  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    ref);    	non-compiled	[CE]  ')'  expected	44	None	replace
399	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  expr.cloneTree());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
400	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  expr);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getParent(),  expr.cloneTree(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getParent(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	59	None	replace
401	[BUG]  [BUGGY]  Node  newExpr  =  expr.getFirstChild();  and.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.getFirstChild();  and.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.getFirstChild();  and.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getFirstChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	9	None	replace
402	[BUG]  [BUGGY]  Node  newExpr  =  expr.removeFirstChild();  parent.replaceChild(n,  and);  [CE]  ')'  expected  [FE]                                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  expr.removeFirstChild();  parent.replaceChild(n,  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  expr.removeFirstChild();  parent.replaceChild(n,  and);	  Node    newExpr    =    expr.getFirstChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	9	None	replace
403	[BUG]  [BUGGY]  Node  newExpr  =  cond.getFirstChild();  parent.replaceChild(n,  newExpr);  [CE]  ')'  expected  [FE]                                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  cond.getFirstChild();  parent.replaceChild(n,  newExpr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  cond.getFirstChild();  parent.replaceChild(n,  newExpr);	  Node    newExpr    =    expr.getFirstChild();    parent.replaceChild(n,    newExpr);    	non-compiled	[CE]  ')'  expected	9	None	replace
404	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.removeFirstChild());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(or,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.removeFirstChild());    	non-compiled	[CE]  ')'  expected	38	None	replace
405	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  expr.cloneTree());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
406	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
407	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  isLowerPrecedenceInExpression(expr));  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  isLowerPrecedenceInExpression(expr));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.cloneTree(),  isLowerPrecedenceInExpression(expr));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	66	None	replace
408	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  elseOp);  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  elseOp);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  AND_PRECEDENCE,  elseOp);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	20	None	replace
409	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(or,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(n,    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	12	None	replace
410	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  parent);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
411	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  and);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr,  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr,  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr);    	non-compiled	[CE]  ')'  expected	51	None	replace
412	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  expr.getLastChild());  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
413	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  expr.cloneTree());  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
414	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  cond,  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    cond);    	non-compiled	[CE]  ')'  expected	24	None	replace
415	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.getParent());  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.getParent());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(or,  expr.getParent());	  Node    newExpr    =    NodeUtil.newExpr(parent,    expr.getParent());    	non-compiled	[CE]  ')'  expected	45	None	replace
416	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getLastChild(),  expr);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getLastChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  expr.getLastChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    expr.getLastChild());    	non-compiled	[CE]  ')'  expected	67	None	replace
417	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.getType());  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(or,  expr.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(or,  expr.getType());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getType());    	non-compiled	[CE]  ')'  expected	18	None	replace
418	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.getType());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(expr,  and.getType());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(expr,  and.getType());	  Node    newExpr    =    NodeUtil.newExpr(cond,    expr.getType());    	non-compiled	[CE]  ';'  expected	18	None	replace
419	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  elseOp);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  elseOp);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  OR_PRECEDENCE,  elseOp);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    OR_PRECEDENCE);    	non-compiled	[CE]  ';'  expected	19	None	replace
420	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  repr);  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  repr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  repr);	  Node    newExpr    =    NodeUtil.newExpr(n,    and);    	non-compiled	[CE]  ';'  expected	27	None	replace
421	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.cloneTree());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ';'  expected	46	None	replace
422	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr);  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ';'  expected	46	None	replace
423	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.removeFirstChild());  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.removeFirstChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.removeFirstChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ';'  expected	46	None	replace
424	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.getLastChild());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    InVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ';'  expected	46	None	replace
425	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  expr);  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ';'  expected	53	None	replace
426	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  expr.cloneTree());  [CE]  ';'  expected  [FE]                          AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.removeFirstChild(),  expr.getLastChild(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.removeFirstChild(),    expr.getLastChild());    	non-compiled	[CE]  ';'  expected	53	None	replace
427	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  expr.cloneTree());  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ';'  expected	68	None	replace
428	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  expr.getLastChild());  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.cloneTree(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.cloneTree());    	non-compiled	[CE]  ';'  expected	68	None	replace
429	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1,  expr.cloneTree());  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1,  expr.cloneTree());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr  +  1,  expr.cloneTree());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr    +    1);    	non-compiled	[CE]  ';'  expected	69	None	replace
430	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getNext()));  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getNext()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getNext()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ';'  expected	57	None	replace
431	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE));  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    isLowerPrecedenceInExpression(expr.getFirstChild()));    	non-compiled	[CE]  ')'  expected	57	None	replace
432	[BUG]  [BUGGY]  Node  newExpr  =  and.cloneTree();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  and.cloneTree();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  and.cloneTree();	  Node    newExpr    =    and.removeFirstChild();    	non-compiled	[CE]  ')'  expected	48	None	replace
433	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  AND_PRECEDENCE);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  AND_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  AND_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getFirstChild(),    AND_PRECEDENCE);    	non-compiled	[CE]  ')'  expected	36	None	replace
434	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC,  parent);  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_SYNTHETIC);    	non-compiled	[CE]  ')'  expected	47	None	replace
435	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC,  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  STANDARD_OBJECT_SYNTHETIC,  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    STANDARD_OBJECT_SYNTHETIC);    	non-compiled	[CE]  ')'  expected	47	None	replace
436	[BUG]  [BUGGY]  Node  newExpr  =  AND.getNext();  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  AND.getNext();  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  AND.getNext();	  Node    newExpr    =    expr.getNext();    	non-compiled	[CE]  ')'  expected	63	None	replace
437	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getParent());  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getParent());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  n,  expr.getParent());	  Node    newExpr    =    NodeUtil.newExpr(and,    n,    expr.getType());    	non-compiled	[CE]  ')'  expected	28	None	replace
438	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  and);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  and);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  and);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
439	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  parent,  returnNode);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  parent,  returnNode);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  parent,  returnNode);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    parent);    	non-compiled	[CE]  ')'  expected	22	None	replace
440	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  expr);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  expr);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  expr);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
441	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr.cloneTree(),  isLowerPrecedenceInExpression(expr.getFirstChild()));	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr.cloneTree());    	non-compiled	[CE]  ')'  expected	54	None	replace
442	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  false,  parent);  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  false,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  false,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    false);    	non-compiled	[CE]  ')'  expected	43	None	replace
443	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.nextChild(),  expr.getLastChild());  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.nextChild(),  expr.getLastChild());  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.nextChild(),  expr.getLastChild());	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.nextChild());    	non-compiled	[CE]  ')'  expected	61	None	replace
444	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.getType(),  INVALID_REGULAR_EXPRESSION_FLAGS,  OR_PRECEDENCE);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.getType(),    INVALID_REGULAR_EXPRESSION_FLAGS);    	non-compiled	[CE]  ')'  expected	17	None	replace
445	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr,  parent);  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr,  parent);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr,  parent);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
446	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr  +  1);  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr  +  1);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr  +  1);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
447	[BUG]  [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr,  cond);  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      if  (isLowerPrecedenceInExpression(cond,  AND_PRECEDENCE)  ||  isLowerPrecedenceInExpression(expr.getFirstChild(),  AND_PRECEDENCE))  {  return  n;  }  n.removeChild(cond);  Node  and  =  new  Node(Token.AND,  cond,  expr.removeFirstChild())  .copyInformationFrom(n);      [BUGGY]  Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr,  cond);  [BUGGY]      parent.replaceChild(n,  newExpr);  reportCodeChange();  return  newExpr;  }  return  n;  }    [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.5773502691896258	312	312	1	replace	Node  newExpr  =  NodeUtil.newExpr(and,  expr.cloneTree(),  expr,  cond);	  Node    newExpr    =    NodeUtil.newExpr(and,    expr.cloneTree(),    expr);    	non-compiled	[CE]  ')'  expected	55	None	replace
