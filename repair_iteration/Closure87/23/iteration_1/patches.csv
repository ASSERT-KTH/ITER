bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent,  num  +  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(parent,  num  +  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(parent,  num  +  1);	  Node    newNode    =    Node.newNumber(parent,    num);    	non-compiled	[CE]  	4	None	replace
2	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(n,  parent);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(n,  parent);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(n,  parent);	  Node    newNode    =    Node.newNumber(parent,    num);    	non-compiled	[CE]  	4	None	replace
3	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(n,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(n,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(n,  num);	  Node    newNode    =    Node.newNumber(parent,    num);    	non-compiled	[CE]  	4	None	replace
4	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent,  n);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(parent,  n);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(parent,  n);	  Node    newNode    =    Node.newNumber(parent,    num);    	non-compiled	[CE]  	4	None	replace
5	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(parent,  num);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(parent,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(parent,  num);	  Node    newNode    =    Node.newNumber(parent,    num);    	non-compiled	[CE]  	4	None	replace
6	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  INVALID_REGULAR_EXPRESSION_FLAGS);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  INVALID_REGULAR_EXPRESSION_FLAGS);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  INVALID_REGULAR_EXPRESSION_FLAGS);	  Node    newNode    =    Node.newString(Token.NAME,   "   ");    	non-compiled	[CE]  	11	None	replace
7	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  getName());  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  getName());  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  getName());	  Node    newNode    =    Node.newString(Token.NAME,   "   ");    	non-compiled	[CE]  	11	None	replace
8	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  1);	  Node    newNode    =    Node.newString(Token.NAME,   "   ");    	non-compiled	[CE]  	11	None	replace
9	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  name);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  name);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  name);	  Node    newNode    =    Node.newString(Token.NAME,   "   ");    	non-compiled	[CE]  	11	None	replace
10	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  n);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  n);	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
11	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num  +  1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num  +  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  num  +  1);	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
12	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num,  parent);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num,  parent);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  num,  parent);	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
13	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  name);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  name);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  name);	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
14	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num,  parent.getType());  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num,  parent.getType());  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  num,  parent.getType());	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
15	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  0);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  0);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  0);	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
16	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num,  parent.type);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num,  parent.type);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  num,  parent.type);	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
17	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	1	None	replace
18	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num,  parent);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num,  parent);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num,  parent);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	1	None	replace
19	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.getType());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.getType());  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent.getType());	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	1	None	replace
20	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  num);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n,  num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	1	None	replace
21	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent,  num);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent,  num);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	1	None	replace
22	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n  +  1);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n  +  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n  +  1);	  Node    newNode    =    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	7	None	replace
23	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1,  parent);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1,  parent);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  1,  parent);	  Node    newNode    =    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	7	None	replace
24	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1,  parent.getType());  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  1,  parent.getType());  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  1,  parent.getType());	  Node    newNode    =    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	7	None	replace
25	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  2);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  2);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  2);	  Node    newNode    =    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	7	None	replace
26	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.num  +  1);  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent.num  +  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent.num  +  1);	  Node    newNode    =    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	7	None	replace
27	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  3);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  3);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  3);	  Node    newNode    =    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	7	None	replace
28	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  parent);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n,  parent);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n,  parent);	  Node    newNode    =    Node.newString(Token.NAME,    n);    	non-compiled	[CE]  	6	None	replace
29	[BUG]  [BUGGY]  Node  newNode  =  n.getFirstChild();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  n.getFirstChild();  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  n.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
30	[BUG]  [BUGGY]  Node  newNode  =  parent.getFirstChild();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  parent.getFirstChild();  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  parent.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
31	[BUG]  [BUGGY]  Node  newNode  =  node.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  node.getFirstChild();  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  node.getFirstChild();	      	non-compiled	[CE]  	8	None	replace
32	[BUG]  [BUGGY]  Node  newNode  =  node.getNext();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  node.getNext();  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  node.getNext();	      	non-compiled	[CE]  	8	None	replace
33	[BUG]  [BUGGY]  Node  newNode  =  n.getFirstChild();  parent.replaceChild(n,  newNode);  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  n.getFirstChild();  parent.replaceChild(n,  newNode);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  n.getFirstChild();  parent.replaceChild(n,  newNode);	      	non-compiled	[CE]  	8	None	replace
34	[BUG]  [BUGGY]  Node  newNode  =  n.getNext();  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  n.getNext();  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  n.getNext();	      	non-compiled	[CE]  	8	None	replace
35	[BUG]  [BUGGY]  Node  newNode  =  node.getFirstChild();  parent.replaceChild(n,  newNode);  [CE]  [FE]                                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  node.getFirstChild();  parent.replaceChild(n,  newNode);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  node.getFirstChild();  parent.replaceChild(n,  newNode);	      	non-compiled	[CE]  	8	None	replace
36	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(num  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(num  +  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(num  +  1);	  Node    newNode    =    Node.newNumber(num    +    1);    	non-compiled	[CE]  	5	None	replace
37	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(num  +  2);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(num  +  2);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(num  +  2);	  Node    newNode    =    Node.newNumber(num    +    1);    	non-compiled	[CE]  	5	None	replace
38	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(n  +  1);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(n  +  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(n  +  1);	  Node    newNode    =    Node.newNumber(num    +    1);    	non-compiled	[CE]  	5	None	replace
39	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent.num  +  1);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(parent.num  +  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(parent.num  +  1);	  Node    newNode    =    Node.newNumber(num    +    1);    	non-compiled	[CE]  	5	None	replace
40	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num));  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num));  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  num));	  Node    newNode    =    Node.newString(Token.NUMBER);    	non-compiled	[CE]  	10	None	replace
41	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  1);	  Node    newNode    =    Node.newString(Token.NUMBER);    	non-compiled	[CE]  	10	None	replace
42	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num)+  1;  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num)+  1;  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  num)+  1;	  Node    newNode    =    Node.newString(Token.NUMBER);    	non-compiled	[CE]  	10	None	replace
43	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(n);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(n);	  Node    newNode    =    Node.newNumber(parent);    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(num);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(num);	  Node    newNode    =    Node.newNumber(0);    	non-compiled	[CE]  	2	None	replace
45	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num));  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num));  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num));	  Node    newNode    =    Node.newNumber(0);    	non-compiled	[CE]  	2	None	replace
46	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent,  num  -  1);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(parent,  num  -  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(parent,  num  -  1);	  Node    newNode    =    Node.newNumber(parent,    num);    	non-compiled	[CE]  	4	None	replace
47	[BUG]  [BUGGY]  Node  newNode  =  NodeUtil.newNumber(parent,  num);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  NodeUtil.newNumber(parent,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  NodeUtil.newNumber(parent,  num);	      	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  Node  newNode  =  parent.getParent();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  parent.getParent();  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  parent.getParent();	      	non-compiled	[CE]  	8	None	replace
49	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(2);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(2);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(2);	  Node    newNode    =    Node.newNumber(0);    	non-compiled	[CE]  	2	None	replace
50	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER_INT,  num);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER_INT,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER_INT,  num);	  Node    newNode    =    Node.newNumber(0);    	non-compiled	[CE]  	2	None	replace
51	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(parent  +  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(parent  +  1);	  Node    newNode    =    Node.newNumber(num    +    1);    	non-compiled	[CE]  	5	None	replace
52	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  0);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  0);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  0);	  Node    newNode    =    Node.newString(Token.NAME,    num);    	non-compiled	[CE]  	1	None	replace
53	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num  +  2);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  num  +  2);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  num  +  2);	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent  +  num  +  1);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  parent  +  num  +  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  parent  +  num  +  1);	  Node    newNode    =    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	7	None	replace
55	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  *  1);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  *  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  *  1);	  Node    newNode    =    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	7	None	replace
56	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  num);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(Token.NAME,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(Token.NAME,  num);	  Node    newNode    =    Node.newString(Token.NAME,   "   ");    	non-compiled	[CE]  	11	None	replace
57	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(parent,  0);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(parent,  0);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(parent,  0);	  Node    newNode    =    Node.newNumber(parent,    num);    	non-compiled	[CE]  	4	None	replace
58	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(1);	  Node    newNode    =    Node.newNumber(0);    	non-compiled	[CE]  	2	None	replace
59	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  _num);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  _num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  _num);	  Node    newNode    =    Node.newString(Token.NAME,   "   ");    	non-compiled	[CE]  	11	None	replace
60	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n  +  1,  num);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  n  +  1,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  n  +  1,  num);	  Node    newNode    =    Node.newString(Token.NAME,    n);    	non-compiled	[CE]  	6	None	replace
61	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  n,  num);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  n,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  n,  num);	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
62	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  -1);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NUMBER,  -1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NUMBER,  -1);	  Node    newNode    =    Node.newString(Token.NUMBER,    num);    	non-compiled	[CE]  	9	None	replace
63	[BUG]  [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  4);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newString(Token.NAME,  num  +  4);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newString(Token.NAME,  num  +  4);	  Node    newNode    =    Node.newString(Token.NAME,    num    +    1);    	non-compiled	[CE]  	7	None	replace
64	[BUG]  [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent,  num);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent,  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  maybeReplaceChildWithNumber(n,  parent,  num);	      	non-compiled	[CE]  	8	None	replace
65	[BUG]  [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent.getFirstChild(),  num);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent.getFirstChild(),  num);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  maybeReplaceChildWithNumber(n,  parent.getFirstChild(),  num);	      	non-compiled	[CE]  	8	None	replace
66	[BUG]  [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent);  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  maybeReplaceChildWithNumber(n,  parent);	      	non-compiled	[CE]  	8	None	replace
67	[BUG]  [BUGGY]  Node  newNode  =(Node)n.cloneTree();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =(Node)n.cloneTree();  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =(Node)n.cloneTree();	      	non-compiled	[CE]  	8	None	replace
68	[BUG]  [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent.getFirstChild());  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  maybeReplaceChildWithNumber(n,  parent.getFirstChild());  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  maybeReplaceChildWithNumber(n,  parent.getFirstChild());	      	non-compiled	[CE]  	8	None	replace
69	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(num  +  1  -  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(num  +  1  -  1);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(num  +  1  -  1);	  Node    newNode    =    Node.newNumber(num    +    1);    	non-compiled	[CE]  	5	None	replace
70	[BUG]  [BUGGY]  Node  newNode  =  Node.newNumber(num  *  2);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    private  Node  maybeReplaceChildWithNumber(Node  n,  Node  parent,  int  num)  {    [BUGGY]  Node  newNode  =  Node.newNumber(num  *  2);  [BUGGY]    if  (!newNode.isEquivalentTo(n))  {  parent.replaceChild(n,  newNode);  reportCodeChange();  return  newNode;  }  return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  maybeReplaceChildWithNumber  [RETURN_TYPE]  Node  Node  n  Node  parent  int  num  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  n  newNode  parent  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  num  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.3779644730092272	818	818	1	replace	Node  newNode  =  Node.newNumber(num  *  2);	  Node    newNode    =    Node.newNumber(num    +    1);    	non-compiled	[CE]  	5	None	replace
