bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  thenBranch  =  Cond.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  Cond.getLastChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  Cond.getLastChild();	  Node    thenBranch    =    Cond.getFirstChild();    	non-compiled	[CE]  	31	None	replace
2	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getLastChild().getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getLastChild().getNext();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getLastChild().getNext();	  Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  Node  thenBranch  =  n.getFirstChild().getNext();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.getFirstChild().getNext();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.getFirstChild().getNext();	  Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getParent();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getParent();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getFirstChild().getParent();	  Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getLastChild();  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getLastChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getFirstChild().getLastChild();	  Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  Node  thenBranch  =  n.getOwn();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.getOwn();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.getOwn();	  Node    thenBranch    =    cond.getOwn();    	non-compiled	[CE]  	12	None	replace
7	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getLastChild();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  cond.getLastChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  cond.getLastChild();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
8	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getNext();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  cond.getNext();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  cond.getNext();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
9	[BUG]  [BUGGY]  Node  thenAssign  =  n.getFirstChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  n.getFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  n.getFirstChild();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
10	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getType()  ==  Token.NAME?  cond.getLastChild()  :  cond.getLastChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  cond.getType()  ==  Token.NAME?  cond.getLastChild()  :  cond.getLastChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  cond.getType()  ==  Token.NAME?  cond.getLastChild()  :  cond.getLastChild();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
11	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getType()  ==  Token.VAR?  cond.getLastChild()  :  cond.getLastChild();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  cond.getType()  ==  Token.VAR?  cond.getLastChild()  :  cond.getLastChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  cond.getType()  ==  Token.VAR?  cond.getLastChild()  :  cond.getLastChild();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
12	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getType()  ==  Token.CALL?  cond.getLastChild()  :  cond.getLastChild();  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  cond.getType()  ==  Token.CALL?  cond.getLastChild()  :  cond.getLastChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  cond.getType()  ==  Token.CALL?  cond.getLastChild()  :  cond.getLastChild();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
13	[BUG]  [BUGGY]  Node  thenBranch  =  n.getPreviousChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.getPreviousChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.getPreviousChild();	  Node    thenBranch    =    cond.getPreviousChild();    	non-compiled	[CE]  	14	None	replace
14	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getOwnerChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getOwnerChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getOwnerChild();	  Node    thenBranch    =    cond.getPreviousChild();    	non-compiled	[CE]  	14	None	replace
15	[BUG]  [BUGGY]  Node  thenBranch  =  CondUtil.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  CondUtil.getFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  CondUtil.getFirstChild();	  Node    thenBranch    =    CondUtil.getLastChild();    	non-compiled	[CE]  	10	None	replace
16	[BUG]  [BUGGY]  Node  thenBranch  =  CondUtil.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  CondUtil.getNext();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  CondUtil.getNext();	  Node    thenBranch    =    CondUtil.getLastChild();    	non-compiled	[CE]  	10	None	replace
17	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getLastChild().getNext()  -  1;  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getLastChild().getNext()  -  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getLastChild().getNext()  -  1;	  Node    thenBranch    =    cond.getFirstChild().getNext()    -    1;    	non-compiled	[CE]  	5	None	replace
18	[BUG]  [BUGGY]  Node  thenBranch  =  n.getFirstChild().getNext()  -  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.getFirstChild().getNext()  -  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.getFirstChild().getNext()  -  1;	  Node    thenBranch    =    cond.getFirstChild().getNext()    -    1;    	non-compiled	[CE]  	5	None	replace
19	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getParent()  -  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getParent()  -  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getFirstChild().getParent()  -  1;	  Node    thenBranch    =    cond.getFirstChild().getNext()    -    1;    	non-compiled	[CE]  	5	None	replace
20	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getParent().getNext()  -  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getParent().getNext()  -  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getFirstChild().getParent().getNext()  -  1;	  Node    thenBranch    =    cond.getFirstChild().getNext()    -    1;    	non-compiled	[CE]  	5	None	replace
21	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getNext()  +  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getNext()  +  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getFirstChild().getNext()  +  1;	  Node    thenBranch    =    cond.getFirstChild().getNext()    -    1;    	non-compiled	[CE]  	5	None	replace
22	[BUG]  [BUGGY]  Node  thenBranch  =  cond.cloneFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.cloneFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.cloneFirstChild();	  Node    thenBranch    =    cond.cloneNode();    	non-compiled	[CE]  	18	None	replace
23	[BUG]  [BUGGY]  thenBranch  =  cond.getParent();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.getParent();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.getParent();	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
24	[BUG]  [BUGGY]  thenBranch  =  cond.getLastChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.getLastChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.getLastChild();	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
25	[BUG]  [BUGGY]  thenBranch  =  cond.getFirstChild();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.getFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.getFirstChild();	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
26	[BUG]  [BUGGY]  thenBranch  =  cond.getPrevious();  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.getPrevious();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.getPrevious();	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
27	[BUG]  [BUGGY]  thenBranch  =  cond.getNext()  -  1;  [CE]  [FE]                                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.getNext()  -  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.getNext()  -  1;	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
28	[BUG]  [BUGGY]  thenBranch  =  cond.getNext()  +  1;  [CE]  [FE]                                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.getNext()  +  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.getNext()  +  1;	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
29	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(cond);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  getBlockExpression(cond);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  getBlockExpression(cond);	  Node    thenBranch    =    getBlockExpression(n);    	non-compiled	[CE]  	13	None	replace
30	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(n.getFirstChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  getBlockExpression(n.getFirstChild());  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  getBlockExpression(n.getFirstChild());	  Node    thenBranch    =    getBlockExpression(n);    	non-compiled	[CE]  	13	None	replace
31	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(n.getLastChild());  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  getBlockExpression(n.getLastChild());  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  getBlockExpression(n.getLastChild());	  Node    thenBranch    =    getBlockExpression(n);    	non-compiled	[CE]  	13	None	replace
32	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(n.getNext());  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  getBlockExpression(n.getNext());  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  getBlockExpression(n.getNext());	  Node    thenBranch    =    getBlockExpression(n);    	non-compiled	[CE]  	13	None	replace
33	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(cond.getFirstChild());  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  getBlockExpression(cond.getFirstChild());  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  getBlockExpression(cond.getFirstChild());	  Node    thenBranch    =    getBlockExpression(n);    	non-compiled	[CE]  	13	None	replace
34	[BUG]  [BUGGY]  Node  thenBranch  =  cond.cloneChildren(),  false);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.cloneChildren(),  false);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.cloneChildren(),  false);	  Node    thenBranch    =    cond.cloneChildren();    	non-compiled	[CE]  	26	None	replace
35	[BUG]  [BUGGY]  Node  thenBranch  =  cond.clone();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.clone();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.clone();	  Node    thenBranch    =    cond.cloneBlock();    	non-compiled	[CE]  	19	None	replace
36	[BUG]  [BUGGY]  Node  thenBranch  =  getOwnExpression(cond);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  getOwnExpression(cond);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  getOwnExpression(cond);	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	25	None	replace
37	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(cond.getLastChild());  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  getBlockExpression(cond.getLastChild());  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  getBlockExpression(cond.getLastChild());	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	25	None	replace
38	[BUG]  [BUGGY]  Node  thenBranch  =  parent.getParent();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  parent.getParent();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  parent.getParent();	  Node    thenBranch    =    n.getParent();    	non-compiled	[CE]  	16	None	replace
39	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getLowerCase();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getLowerCase();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getLowerCase();	  Node    thenBranch    =    cond.getOwner();    	non-compiled	[CE]  	11	None	replace
40	[BUG]  [BUGGY]  Node  thenBranch  =  Cond.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  Cond.getNext();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  Cond.getNext();	  Node    thenBranch    =    firstAssign.getNext();    	non-compiled	[CE]  	30	None	replace
41	[BUG]  [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  parent);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  parent);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.replaceChild(n,  parent);	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
42	[BUG]  [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  nextBranch);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  nextBranch);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.replaceChild(n,  nextBranch);	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
43	[BUG]  [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  var);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  var);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.replaceChild(n,  var);	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
44	[BUG]  [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  n);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.replaceChild(n,  n);	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
45	[BUG]  [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  prev);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  prev);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.replaceChild(n,  prev);	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
46	[BUG]  [BUGGY]  Node  thenBranch  =  cond.removeChild(n);  [CE]  [FE]                      AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.removeChild(n);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.removeChild(n);	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
47	[BUG]  [BUGGY]  Node  thenBranch  =  n.getFirstChild()  -  1;  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.getFirstChild()  -  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.getFirstChild()  -  1;	  Node    thenBranch    =    cond.getFirstChild()    -    1;    	non-compiled	[CE]  	4	None	replace
48	[BUG]  [BUGGY]  Node  thenBranch  =  n.getString();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.getString();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.getString();	  Node    thenBranch    =    cond.getString();    	non-compiled	[CE]  	17	None	replace
49	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getString(),  false);  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getString(),  false);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getString(),  false);	  Node    thenBranch    =    cond.getString();    	non-compiled	[CE]  	17	None	replace
50	[BUG]  [BUGGY]  Node  thenBranch  =  n.getType();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.getType();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.getType();	  Node    thenBranch    =    cond.getType();    	non-compiled	[CE]  	15	None	replace
51	[BUG]  [BUGGY]  Node  thenBranch  =  n.removeLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.removeLastChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.removeLastChild();	  Node    thenBranch    =    cond.removeLastChild();    	non-compiled	[CE]  	2	None	replace
52	[BUG]  [BUGGY]  Node  thenBranch  =  cond.next();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.next();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.next();	  Node    thenBranch    =    cond.removeLastChild();    	non-compiled	[CE]  	2	None	replace
53	[BUG]  [BUGGY]  Node  thenBranch  =  n.getfirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.getfirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.getfirstChild();	  Node    thenBranch    =    cond.getfirstChild();    	non-compiled	[CE]  	23	None	replace
54	[BUG]  [BUGGY]  Node  thenBranch  =  n.getLastChild()  -  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  n.getLastChild()  -  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  n.getLastChild()  -  1;	  Node    thenBranch    =    cond.getLastChild()    -    1;    	non-compiled	[CE]  	6	None	replace
55	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getfirstChild()  -  1;  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getfirstChild()  -  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getfirstChild()  -  1;	  Node    thenBranch    =    cond.getLastChild()    -    1;    	non-compiled	[CE]  	6	None	replace
56	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getPreviousChild()  -  1;  [CE]  [FE]                                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getPreviousChild()  -  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getPreviousChild()  -  1;	  Node    thenBranch    =    cond.getLastChild()    -    1;    	non-compiled	[CE]  	6	None	replace
57	[BUG]  [BUGGY]  Node  thenBranch  =  CondUtil.getOwnSideEffects(n);  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  CondUtil.getOwnSideEffects(n);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  CondUtil.getOwnSideEffects(n);	  Node    thenBranch    =    CondUtil.getLastChild();    	non-compiled	[CE]  	10	None	replace
58	[BUG]  [BUGGY]  Node  thenBranch  =  cond.cloneNext();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.cloneNext();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.cloneNext();	  Node    thenBranch    =    cond.cloneBlock();    	non-compiled	[CE]  	19	None	replace
59	[BUG]  [BUGGY]  Node  thenBranch  =  cond.nextChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.nextChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.nextChild();	  Node    thenBranch    =    cond.removeLastChild();    	non-compiled	[CE]  	2	None	replace
60	[BUG]  [BUGGY]  Node  thenBranch  =  cond!=  null?  cond.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond!=  null?  cond.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond!=  null?  cond.getType()  :  INVALID_REGULAR_EXPRESSION_FLAGS;	  Node    thenBranch    =    cond.getType();    	non-compiled	[CE]  	15	None	replace
61	[BUG]  [BUGGY]  Node  thenBranch  =  cond!=  null?  cond.getType()  :  Integer.parseInt(cond.getString());  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond!=  null?  cond.getType()  :  Integer.parseInt(cond.getString());  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond!=  null?  cond.getType()  :  Integer.parseInt(cond.getString());	  Node    thenBranch    =    cond.getType();    	non-compiled	[CE]  	15	None	replace
62	[BUG]  [BUGGY]  Node  thenBranch  =  cond!=  null?  cond.getType()  :  Integer.toString(cond.getString());  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond!=  null?  cond.getType()  :  Integer.toString(cond.getString());  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond!=  null?  cond.getType()  :  Integer.toString(cond.getString());	  Node    thenBranch    =    cond.getType();    	non-compiled	[CE]  	15	None	replace
63	[BUG]  [BUGGY]  Node  thenBranch  =  cond!=  null?  cond.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond!=  null?  cond.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond!=  null?  cond.getType()  :  STANDARD_OBJECT_CONSTRUCTORS;	  Node    thenBranch    =    cond.getType();    	non-compiled	[CE]  	15	None	replace
64	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(cond.getNext());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  getBlockExpression(cond.getNext());  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  getBlockExpression(cond.getNext());	  Node    thenBranch    =    getBlockExpression(n);    	non-compiled	[CE]  	13	None	replace
65	[BUG]  [BUGGY]  Node  thenBranch  =  cond.removeChildren();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.removeChildren();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.removeChildren();	  Node    thenBranch    =    cond.cloneChildren();    	non-compiled	[CE]  	26	None	replace
66	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getParent();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  cond.getParent();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  cond.getParent();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
67	[BUG]  [BUGGY]  Node  thenAssign  =  cond.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  cond.removeFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  cond.removeFirstChild();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
68	[BUG]  [BUGGY]  Node  thenAssign  =  cond.getPreviousChild();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  cond.getPreviousChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  cond.getPreviousChild();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
69	[BUG]  [BUGGY]  Node  thenBranch  =  secondAssign.getNext();  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  secondAssign.getNext();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  secondAssign.getNext();	  Node    thenBranch    =    firstAssign.getNext();    	non-compiled	[CE]  	30	None	replace
70	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getNextChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getNextChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getNextChild();	  Node    thenBranch    =    cond.getPreviousChild();    	non-compiled	[CE]  	14	None	replace
71	[BUG]  [BUGGY]  Node  thenBranch  =  cond.removeChild(firstBranch);  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.removeChild(firstBranch);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.removeChild(firstBranch);	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
72	[BUG]  [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  expr);  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  expr);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.replaceChild(n,  expr);	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
73	[BUG]  [BUGGY]  Node  thenBranch  =  cond.removeChild(cond);  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.removeChild(cond);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.removeChild(cond);	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
74	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.removeFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  thenBranch.removeFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  thenBranch.removeFirstChild();	  Node    thenBranch    =    n.removeFirstChild();    	non-compiled	[CE]  	1	None	replace
75	[BUG]  [BUGGY]  Node  thenBranch  =  node.removeFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  node.removeFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  node.removeFirstChild();	  Node    thenBranch    =    n.removeFirstChild();    	non-compiled	[CE]  	1	None	replace
76	[BUG]  [BUGGY]  Node  thenBranch  =  cond.cloneParentNode();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.cloneParentNode();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.cloneParentNode();	  Node    thenBranch    =    cond.cloneNode();    	non-compiled	[CE]  	18	None	replace
77	[BUG]  [BUGGY]  Node  thenBranch  =  firstBranch.getLastChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  firstBranch.getLastChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  firstBranch.getLastChild();	  Node    thenBranch    =    n.getLastChild();    	non-compiled	[CE]  	8	None	replace
78	[BUG]  [BUGGY]  Node  thenBranch  =  firstBranch.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  firstBranch.getFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  firstBranch.getFirstChild();	  Node    thenBranch    =    n.getLastChild();    	non-compiled	[CE]  	8	None	replace
79	[BUG]  [BUGGY]  Node  thenBranch  =  node.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  node.getFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  node.getFirstChild();	  Node    thenBranch    =    n.getLastChild();    	non-compiled	[CE]  	8	None	replace
80	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getPrevious();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getFirstChild().getPrevious();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getFirstChild().getPrevious();	  Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  	7	None	replace
81	[BUG]  [BUGGY]  Node  thenBranch  =  thenBranch.getFirstChild();  [CE]  [FE]                AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  thenBranch.getFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  thenBranch.getFirstChild();	  Node    thenBranch    =    n.getFirstChild();    	non-compiled	[CE]  	9	None	replace
82	[BUG]  [BUGGY]  Node  thenBranch  =  first.getFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  first.getFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  first.getFirstChild();	  Node    thenBranch    =    n.getFirstChild();    	non-compiled	[CE]  	9	None	replace
83	[BUG]  [BUGGY]  thenBranch  =  cond.getNext()  &&  NodeUtil.isLiteralValue(cond,  false));  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.getNext()  &&  NodeUtil.isLiteralValue(cond,  false));  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.getNext()  &&  NodeUtil.isLiteralValue(cond,  false));	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
84	[BUG]  [BUGGY]  thenBranch  =  cond.getNext()  &&  CondUtil.isLiteralValue(cond,  false));  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.getNext()  &&  CondUtil.isLiteralValue(cond,  false));  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.getNext()  &&  CondUtil.isLiteralValue(cond,  false));	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
85	[BUG]  [BUGGY]  thenBranch  =  cond.getNext()  &&  CondUtil.isLiteralValue(cond,  false);  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.getNext()  &&  CondUtil.isLiteralValue(cond,  false);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.getNext()  &&  CondUtil.isLiteralValue(cond,  false);	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(thenBranch!=  null);  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Preconditions.checkState(thenBranch!=  null);  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Preconditions.checkState(thenBranch!=  null);	  Node    thenBranch    =    thenBranch.getNext();    	non-compiled	[CE]  	22	None	replace
87	[BUG]  [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch.getNext());  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  getBlockExpression(thenBranch.getNext());  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  getBlockExpression(thenBranch.getNext());	  Node    thenBranch    =    getBlockExpression(thenBranch);    	non-compiled	[CE]  	25	None	replace
88	[BUG]  [BUGGY]  Node  thenBranch  =  CondUtil.removeFirstChild();  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  CondUtil.removeFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  CondUtil.removeFirstChild();	  Node    thenBranch    =    CondUtil.getLastChild();    	non-compiled	[CE]  	10	None	replace
89	[BUG]  [BUGGY]  Node  thenBranch  =  parent.getFirstChild();  [CE]  [FE]              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  parent.getFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  parent.getFirstChild();	  Node    thenBranch    =    n.getLastChild();    	non-compiled	[CE]  	8	None	replace
90	[BUG]  [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  '_');  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.replaceChild(n,  '_');  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.replaceChild(n,  '_');	  Node    thenBranch    =    cond.replaceChild(n,    firstBranch);    	non-compiled	[CE]  	29	None	replace
91	[BUG]  [BUGGY]  Node  thenBranch  =  cond.removeFirstChild().getNext();  [CE]  [FE]                              AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.removeFirstChild().getNext();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.removeFirstChild().getNext();	  Node    thenBranch    =    cond.getFirstChild().getNext();    	non-compiled	[CE]  	7	None	replace
92	[BUG]  [BUGGY]  thenBranch  =  cond.removeFirstChild();  [CE]  [FE]                          AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.removeFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.removeFirstChild();	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
93	[BUG]  [BUGGY]  thenBranch  =  cond.cloneTree();  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  thenBranch  =  cond.cloneTree();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	thenBranch  =  cond.cloneTree();	  thenBranch    =    cond.getNext();    	non-compiled	[CE]  	28	None	replace
94	[BUG]  [BUGGY]  Node  thenBranch  =  cond.getFirstChild()  +  1;  [CE]  [FE]                            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  cond.getFirstChild()  +  1;  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  cond.getFirstChild()  +  1;	  Node    thenBranch    =    cond.getLastChild()    -    1;    	non-compiled	[CE]  	6	None	replace
95	[BUG]  [BUGGY]  Node  thenBranch  =  first.removeFirstChild();  [CE]  [FE]            AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenBranch  =  first.removeFirstChild();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenBranch  =  first.removeFirstChild();	  Node    thenBranch    =    n.removeFirstChild();    	non-compiled	[CE]  	1	None	replace
96	[BUG]  [BUGGY]  Node  thenAssign  =  cond.cloneTree();  [CE]  [FE]                        AssertionFailedError      [CONTEXT]      Node  cond  =  n.getFirstChild();    if  (NodeUtil.isLiteralValue(cond,  true))  {  return  n;  }      [BUGGY]  Node  thenAssign  =  cond.cloneTree();  [BUGGY]      Node  elseBranch  =  thenBranch.getNext();  if  (elseBranch  ==  null)  {  if  (isFoldableExpressBlock(thenBranch))  {  Node  expr  =  getBlockExpression(thenBranch);  if  (isPropertyAssignmentInExpression(expr))  {    return  n;  }  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeIf  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  elseBranchIsExpressionBlock  elseBranchIsVar  thenBranchIsExpressionBlock  thenBranchIsVar  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  and  assign  assignName  cond  elseAssign  elseBranch  elseExpr  elseOp  expr  hookNode  lhs  maybeName1  maybeName2  n  name1  name2  newExpr  or  parent  returnNode  thenAssign  thenBranch  thenExpr  thenOp  var  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.2886751345948129	271	271	1	replace	Node  thenAssign  =  cond.cloneTree();	  Node    thenAssign    =    cond.getFirstChild();    	non-compiled	[CE]  	27	None	replace
