bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Node  rightParent  =  left.getParent();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Node  rightParent  =  left.getParent();  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Node  rightParent  =  left.getParent();	      	non-compiled	[CE]  	7	None	replace
2	[BUG]  [BUGGY]  Node  right  =  left.getNext();  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Node  right  =  left.getNext();  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Node  right  =  left.getNext();	      	non-compiled	[CE]  	7	None	replace
3	[BUG]  [BUGGY]  Node  leftParent  =  left.getParent();  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Node  leftParent  =  left.getParent();  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Node  leftParent  =  left.getParent();	      	non-compiled	[CE]  	7	None	replace
4	[BUG]  [BUGGY]  Node  right  =  left.getFirstChild();  [CE]  [FE]                          AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Node  right  =  left.getFirstChild();  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Node  right  =  left.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
5	[BUG]  [BUGGY]  Node  rightParent  =  left.getNext();  [CE]  [FE]                            AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Node  rightParent  =  left.getNext();  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Node  rightParent  =  left.getNext();	      	non-compiled	[CE]  	7	None	replace
6	[BUG]  [BUGGY]  Node  rightParent  =  left.getFirstChild();  [CE]  [FE]                              AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Node  rightParent  =  left.getFirstChild();  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Node  rightParent  =  left.getFirstChild();	      	non-compiled	[CE]  	7	None	replace
7	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  [CE]  [FE]                                AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.NAME);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Preconditions.checkState(left.getType()  ==  Token.NAME);	      	non-compiled	[CE]  	7	None	replace
8	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(left,  falseNode);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(left,  falseNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(left,  falseNode);	  right    =    tryMinimizeCondition(right,    falseNode);    	non-compiled	[CE]  	8	None	replace
9	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(left,  falseNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(left,  falseNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(left,  falseNode);	  right    =    tryMinimizeCondition(right,    falseNode);    	non-compiled	[CE]  	8	None	replace
10	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  left  =  tryMinimizeCondition(left,  falseNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	left  =  tryMinimizeCondition(left,  falseNode);	  right    =    tryMinimizeCondition(right,    falseNode);    	non-compiled	[CE]  	8	None	replace
11	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(right,  falseNode);	  right    =    tryMinimizeCondition(right,    falseNode);    	non-compiled	[CE]  	8	None	replace
12	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(right,  falseNode);	  right    =    tryMinimizeCondition(right,    falseNode);    	non-compiled	[CE]  	8	None	replace
13	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  falseNode,  trueNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  falseNode,  trueNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  falseNode,  trueNode);	  right    =    tryMinimizeCondition(right,    falseNode);    	non-compiled	[CE]  	8	None	replace
14	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  right);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  right);	  right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	1	None	replace
15	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  leftParent);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  leftParent);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  leftParent);	  right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	1	None	replace
16	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(left,  right);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(left,  right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(left,  right);	  right    =    tryMinimizeCondition(right,    left);    	non-compiled	[CE]  	2	None	replace
17	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  left  +  1);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  left  +  1);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  left  +  1);	  right    =    tryMinimizeCondition(right,    left);    	non-compiled	[CE]  	2	None	replace
18	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  left,  falseNode);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  left,  falseNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  left,  falseNode);	  right    =    tryMinimizeCondition(right,    left);    	non-compiled	[CE]  	2	None	replace
19	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(n,  left);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(n,  left);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(n,  left);	  right    =    tryMinimizeCondition(right,    left);    	non-compiled	[CE]  	2	None	replace
20	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  left  -  1);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  left  -  1);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  left  -  1);	  right    =    tryMinimizeCondition(right,    left);    	non-compiled	[CE]  	2	None	replace
21	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  left,  trueNode);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  left,  trueNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  left,  trueNode);	  right    =    tryMinimizeCondition(right,    left);    	non-compiled	[CE]  	2	None	replace
22	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(left,  n);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(left,  n);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(left,  n);	  right    =    tryMinimizeCondition(right,    n);    	non-compiled	[CE]  	9	None	replace
23	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(left,  n);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(left,  n);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(left,  n);	  right    =    tryMinimizeCondition(right,    n);    	non-compiled	[CE]  	9	None	replace
24	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(left,  n);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(left,  n);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(left,  n);	  right    =    tryMinimizeCondition(right,    n);    	non-compiled	[CE]  	9	None	replace
25	[BUG]  [BUGGY]  left  =  tryMinimizeCondition(left,  n);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  left  =  tryMinimizeCondition(left,  n);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	left  =  tryMinimizeCondition(left,  n);	  right    =    tryMinimizeCondition(right,    n);    	non-compiled	[CE]  	9	None	replace
26	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(right,  left);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(right,  left);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(right,  left);	  right    =    tryMinimizeCondition(right,    n);    	non-compiled	[CE]  	9	None	replace
27	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(n,  right);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(n,  right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(n,  right);	  right    =    tryMinimizeCondition(right,    n);    	non-compiled	[CE]  	9	None	replace
28	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(right,  right);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(right,  right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(right,  right);	  n    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	5	None	replace
29	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(left,  right);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(left,  right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(left,  right);	  n    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	5	None	replace
30	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(right);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(right);	  n    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	5	None	replace
31	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(left,  left);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(left,  left);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(left,  left);	  n    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	5	None	replace
32	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(right,  trueNode);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(right,  trueNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(right,  trueNode);	  n    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	5	None	replace
33	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(left,  left);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(left,  left);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(left,  left);	  rightParent    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	4	None	replace
34	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(right,  left);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(right,  left);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(right,  left);	  rightParent    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	4	None	replace
35	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(left);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  leftParent  =  tryMinimizeCondition(left);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	leftParent  =  tryMinimizeCondition(left);	  rightParent    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	4	None	replace
36	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(left  +  1);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(left  +  1);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(left  +  1);	  rightParent    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	4	None	replace
37	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(n);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(n);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(n);	  rightParent    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	4	None	replace
38	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(left,  trueNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(left,  trueNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(left,  trueNode);	  right    =    tryMinimizeCondition(right,    trueNode);    	non-compiled	[CE]  	6	None	replace
39	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  trueNode,  left);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  trueNode,  left);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  trueNode,  left);	  right    =    tryMinimizeCondition(right,    trueNode);    	non-compiled	[CE]  	6	None	replace
40	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  trueNode,  falseNode);  [CE]  [FE]                      AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  trueNode,  falseNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  trueNode,  falseNode);	  right    =    tryMinimizeCondition(right,    trueNode);    	non-compiled	[CE]  	6	None	replace
41	[BUG]  [BUGGY]  n  =  tryMinimizeCondition(left,  trueNode);  [CE]  [FE]                        AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMinimizeCondition(left,  trueNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMinimizeCondition(left,  trueNode);	  right    =    tryMinimizeCondition(right,    trueNode);    	non-compiled	[CE]  	6	None	replace
42	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(right.cloneTree());  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(right.cloneTree());  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(right.cloneTree());	  rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	3	None	replace
43	[BUG]  [BUGGY]  RightParent  =  tryMinimizeCondition(left);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  RightParent  =  tryMinimizeCondition(left);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	RightParent  =  tryMinimizeCondition(left);	  rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	3	None	replace
44	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(right  +  1);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(right  +  1);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(right  +  1);	  rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	3	None	replace
45	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  left.cloneTree());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  left.cloneTree());  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  left.cloneTree());	  right    =    tryMinimizeCondition(right,    left);    	non-compiled	[CE]  	2	None	replace
46	[BUG]  [BUGGY]  RightParent  =  tryMinimizeCondition(right,  trueNode);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  RightParent  =  tryMinimizeCondition(right,  trueNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	RightParent  =  tryMinimizeCondition(right,  trueNode);	  right    =    tryMinimizeCondition(right,    falseNode);    	non-compiled	[CE]  	8	None	replace
47	[BUG]  [BUGGY]  Right  =  tryMinimizeCondition(right,  trueNode);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Right  =  tryMinimizeCondition(right,  trueNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Right  =  tryMinimizeCondition(right,  trueNode);	  right    =    tryMinimizeCondition(right,    falseNode);    	non-compiled	[CE]  	8	None	replace
48	[BUG]  [BUGGY]  Node  rightParent  =  n.getParent();  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Node  rightParent  =  n.getParent();  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Node  rightParent  =  n.getParent();	      	non-compiled	[CE]  	7	None	replace
49	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(left,  right);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(left,  right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(left,  right);	  rightParent    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	4	None	replace
50	[BUG]  [BUGGY]  leftParent  =  tryMinimizeCondition(right);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  leftParent  =  tryMinimizeCondition(right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	leftParent  =  tryMinimizeCondition(right);	  rightParent    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	4	None	replace
51	[BUG]  [BUGGY]  Right  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Right  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Right  =  tryMinimizeCondition(right,  falseNode);	  right    =    tryMinimizeCondition(right,    trueNode);    	non-compiled	[CE]  	6	None	replace
52	[BUG]  [BUGGY]  RightParent  =  tryMinimizeCondition(right,  falseNode);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  RightParent  =  tryMinimizeCondition(right,  falseNode);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	RightParent  =  tryMinimizeCondition(right,  falseNode);	  right    =    tryMinimizeCondition(right,    trueNode);    	non-compiled	[CE]  	6	None	replace
53	[BUG]  [BUGGY]  RightParent  =  tryMinimizeCondition(right,  left);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  RightParent  =  tryMinimizeCondition(right,  left);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	RightParent  =  tryMinimizeCondition(right,  left);	  right    =    tryMinimizeCondition(right,    n);    	non-compiled	[CE]  	9	None	replace
54	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(right,  n);  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(right,  n);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(right,  n);	  right    =    tryMinimizeCondition(right,    n);    	non-compiled	[CE]  	9	None	replace
55	[BUG]  [BUGGY]  n  =  tryMaximizeCondition(right);  [CE]  [FE]                AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  n  =  tryMaximizeCondition(right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	n  =  tryMaximizeCondition(right);	  n    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	5	None	replace
56	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  left.removeFirstChild());  [CE]  [FE]          AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  left.removeFirstChild());  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  left.removeFirstChild());	  right    =    tryMinimizeCondition(right,    left);    	non-compiled	[CE]  	2	None	replace
57	[BUG]  [BUGGY]  right  =  tryMinimizeCondition(right,  null);  [CE]  [FE]                  AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMinimizeCondition(right,  null);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMinimizeCondition(right,  null);	  right    =    tryMinimizeCondition(right,    trueNode);    	non-compiled	[CE]  	6	None	replace
58	[BUG]  [BUGGY]  right  =  tryMaximizeCondition(right);  [CE]  [FE]        AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  right  =  tryMaximizeCondition(right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	right  =  tryMaximizeCondition(right);	  right    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	1	None	replace
59	[BUG]  [BUGGY]  RightParent  =  tryMinimizeCondition(right);  [CE]  [FE]            AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  RightParent  =  tryMinimizeCondition(right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	RightParent  =  tryMinimizeCondition(right);	  rightParent    =    tryMinimizeCondition(right);    	non-compiled	[CE]  	3	None	replace
60	[BUG]  [BUGGY]  rightParent  =  tryMinimizeCondition(right,  right);  [CE]  [FE]              AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  rightParent  =  tryMinimizeCondition(right,  right);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	rightParent  =  tryMinimizeCondition(right,  right);	  rightParent    =    tryMinimizeCondition(left);    	non-compiled	[CE]  	4	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK);  [CE]  [FE]                    AssertionFailedError    [CONTEXT]    return  n;  case  Token.OR:  case  Token.AND:  {  Node  left  =  n.getFirstChild();  Node  right  =  n.getLastChild();    left  =  tryMinimizeCondition(left);    [BUGGY]  Preconditions.checkState(left.getType()  ==  Token.BLOCK);  [BUGGY]            TernaryValue  rightVal  =  NodeUtil.getBooleanValue(right);  if  (NodeUtil.getBooleanValue(right)  !=  TernaryValue.UNKNOWN)  {  int  type  =  n.getType();  [CLASS]  PeepholeSubstituteAlternateSyntax  1  2  3  FoldArrayAction  [METHOD]  tryMinimizeCondition  [RETURN_TYPE]  Node  Node  n  [VARIABLES]  Pattern  REGEXP_FLAGS_RE  FoldArrayAction  NOT_SAFE_TO_FOLD  SAFE_TO_FOLD_WITHOUT_ARGS  SAFE_TO_FOLD_WITH_ARGS  boolean  result  rval  ImmutableSet  STANDARD_OBJECT_CONSTRUCTORS  DiagnosticType  INVALID_REGULAR_EXPRESSION_FLAGS  Node  condition  falseNode  first  left  leftParent  n  newRoot  parent  replacement  right  rightParent  trueNode  TernaryValue  nVal  rightVal  int  AND_PRECEDENCE  OR_PRECEDENCE  complementOperator  equivalentResult  newOp  precedence  type  Predicate  DONT_TRAVERSE_FUNCTIONS_PREDICATE  isLowerPrecedencePredicate  isPropertyAssignmentInExpressionPredicate  	projects/Closure87/src/com/google/javascript/jscomp/PeepholeSubstituteAlternateSyntax.java	0.35355339059327373	719	719	1	replace	Preconditions.checkState(left.getType()  ==  Token.BLOCK);	      	non-compiled	[CE]  	7	None	replace
