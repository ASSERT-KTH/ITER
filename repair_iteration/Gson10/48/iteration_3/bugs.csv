bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  fields.values();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  fields.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  fields.values();	  return    result    ==    null?    null    :    result,    fieldNames.values();    	non-compiled	[CE]  ';'  expected	130	None	replace
2	[BUG]  [BUGGY]  return  fieldNames  ==  null?  null  :  result,  fieldNames.values();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  null  :  result,  fieldNames.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  null  :  result,  fieldNames.values();	  return    result    ==    null?    null    :    result,    fieldNames.values();    	non-compiled	[CE]  ';'  expected	130	None	replace
3	[BUG]  [BUGGY]  return  result!=  null?  null  :  result,  fieldNames.values();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result,  fieldNames.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result,  fieldNames.values();	  return    result    ==    null?    null    :    result,    fieldNames.values();    	non-compiled	[CE]  ';'  expected	130	None	replace
4	[BUG]  [BUGGY]  return  raw!=  null?  null  :  raw;  [CE]  incompatible  types  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  raw;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  incompatible  types	92	None	replace
5	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw;  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  incompatible  types	92	None	replace
6	[BUG]  [BUGGY]  return  raw!=  null?  null  :  raw.boundFields;  [CE]  cannot  find  symbol  boundFields  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  raw.boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  raw.boundFields;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  cannot  find  symbol  boundFields	92	None	replace
7	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.boundFields;  [CE]  cannot  find  symbol  boundFields  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.boundFields;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  cannot  find  symbol  boundFields	92	None	replace
8	[BUG]  [BUGGY]  return  previous  ==  null?  null  :  previous;  [CE]  cannot  find  symbol  previous  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  previous  ==  null?  null  :  previous;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  previous  ==  null?  null  :  previous;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  cannot  find  symbol  previous	92	None	replace
9	[BUG]  [BUGGY]  return  previous!=  null?  null  :  previous;  [CE]  cannot  find  symbol  previous  [FE]                  NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  previous!=  null?  null  :  previous;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  previous!=  null?  null  :  previous;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  cannot  find  symbol  previous	92	None	replace
10	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[boundField.size()  ]);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[boundField.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[boundField.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacement.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	91	None	replace
11	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.toArray(new  BoundField[boundField.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.toArray(new  BoundField[boundField.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields.toArray(new  BoundField[boundField.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacement.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	91	None	replace
12	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[raw.size()  ]);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[raw.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[raw.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacement.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
13	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.toArray(new  BoundField[replacement.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.toArray(new  BoundField[replacement.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields.toArray(new  BoundField[replacement.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacement.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	91	None	replace
14	[BUG]  [BUGGY]  return  raw!=  null?  result  :  Collections.emptyMap();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  result  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  result  :  Collections.emptyMap();	  return    result!=    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	79	None	replace
15	[BUG]  [BUGGY]  return  raw  ==  null?  result  :  Collections.emptyMap();  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  result  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  result  :  Collections.emptyMap();	  return    result!=    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	79	None	replace
16	[BUG]  [BUGGY]  return  raw!=  null?  null  :  Collections.emptyMap();  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  Collections.emptyMap();	  return    result!=    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	79	None	replace
17	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  Collections.emptyMap();  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  Collections.emptyMap();	  return    result!=    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	79	None	replace
18	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  result  :  Collections.EMPTY_MAP;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	add	return  raw!=  null?  result  :  Collections.EMPTY_MAP;	  return    result!=    null?    raw    :    Collections.emptyMap();    	compilable	  [FE]  ComparisonFailure  	79	1	replace
19	[BUG]  [BUGGY]  return  raw!=  null?  result  :  Collections.EMPTY_MAP;  [FE]  ComparisonFailure  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  result  :  Collections.EMPTY_MAP;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  result  :  Collections.EMPTY_MAP;	  return    result!=    null?    raw    :    Collections.emptyMap();    	compilable	  [FE]  ComparisonFailure  	79	1	replace
20	[BUG]  [BUGGY]  result  =  Collections.emptyList();  [CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  Map<String,BoundField>  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  Collections.emptyList();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  Collections.emptyList();	  return    result    ==    null?    null    :    result;    Collections.sort(fields);    result    =    Collections.emptyList();    	non-compiled	[CE]  incompatible  types;  no  instance(s)  of  type  variable(s)  T  exist  so  that  List<T>  conforms  to  Map<String,BoundField>	150	None	replace
21	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fieldNames);  result  =  Collections.emptyList();  [CE]  cannot  find  symbol  fieldNames  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fieldNames);  result  =  Collections.emptyList();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  Collections.sort(fieldNames);  result  =  Collections.emptyList();	  return    result    ==    null?    null    :    result;    Collections.sort(fields);    result    =    Collections.emptyList();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	150	None	replace
22	[BUG]  [BUGGY]  Result  <  null?  null  :  result;  Collections.sort(fields);  result  =  Collections.emptyList();  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Result  <  null?  null  :  result;  Collections.sort(fields);  result  =  Collections.emptyList();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Result  <  null?  null  :  result;  Collections.sort(fields);  result  =  Collections.emptyList();	  return    result    ==    null?    null    :    result;    Collections.sort(fields);    result    =    Collections.emptyList();    	non-compiled	[CE]  illegal  start  of  type	150	None	replace
23	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundFields.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundFields.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	16	None	replace
24	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
25	[BUG]  [BUGGY]  Field[]  fields  =  boundField.getFields();  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundField.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundField.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  boundField	16	None	replace
26	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  type.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  type.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
27	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  [CE]  cannot  find  symbol  fieldType  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  fieldType.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  fieldType.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  fieldType	16	None	replace
28	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  [CE]  missing  return  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  raw.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  raw.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  missing  return  statement	16	None	replace
29	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
30	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
31	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ]);	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	133	None	replace
32	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
33	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
34	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ]);  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ]);  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ]);  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( "	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	133	None	replace
35	[BUG]  [BUGGY]  return  result  ==  null?  boundField.length  :  result;  [CE]  cannot  find  symbol  boundField  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundField.length  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundField.length  :  result;	  return    result    ==    null?    field.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  boundField	39	None	replace
36	[BUG]  [BUGGY]  return  result  ==  null?  fieldType.length  :  result;  [CE]  cannot  find  symbol  fieldType  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldType.length  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldType.length  :  result;	  return    result    ==    null?    field.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldType	39	None	replace
37	[BUG]  [BUGGY]  result!=  null?  null  :  result.getRawType();  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result!=  null?  null  :  result.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result!=  null?  null  :  result.getRawType();	  return    result!=    null?    null    :    result;    result!=    null?    null    :    result.getRawType();    	non-compiled	[CE]  not  a  statement	56	None	replace
38	[BUG]  [BUGGY]  result  ==  null?  null  :  result.getRawType();  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  null  :  result.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  null  :  result.getRawType();	  return    result!=    null?    null    :    result;    result!=    null?    null    :    result.getRawType();    	non-compiled	[CE]  not  a  statement	56	None	replace
39	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getRawType();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getRawType();	  return    result!=    null?    null    :    result;    result!=    null?    null    :    result.getRawType();    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
40	[BUG]  [BUGGY]  result!=  null?  null  :  result;  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result!=  null?  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result!=  null?  null  :  result;	  return    result!=    null?    null    :    result;    result!=    null?    null    :    result;    	non-compiled	[CE]  not  a  statement	54	None	replace
41	[BUG]  [BUGGY]  result  ==  null?  null  :  result;  [CE]  not  a  statement  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  null  :  result;	  return    result!=    null?    null    :    result;    result!=    null?    null    :    result;    	non-compiled	[CE]  not  a  statement	54	None	replace
42	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fieldNames  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	122	None	replace
43	[BUG]  [BUGGY]  result  =  new  BoundField[fields.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fields  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fields.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fields.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fields	122	None	replace
44	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fieldNames  [FE]                  NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	122	None	replace
45	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                    NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ".);  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	122	None	replace
46	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  fieldNames  [FE]                      NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( ". ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	122	None	replace
47	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( ", ");  }  [CE]  cannot  find  symbol  fieldNames  [FE]                        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( ", ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( ", ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	122	None	replace
48	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [CE]  cannot  find  symbol  fieldNames  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    result[i]    =    fieldType.getGenericSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	121	None	replace
49	[BUG]  [BUGGY]  result  =  new  BoundField[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [CE]  cannot  find  symbol  fields  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    result[i]    =    fieldType.getGenericSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol  fields	121	None	replace
50	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [CE]  cannot  find  symbol  fieldNames  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    result[i]    =    fieldType.getGenericSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	121	None	replace
51	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass()  [CE]  ';'  expected  [FE]                  NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass()  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass()	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    result[i]    =    fieldType.getGenericSuperclass();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
52	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  +  1];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [CE]  cannot  find  symbol  fieldNames  [FE]                    NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  +  1];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  +  1];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    result[i]    =    fieldType.getGenericSuperclass();    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	121	None	replace
53	[BUG]  [BUGGY]  if(result  ==  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                      NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(result  ==  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(result  ==  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    result[i]    =    fieldType.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
54	[BUG]  [BUGGY]  return  type.getAnnotation(JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getAnnotation(JSON_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getAnnotation(JSON_TYPE);	  return    raw.getAnnotation(JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	128	None	replace
55	[BUG]  [BUGGY]  return  context.getAnnotation(JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  context.getAnnotation(JSON_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  context.getAnnotation(JSON_TYPE);	  return    raw.getAnnotation(JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	128	None	replace
56	[BUG]  [BUGGY]  return  raw.getAnnotation(type);  [CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw.getAnnotation(type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getAnnotation(type);	  return    raw.getAnnotation(JSON_TYPE);    	non-compiled	[CE]  method  getAnnotation  in  class  Class<T>  cannot  be  applied  to  given  types;	128	None	replace
57	[BUG]  [BUGGY]  return  field.getAnnotation(JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.getAnnotation(JSON_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.getAnnotation(JSON_TYPE);	  return    raw.getAnnotation(JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	128	None	replace
58	[BUG]  [BUGGY]  return  boundFields.getAnnotation(JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.getAnnotation(JSON_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.getAnnotation(JSON_TYPE);	  return    raw.getAnnotation(JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	128	None	replace
59	[BUG]  [BUGGY]  return  jsonAdapter.getAnnotation(JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  jsonAdapter.getAnnotation(JSON_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  jsonAdapter.getAnnotation(JSON_TYPE);	  return    raw.getAnnotation(JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	128	None	replace
60	[BUG]  [BUGGY]  return  source.getAnnotation(JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  source.getAnnotation(JSON_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  source.getAnnotation(JSON_TYPE);	  return    raw.getAnnotation(JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	128	None	replace
61	[BUG]  [BUGGY]  return  boundFields!=  null?  boundFields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields!=  null?  boundFields  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields!=  null?  boundFields  :  Collections.emptyMap();	  return    result!=    null?    fields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundFields	77	None	replace
62	[BUG]  [BUGGY]  return  result!=  null?  boundFields.length  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  boundFields.length  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  boundFields.length  :  Collections.emptyMap();	  return    result!=    null?    fields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundFields	77	None	replace
63	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
64	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
65	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  boundFields  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundFields.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	21	None	replace
66	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  raw.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	21	None	replace
67	[BUG]  [BUGGY]  Field[]  fields  =  declaredType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  declaredType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  declaredType.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
68	[BUG]  [BUGGY]  Field[]  fields  =  jsonAdapter.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  jsonAdapter  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  jsonAdapter.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  jsonAdapter.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	21	None	replace
69	[BUG]  [BUGGY]  return  raw  ==  null?  fieldNames.get(raw):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fieldNames.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fieldNames.get(raw):  result;	  return    result    ==    null?    fieldNames.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	75	None	replace
70	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  raw.fields;  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  raw.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  raw.fields;	  return    result    ==    null?    null    :    result.fields;    	non-compiled	[CE]  ';'  expected	34	None	replace
71	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.fields;  [CE]  cannot  find  symbol  fields  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.fields;	  return    result    ==    null?    null    :    result.fields;    	non-compiled	[CE]  cannot  find  symbol  fields	34	None	replace
72	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.fields;  [CE]  cannot  find  symbol  fields  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.fields;	  return    result    ==    null?    null    :    result.fields;    	non-compiled	[CE]  cannot  find  symbol  fields	34	None	replace
73	[BUG]  [BUGGY]  return  fields  ==  null?  null  :  result.fields();  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fields  ==  null?  null  :  result.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fields  ==  null?  null  :  result.fields();	  return    result    ==    null?    null    :    result.fields();    	non-compiled	[CE]  cannot  find  symbol  fields	60	None	replace
74	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.fields();  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.fields();	  return    result    ==    null?    null    :    result.fields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	60	None	replace
75	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.fields();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.fields();	  return    result    ==    null?    null    :    result.fields();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
76	[BUG]  [BUGGY]  return  result  ==  null?  null  :  field.fields();  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  field.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  field.fields();	  return    result    ==    null?    null    :    result.fields();    	non-compiled	[CE]  cannot  find  symbol  field	60	None	replace
77	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.fields();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.fields();	  return    result    ==    null?    null    :    result.fields();    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
78	[BUG]  [BUGGY]  result  =  new  BoundField[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fields  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fields	120	None	replace
79	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ".);  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	120	None	replace
80	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  cannot  find  symbol  fieldNames  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( ". ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	120	None	replace
81	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.baseFields;  [CE]  cannot  find  symbol  baseFields  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.baseFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.baseFields;	  return    result    ==    null?    null    :    result.boundFields;    	non-compiled	[CE]  cannot  find  symbol  baseFields	112	None	replace
82	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.objectFields;  [CE]  cannot  find  symbol  objectFields  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.objectFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.objectFields;	  return    result    ==    null?    null    :    result.boundFields;    	non-compiled	[CE]  cannot  find  symbol  objectFields	112	None	replace
83	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.type;  [CE]  cannot  find  symbol  type  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.type;	  return    result    ==    null?    null    :    result.boundFields;    	non-compiled	[CE]  cannot  find  symbol  type	112	None	replace
84	[BUG]  [BUGGY]  return  boundFields.getDeclaredFields();  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.getDeclaredFields();	  return    raw.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	72	None	replace
85	[BUG]  [BUGGY]  return  field.getDeclaredFields();  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.getDeclaredFields();	  return    raw.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  field	72	None	replace
86	[BUG]  [BUGGY]  return  type.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getDeclaredFields();	  return    raw.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
87	[BUG]  [BUGGY]  return  context.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  context.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  context.getDeclaredFields();	  return    raw.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
88	[BUG]  [BUGGY]  return  result.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result.getDeclaredFields();	  return    raw.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
89	[BUG]  [BUGGY]  return  raw.getDeclaredFields(),  fieldNames;  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw.getDeclaredFields(),  fieldNames;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getDeclaredFields(),  fieldNames;	  return    raw.getDeclaredFields();    	non-compiled	[CE]  ';'  expected	72	None	replace
90	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundFields.get(current):  result;  [CE]  cannot  find  symbol  boundFields  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  boundFields.get(current):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundFields.get(current):  result;	  return    result    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	33	None	replace
91	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundFields.get(type):  result;  [CE]  cannot  find  symbol  boundFields  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  boundFields.get(type):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundFields.get(type):  result;	  return    result    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	33	None	replace
92	[BUG]  [BUGGY]  result  =  boundFields.iterator().next();  [CE]  cannot  find  symbol  boundFields  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields.iterator().next();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields.iterator().next();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.iterator().next();    	non-compiled	[CE]  cannot  find  symbol  boundFields	82	None	replace
93	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator().next();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator().next();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator().next();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
94	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields!=  null?  null  :  boundFields.iterator().next();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields!=  null?  null  :  boundFields.iterator().next();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  boundFields!=  null?  null  :  boundFields.iterator().next();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
95	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields  ==  null?  null  :  boundFields.iterator().next();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields  ==  null?  null  :  boundFields.iterator().next();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  boundFields  ==  null?  null  :  boundFields.iterator().next();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
96	[BUG]  [BUGGY]  result  =  boundFields!=  null?  null  :  boundFields.iterator().next();  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields!=  null?  null  :  boundFields.iterator().next();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields!=  null?  null  :  boundFields.iterator().next();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.iterator().next();    	non-compiled	[CE]  cannot  find  symbol  boundFields	82	None	replace
97	[BUG]  [BUGGY]  final  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator().next();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  final  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator().next();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	final  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator().next();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
98	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getAnnotation(type);  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.getAnnotation(type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getAnnotation(type);	  return    result!=    null?    null    :    result.getAnnotation(JSON_NAME);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
99	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getAnnotation(field);  [CE]  cannot  find  symbol  field  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.getAnnotation(field);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getAnnotation(field);	  return    result!=    null?    null    :    result.getAnnotation(JSON_NAME);    	non-compiled	[CE]  cannot  find  symbol  field	125	None	replace
100	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.getAnnotation(type);  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.getAnnotation(type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.getAnnotation(type);	  return    result!=    null?    null    :    result.getAnnotation(JSON_NAME);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
101	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  [CE]  cannot  find  symbol  field  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  field	110	None	replace
102	[BUG]  [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  [CE]  cannot  find  symbol  boundField  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  boundField.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  boundField.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  boundField	110	None	replace
103	[BUG]  [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  context.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  context.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
104	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  [CE]  cannot  find  symbol  fieldType  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  fieldType.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  fieldType.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  fieldType	110	None	replace
105	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  type.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
106	[BUG]  [BUGGY]  Field[]  fieldNames  =  raw.getFieldNames();  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  raw.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  raw.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
107	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.getFieldNames();  [CE]  cannot  find  symbol  fields  [FE]                      NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  fields.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  fields.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  fields	110	None	replace
108	[BUG]  [BUGGY]  return  returnedFields  ==  null?  null  :  returnedFields.values();  [CE]  cannot  find  symbol  returnedFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returnedFields  ==  null?  null  :  returnedFields.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returnedFields  ==  null?  null  :  returnedFields.values();	  return    boundFields    ==    null?    null    :    boundFields.values();    	non-compiled	[CE]  cannot  find  symbol  returnedFields	129	None	replace
109	[BUG]  [BUGGY]  return  previous  ==  null?  null  :  previous.values();  [CE]  cannot  find  symbol  previous  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  previous  ==  null?  null  :  previous.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  previous  ==  null?  null  :  previous.values();	  return    boundFields    ==    null?    null    :    boundFields.values();    	non-compiled	[CE]  cannot  find  symbol  previous	129	None	replace
110	[BUG]  [BUGGY]  return  field  ==  null?  null  :  field.values();  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field  ==  null?  null  :  field.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field  ==  null?  null  :  field.values();	  return    boundFields    ==    null?    null    :    boundFields.values();    	non-compiled	[CE]  cannot  find  symbol  field	129	None	replace
111	[BUG]  [BUGGY]  return  previous  ==  null?  null  :  raw.values();  [CE]  cannot  find  symbol  previous  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  previous  ==  null?  null  :  raw.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  previous  ==  null?  null  :  raw.values();	  return    boundFields    ==    null?    null    :    boundFields.values();    	non-compiled	[CE]  cannot  find  symbol  previous	129	None	replace
112	[BUG]  [BUGGY]  return  initialized;  [CE]  cannot  find  symbol  initialized  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  initialized;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  initialized;	  return    replacement;    	non-compiled	[CE]  cannot  find  symbol  initialized	99	None	replace
113	[BUG]  [BUGGY]  return  primary;  [CE]  cannot  find  symbol  primary  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  primary;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  primary;	  return    replacement;    	non-compiled	[CE]  cannot  find  symbol  primary	99	None	replace
114	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[fields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fields	88	None	replace
115	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[boundFields.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[boundFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[boundFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	88	None	replace
116	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  BoundField[replacements.size()  ]);  [CE]  cannot  find  symbol  replacements  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  BoundField[replacements.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  BoundField[replacements.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  replacements	88	None	replace
117	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(result);  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(result);	  return    result    ==    null?    null    :    result.toArray(fields);    	non-compiled	[CE]  cannot  find  symbol  boundFields	2	None	replace
118	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[result.size()  ]);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[result.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Field[result.size()  ]);	  return    result    ==    null?    null    :    result.toArray(fields);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
119	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[result.length]);  [CE]  cannot  find  symbol  length  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[result.length]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Field[result.length]);	  return    result    ==    null?    null    :    result.toArray(fields);    	non-compiled	[CE]  cannot  find  symbol  length	2	None	replace
120	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	101	None	replace
121	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  ')'  expected	101	None	replace
122	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	101	None	replace
123	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	101	None	replace
124	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  cannot  find  symbol  fieldNames  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	101	None	replace
125	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	101	None	replace
126	[BUG]  [BUGGY]  return  raw!=  null?  null  :  raw.values();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  raw.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  raw.values();	  return    result!=    null?    null    :    result.values();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
127	[BUG]  [BUGGY]  result  ==  null?  null  :  result.values();  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  null  :  result.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  null  :  result.values();	  return    result!=    null?    null    :    result.values();    	non-compiled	[CE]  not  a  statement	8	None	replace
128	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.get(replacement);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
129	[BUG]  [BUGGY]  result  =  boundFields.get(replacement);  [CE]  cannot  find  symbol  replacement  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields.get(replacement);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields.get(replacement);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.get(replacement);    	non-compiled	[CE]  cannot  find  symbol  replacement	83	None	replace
130	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.get(replacement);  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.get(replacement);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields.get(replacement);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.get(replacement);    	non-compiled	[CE]  cannot  find  symbol  boundFields	83	None	replace
131	[BUG]  [BUGGY]  result  =  boundFields!=  null?  null  :  boundFields.get(replacement);  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields!=  null?  null  :  boundFields.get(replacement);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields!=  null?  null  :  boundFields.get(replacement);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.get(replacement);    	non-compiled	[CE]  cannot  find  symbol  boundFields	83	None	replace
132	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields!=  null?  null  :  boundFields.get(replacement);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields!=  null?  null  :  boundFields.get(replacement);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  boundFields!=  null?  null  :  boundFields.get(replacement);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.get(replacement);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
133	[BUG]  [BUGGY]  return  result  ==  null?  fieldFields[0]  :  boundFields;  [CE]  cannot  find  symbol  fieldFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldFields[0]  :  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldFields[0]  :  boundFields;	  return    result    ==    null?    fieldFields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldFields	113	None	replace
134	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.fields.getName();  [CE]  cannot  find  symbol  fields  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.fields.getName();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.fields.getName();	  return    result    ==    null?    null    :    result.getName();    	non-compiled	[CE]  cannot  find  symbol  fields	146	None	replace
135	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.getName();  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw.getName();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.getName();	  return    result    ==    null?    null    :    result.getName();    	non-compiled	[CE]  incompatible  types	146	None	replace
136	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getName();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.getName();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getName();	  return    result    ==    null?    null    :    result.getName();    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
137	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
138	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  }  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if    	non-compiled	[CE]  cannot  find  symbol  field	102	None	replace
139	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
140	[BUG]  [BUGGY]  if(fieldNames  ==  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames  ==  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames  ==  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
141	[BUG]  [BUGGY]  Constructor[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Constructor[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Constructor[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
142	[BUG]  [BUGGY]  Constructor  <?>[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Constructor  <?>[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Constructor  <?>[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
143	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
144	[BUG]  [BUGGY]  return  fieldNames  ==  null?  boundFields.get(raw):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  boundFields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  boundFields.get(raw):  result;	  return    boundFields    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	31	None	replace
145	[BUG]  [BUGGY]  return  returnedFields  ==  null?  boundFields.get(raw):  result;  [CE]  cannot  find  symbol  returnedFields  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returnedFields  ==  null?  boundFields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returnedFields  ==  null?  boundFields.get(raw):  result;	  return    boundFields    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  returnedFields	31	None	replace
146	[BUG]  [BUGGY]  result  ==  null?  boundFields.get(raw):  result;  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  boundFields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  boundFields.get(raw):  result;	  return    boundFields    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  not  a  statement	31	None	replace
147	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  boundFields.values();  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  boundFields.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  boundFields.values();	  return    raw    ==    null?    null    :    result.values();    	non-compiled	[CE]  cannot  find  symbol  boundFields	108	None	replace
148	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.values();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.values();	  return    raw    ==    null?    null    :    result.values();    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
149	[BUG]  [BUGGY]  result  <  null?  null  :  result;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  <  null?  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  <  null?  null  :  result;	  return    result    ==    null?    null    :    result;    Result    <    null?    null    :    result;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
150	[BUG]  [BUGGY]  result  ==  null?  null  :  result;  Result  <  null?  null  :  result;  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  null  :  result;  Result  <  null?  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  null  :  result;  Result  <  null?  null  :  result;	  return    result    ==    null?    null    :    result;    Result    <    null?    null    :    result;    	non-compiled	[CE]  not  a  statement	14	None	replace
151	[BUG]  [BUGGY]  result  >=  null?  null  :  result;  Result  <  null?  null  :  result;  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  >=  null?  null  :  result;  Result  <  null?  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  >=  null?  null  :  result;  Result  <  null?  null  :  result;	  return    result    ==    null?    null    :    result;    Result    <    null?    null    :    result;    	non-compiled	[CE]  not  a  statement	14	None	replace
152	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    return    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	137	None	replace
153	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [CE]  cannot  find  symbol  fieldNames  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    return    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	137	None	replace
154	[BUG]  [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [CE]  cannot  find  symbol  fields  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    return    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  fields	137	None	replace
155	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  type.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    return    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
156	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fieldNames[i];  }  [CE]  cannot  find  symbol  field  [FE]                                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    return    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	137	None	replace
157	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  cannot  find  symbol  field  [FE]                                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    return    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	137	None	replace
158	[BUG]  [BUGGY]  return  returned  ==  null?  boundFields.get(removed):  result;  [CE]  cannot  find  symbol  returned  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned  ==  null?  boundFields.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned  ==  null?  boundFields.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  returned	118	None	replace
159	[BUG]  [BUGGY]  return  raw  ==  null?  boundFields.get(removed):  result;  [CE]  cannot  find  symbol  removed  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundFields.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundFields.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  removed	118	None	replace
160	[BUG]  [BUGGY]  return  returned!=  null?  boundFields.get(removed):  result;  [CE]  cannot  find  symbol  returned  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned!=  null?  boundFields.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned!=  null?  boundFields.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  returned	118	None	replace
161	[BUG]  [BUGGY]  result  ==  null?  boundFields.get(removed):  result;  [CE]  not  a  statement  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  boundFields.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  boundFields.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  not  a  statement	118	None	replace
162	[BUG]  [BUGGY]  return  results  ==  null?  boundFields.get(removed):  result;  [CE]  cannot  find  symbol  results  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  results  ==  null?  boundFields.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  results  ==  null?  boundFields.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  results	118	None	replace
163	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  field.getFields();  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  field.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  result  =  field.getFields();	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	add
164	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fields  =  field.getFields();  [CE]  cannot  find  symbol  field  [FE]      ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fields  =  field.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  fields  =  field.getFields();	  	non-compiled	[CE]  cannot  find  symbol  field	93	None	add
165	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Collections.sort(fields);  [CE]  cannot  find  symbol  fields  [FE]        ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Collections.sort(fields);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Collections.sort(fields);	  	non-compiled	[CE]  cannot  find  symbol  fields	93	None	add
166	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  type.getFieldNames();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  type.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  fieldNames  =  type.getFieldNames();	  	non-compiled	[CE]  cannot  find  symbol	93	None	add
167	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  result  =  field.getRawType();  [CE]  cannot  find  symbol  field  [FE]            ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  result  =  field.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    result  =  field.getRawType();	  	non-compiled	[CE]  cannot  find  symbol  field	93	None	add
168	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  boundFields  =  field.getRawFields();  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  boundFields  =  field.getRawFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  boundFields  =  field.getRawFields();	  	non-compiled	[CE]  cannot  find  symbol  field	93	None	add
169	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  field.getFunctions();  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  field.getFunctions();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  result  =  field.getFunctions();	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	add
170	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  ObjectConstructor  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  ObjectConstructor  constructor  =  field.getConstructor();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    ObjectConstructor  constructor  =  field.getConstructor();	  	non-compiled	[CE]  cannot  find  symbol  field	93	None	add
171	[BUG]  [BUGGY]  return  result!=  null?  null  :  boundFields.getFields();  [CE]  cannot  find  symbol  boundFields  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  boundFields.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  boundFields.getFields();	  return    result!=    null?    null    :    result.getFields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	62	None	replace
172	[BUG]  [BUGGY]  return  result!=  null?  null  :  raw.getFields();  [CE]  incompatible  types  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  raw.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  raw.getFields();	  return    result!=    null?    null    :    result.getFields();    	non-compiled	[CE]  incompatible  types	62	None	replace
173	[BUG]  [BUGGY]  return  boundField;  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundField;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundField;	  return    replaced;    	non-compiled	[CE]  cannot  find  symbol  boundField	132	None	replace
174	[BUG]  [BUGGY]  return  primitive;  [CE]  cannot  find  symbol  primitive  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  primitive;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  primitive;	  return    replaced;    	non-compiled	[CE]  cannot  find  symbol  primitive	132	None	replace
175	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.toString();  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.toString();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.toString();	  return    result    ==    null?    null    :    result.toString();    	non-compiled	[CE]  incompatible  types	147	None	replace
176	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toString();  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toString();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toString();	  return    result    ==    null?    null    :    result.toString();    	non-compiled	[CE]  incompatible  types	147	None	replace
177	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.toString();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw.toString();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.toString();	  return    result    ==    null?    null    :    result.toString();    	non-compiled	[CE]  incompatible  types	147	None	replace
178	[BUG]  [BUGGY]  return  result  ==  null?  boundFields.length  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundFields  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFields.length  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields.length  :  Collections.emptyMap();	  return    result    ==    null?    fields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundFields	9	None	replace
179	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundFields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  boundFields  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundFields  :  Collections.emptyMap();	  return    result    ==    null?    fields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundFields	9	None	replace
180	[BUG]  [BUGGY]  return  raw  ==  null?  result  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  result  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  result  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    raw    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
181	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    raw    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol	116	None	replace
182	[BUG]  [BUGGY]  result  =  Collections.emptyMap();  [CE]  missing  return  statement  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  Collections.emptyMap();	  return    result    ==    null?    null    :    result;    Collections.sort(fields);    result    =    Collections.emptyMap();    	non-compiled	[CE]  missing  return  statement	149	None	replace
183	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fieldNames);  result  =  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldNames  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fieldNames);  result  =  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  Collections.sort(fieldNames);  result  =  Collections.emptyMap();	  return    result    ==    null?    null    :    result;    Collections.sort(fields);    result    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	149	None	replace
184	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <?>(),  raw);  [CE]  unexpected  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <?>(),  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class  <?>(),  raw);	  return    result    ==    null?    null    :    result.toArray(new    Class    <?>());    	non-compiled	[CE]  unexpected  type	143	None	replace
185	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <  Object>());  [CE]  constructor  Class  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <  Object>());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class  <  Object>());	  return    result    ==    null?    null    :    result.toArray(new    Class    <?>());    	non-compiled	[CE]  constructor  Class  in  class  Class<T>  cannot  be  applied  to  given  types;	143	None	replace
186	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <?>(1));  [CE]  unexpected  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <?>(1));  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class  <?>(1));	  return    result    ==    null?    null    :    result.toArray(new    Class    <?>());    	non-compiled	[CE]  unexpected  type	143	None	replace
187	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.toArray(new  Class  <?>());  [CE]  unexpected  type  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.toArray(new  Class  <?>());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.toArray(new  Class  <?>());	  return    result    ==    null?    null    :    result.toArray(new    Class    <?>());    	non-compiled	[CE]  unexpected  type	143	None	replace
188	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <?>()  +  1);  [CE]  unexpected  type  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <?>()  +  1);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class  <?>()  +  1);	  return    result    ==    null?    null    :    result.toArray(new    Class    <?>());    	non-compiled	[CE]  unexpected  type	143	None	replace
189	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.getFieldNames();  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  result  =  fieldNames.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  result  =  fieldNames.getFieldNames();	  return    result    ==    null?    null    :    result;    Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	18	None	replace
190	[BUG]  [BUGGY]  Field[]  resultFieldNames  =  type.getFieldNames();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  resultFieldNames  =  type.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  resultFieldNames  =  type.getFieldNames();	  return    result    ==    null?    null    :    result;    Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
191	[BUG]  [BUGGY]  Field[]  fields  =  type.getFieldNames();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  type.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  type.getFieldNames();	  return    result    ==    null?    null    :    result;    Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
192	[BUG]  [BUGGY]  fieldNames  =  type.getFieldNames();  [CE]  cannot  find  symbol  fieldNames  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  type.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  type.getFieldNames();	  return    result    ==    null?    null    :    result;    Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	18	None	replace
193	[BUG]  [BUGGY]  return  previous.type;  [CE]  cannot  find  symbol  previous  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  previous.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  previous.type;	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  previous	68	None	replace
194	[BUG]  [BUGGY]  return  declaredType.type;  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  declaredType.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  declaredType.type;	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  type	68	None	replace
195	[BUG]  [BUGGY]  return  raw.fieldType;  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw.fieldType;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.fieldType;	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  fieldType	68	None	replace
196	[BUG]  [BUGGY]  return  field.type;  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.type;	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  field	68	None	replace
197	[BUG]  [BUGGY]  return  first.type;  [CE]  cannot  find  symbol  first  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  first.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  first.type;	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  first	68	None	replace
198	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Field[fields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[removed.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fields	144	None	replace
199	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[boundFields.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[boundFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Field[boundFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[removed.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	144	None	replace
200	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[related.size()  ]);  [CE]  cannot  find  symbol  related  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[related.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Field[related.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[removed.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  related	144	None	replace
201	[BUG]  [BUGGY]  return  result  ==  null?  boundFields[0]  :  raw;  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFields[0]  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields[0]  :  raw;	  return    result    ==    null?    fields[0]    :    raw;    	non-compiled	[CE]  cannot  find  symbol  boundFields	140	None	replace
202	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames[0]  :  raw;  [CE]  cannot  find  symbol  fieldNames  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldNames[0]  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames[0]  :  raw;	  return    result    ==    null?    fields[0]    :    raw;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	140	None	replace
203	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    return    fields[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
204	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    return    fields[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
205	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    return    fields[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
206	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    return    fields[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
207	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    return    fields[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
208	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    return    fields[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
209	[BUG]  [BUGGY]  Return  raw  ==  null?  null  :  raw.values();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Return  raw  ==  null?  null  :  raw.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Return  raw  ==  null?  null  :  raw.values();	  return    raw    ==    null?    null    :    raw.values();    	non-compiled	[CE]  ';'  expected	6	None	replace
210	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw,  field.values();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw,  field.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw,  field.values();	  return    raw    ==    null?    null    :    raw.values();    	non-compiled	[CE]  ';'  expected	6	None	replace
211	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  field.values();  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  field.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  field.values();	  return    raw    ==    null?    null    :    raw.values();    	non-compiled	[CE]  cannot  find  symbol  field	6	None	replace
212	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(raw);  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toArray(raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(raw);	  return    result!=    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
213	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(fields);  [CE]  cannot  find  symbol  fields  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toArray(fields);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(fields);	  return    result!=    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  fields	124	None	replace
214	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(result);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toArray(result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(result);	  return    result!=    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
215	[BUG]  [BUGGY]  return  boundFields!=  null?  boundFields.get(raw):  result;  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields!=  null?  boundFields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields!=  null?  boundFields.get(raw):  result;	  return    result!=    null?    fieldFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	87	None	replace
216	[BUG]  [BUGGY]  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(fields.size());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
217	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(fields.size());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
218	[BUG]  [BUGGY]  final  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  final  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	final  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(fields.size());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
219	[BUG]  [BUGGY]  Result  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Result  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Result  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(fields.size());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
220	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size()  -  1);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size()  -  1);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size()  -  1);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(fields.size());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
221	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size()  -  1);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size()  -  1);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size()  -  1);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(fields.size());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
222	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
223	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
224	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
225	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
226	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
227	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
228	[BUG]  [BUGGY]  return  field  ==  null?  null  :  result,  field.getFields();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field  ==  null?  null  :  result,  field.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field  ==  null?  null  :  result,  field.getFields();	  return    result    ==    null?    null    :    result,    field.getFields();    	non-compiled	[CE]  ';'  expected	61	None	replace
229	[BUG]  [BUGGY]  return  result!=  null?  null  :  result,  field.getFields();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result,  field.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result,  field.getFields();	  return    result    ==    null?    null    :    result,    field.getFields();    	non-compiled	[CE]  ';'  expected	61	None	replace
230	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw,  field.getFields();  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw,  field.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw,  field.getFields();	  return    result    ==    null?    null    :    result,    field.getFields();    	non-compiled	[CE]  ';'  expected	61	None	replace
231	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  fields.getFields();  [CE]  ';'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  fields.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  fields.getFields();	  return    result    ==    null?    null    :    result,    field.getFields();    	non-compiled	[CE]  ';'  expected	61	None	replace
232	[BUG]  [BUGGY]  result  ==  null?  null  :  result.getValue();  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  null  :  result.getValue();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  null  :  result.getValue();	  return    result    ==    null?    null    :    result;    result    ==    null?    null    :    result;    	non-compiled	[CE]  not  a  statement	13	None	replace
233	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.getRawType();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.getRawType();	  return    result    ==    null?    null    :    result.getRawType();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
234	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result.getRawType();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  result.getRawType();	  return    result    ==    null?    null    :    result.getRawType();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
235	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.getRawType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.getRawType();	  return    result    ==    null?    null    :    result.getRawType();    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
236	[BUG]  [BUGGY]  return  result  ==  null?  null  :  type.getRawType();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  type.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  type.getRawType();	  return    result    ==    null?    null    :    result.getRawType();    	non-compiled	[CE]  incompatible  types	36	None	replace
237	[BUG]  [BUGGY]  return  result!=  null?  boundFields[0]  :  result;  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  boundFields[0]  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  boundFields[0]  :  result;	  return    result    ==    null?    fields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	27	None	replace
238	[BUG]  [BUGGY]  return  result  ==  null?  fields[0]  :  boundFields;  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fields[0]  :  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields[0]  :  boundFields;	  return    result    ==    null?    fields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fields	27	None	replace
239	[BUG]  [BUGGY]  return  result  ==  null?  fieldFields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldFields  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldFields  :  Collections.emptyMap();	  return    result!=    null?    fieldFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldFields	114	None	replace
240	[BUG]  [BUGGY]  return  result  ==  null?  declaredType  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  declaredType  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  declaredType  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    fieldType    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
241	[BUG]  [BUGGY]  return  result  ==  null?  boundFields.length  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  boundFields  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFields.length  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields.length  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    fieldType    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  boundFields	49	None	replace
242	[BUG]  [BUGGY]  return  result  ==  null?  Field.class  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  Field.class  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  Field.class  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    fieldType    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
243	[BUG]  [BUGGY]  return  result  ==  null?  boundFieldType  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  boundFieldType  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFieldType  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFieldType  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    fieldType    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  boundFieldType	49	None	replace
244	[BUG]  [BUGGY]  return  raw  ==  null?  boundFields.get(i):  result;  [CE]  cannot  find  symbol  i  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundFields.get(i):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundFields.get(i):  result;	  return    boundFields    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
245	[BUG]  [BUGGY]  return  returnedFields  ==  null?  boundFields.get(i):  result;  [CE]  cannot  find  symbol  returnedFields  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returnedFields  ==  null?  boundFields.get(i):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returnedFields  ==  null?  boundFields.get(i):  result;	  return    boundFields    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  returnedFields	32	None	replace
246	[BUG]  [BUGGY]  return  results  ==  null?  boundFields.get(i):  result;  [CE]  cannot  find  symbol  results  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  results  ==  null?  boundFields.get(i):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  results  ==  null?  boundFields.get(i):  result;	  return    boundFields    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  results	32	None	replace
247	[BUG]  [BUGGY]  result  ==  null?  boundFields.get(i):  result;  [CE]  not  a  statement  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  boundFields.get(i):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  boundFields.get(i):  result;	  return    boundFields    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  not  a  statement	32	None	replace
248	[BUG]  [BUGGY]  return  fieldNames  ==  null?  boundFields.get(i):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  boundFields.get(i):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  boundFields.get(i):  result;	  return    boundFields    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	32	None	replace
249	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	97	None	replace
250	[BUG]  [BUGGY]  return  context.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  context.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  context.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	97	None	replace
251	[BUG]  [BUGGY]  return  field.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	97	None	replace
252	[BUG]  [BUGGY]  return  fieldType.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldType.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldType.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	97	None	replace
253	[BUG]  [BUGGY]  return  raw.getNativeType(JSTypeNative.UNKNOWN_TYPE,  type);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw.getNativeType(JSTypeNative.UNKNOWN_TYPE,  type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getNativeType(JSTypeNative.UNKNOWN_TYPE,  type);	  return    raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	97	None	replace
254	[BUG]  [BUGGY]  return  result.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	97	None	replace
255	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.getValue();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw.getValue();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.getValue();	  return    result    ==    null?    null    :    result.getValue();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
256	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  String[result.size()  ]);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  String[result.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  String[result.size()  ]);	  return    result    ==    null?    null    :    result.getValue();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
257	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getValue();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.getValue();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getValue();	  return    result    ==    null?    null    :    result.getValue();    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
258	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.fields.getValue();  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.fields.getValue();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.fields.getValue();	  return    result    ==    null?    null    :    result.getValue();    	non-compiled	[CE]  cannot  find  symbol  fields	35	None	replace
259	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  field.getValue();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  field.getValue();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  field.getValue();	  return    result    ==    null?    null    :    result.getValue();    	non-compiled	[CE]  ';'  expected	35	None	replace
260	[BUG]  [BUGGY]  return  raw  ==  null?  fieldType  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fieldType  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fieldType  :  new  HashMap  <  Field,  Field>();	  return    raw    ==    null?    field    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  fieldType	148	None	replace
261	[BUG]  [BUGGY]  return  raw  ==  null?  boundField  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundField  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundField  :  new  HashMap  <  Field,  Field>();	  return    raw    ==    null?    field    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  boundField	148	None	replace
262	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[result.size()  ]);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[result.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  TypeToken[result.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    TypeToken[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
263	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  TypeToken[fields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    TypeToken[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fields	90	None	replace
264	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[boundFields.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[boundFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  TypeToken[boundFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    TypeToken[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	90	None	replace
265	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[relators.size()  ]);  [CE]  cannot  find  symbol  relators  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[relators.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  TypeToken[relators.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    TypeToken[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  relators	90	None	replace
266	[BUG]  [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(ex    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
267	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(ex    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
268	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw;  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw;	  return    raw    ==    null?    null    :    result;    	non-compiled	[CE]  incompatible  types	94	None	replace
269	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.type;  [CE]  cannot  find  symbol  type  [FE]      ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.type;	  return    raw    ==    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol  type	94	None	replace
270	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [CE]  cannot  find  symbol  field  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	138	None	replace
271	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	138	None	replace
272	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [CE]  cannot  find  symbol  field  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	138	None	replace
273	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [CE]  cannot  find  symbol  fieldNames  [FE]                                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	138	None	replace
274	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [CE]  cannot  find  symbol  field  [FE]                                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	138	None	replace
275	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  j  =  0;  j  <  fieldNames.length;  ++j)  {  fields[i]  =  fieldNames[j];  }  [CE]  cannot  find  symbol  field  [FE]                                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  j  =  0;  j  <  fieldNames.length;  ++j)  {  fields[i]  =  fieldNames[j];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  j  =  0;  j  <  fieldNames.length;  ++j)  {  fields[i]  =  fieldNames[j];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	138	None	replace
276	[BUG]  [BUGGY]  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  ObjectConstructor  <  ComparisonFailure>();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
277	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
278	[BUG]  [BUGGY]  final  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  final  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	final  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
279	[BUG]  [BUGGY]  Result  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Result  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Result  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
280	[BUG]  [BUGGY]  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>();    	non-compiled	[CE]  not  a  statement	81	None	replace
281	[BUG]  [BUGGY]  Collection  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Collection  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Collection  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
282	[BUG]  [BUGGY]  return  raw  ==  null?  result  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  result  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  result  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    raw    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
283	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    raw    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
284	[BUG]  [BUGGY]  return  result  ==  null?  boundFields.length  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  boundFields  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFields.length  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields.length  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    raw    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  boundFields	53	None	replace
285	[BUG]  [BUGGY]  return  raw  ==  null?  boundFields  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  boundFields  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundFields  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundFields  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    raw    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  boundFields	53	None	replace
286	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp  ==  '  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp  ==  '	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(comp    	non-compiled	[CE]  illegal  line  end  in  character  literal	103	None	replace
287	[BUG]  [BUGGY]  return  result  ==  null?  raw[0]  :  type;  [CE]  array  required,  but  Class<CAP#1>  found  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  raw[0]  :  type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw[0]  :  type;	  return    result    ==    null?    raw[0]    :    result;    	non-compiled	[CE]  array  required,  but  Class<CAP#1>  found	30	None	replace
288	[BUG]  [BUGGY]  return  result  ==  null?  raw[0]  :  result.fields;  [CE]  array  required,  but  Class<CAP#1>  found  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  raw[0]  :  result.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw[0]  :  result.fields;	  return    result    ==    null?    raw[0]    :    result;    	non-compiled	[CE]  array  required,  but  Class<CAP#1>  found	30	None	replace
289	[BUG]  [BUGGY]  return  result  ==  null?  raw[0]  :  result.type;  [CE]  array  required,  but  Class<CAP#1>  found  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  raw[0]  :  result.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw[0]  :  result.type;	  return    result    ==    null?    raw[0]    :    result;    	non-compiled	[CE]  array  required,  but  Class<CAP#1>  found	30	None	replace
290	[BUG]  [BUGGY]  return  result  ==  null?  raw[0]  :  boundFields;  [CE]  array  required,  but  Class<CAP#1>  found  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  raw[0]  :  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw[0]  :  boundFields;	  return    result    ==    null?    raw[0]    :    result;    	non-compiled	[CE]  array  required,  but  Class<CAP#1>  found	30	None	replace
291	[BUG]  [BUGGY]  return  predecessor;  [CE]  cannot  find  symbol  predecessor  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  predecessor;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  predecessor;	  return    field;    	non-compiled	[CE]  cannot  find  symbol  predecessor	65	None	replace
292	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName();    }    	non-compiled	[CE]  cannot  find  symbol  field	135	None	replace
293	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName();    }    	non-compiled	[CE]  cannot  find  symbol  field	135	None	replace
294	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName();    }    	non-compiled	[CE]  cannot  find  symbol  field	135	None	replace
295	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getRawType();  }  [CE]  cannot  find  symbol  field  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getRawType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getRawType();  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName();    }    	non-compiled	[CE]  cannot  find  symbol  field	135	None	replace
296	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName();    }    	non-compiled	[CE]  cannot  find  symbol  field	135	None	replace
297	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [CE]  cannot  find  symbol  fieldNames  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName();    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	135	None	replace
298	[BUG]  [BUGGY]  Return  result  ==  null? "null "  :  result.values();  [CE]  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Return  result  ==  null? "null "  :  result.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Return  result  ==  null? "null "  :  result.values();	  Return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  	7	None	replace
299	[BUG]  [BUGGY]  Return  result!=  null?  null  :  result.values();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Return  result!=  null?  null  :  result.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Return  result!=  null?  null  :  result.values();	  Return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  ';'  expected	7	None	replace
300	[BUG]  [BUGGY]  Return  result  ==  null? " "  :  result.values();  [CE]  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Return  result  ==  null? " "  :  result.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Return  result  ==  null? " "  :  result.values();	  Return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  	7	None	replace
301	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
302	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.length;  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
303	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  Il  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  Il	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	134	None	replace
304	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( "	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	134	None	replace
305	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
306	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  new  Field[fields.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( ". ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
307	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  throw  new  IllegalArgumentException(   "   ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  unreachable  statement	106	None	add
308	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throw  new  IllegalArgumentException(   "   ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    Throw  new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  not  a  statement	106	None	add
309	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(type!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(type!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    if(type!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	106	None	add
310	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException(   "   ");  [CE]  unreachable  statement  [FE]          IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  new  IllegalArgumentException(   "   ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    new  IllegalArgumentException(   "   ");	  	non-compiled	[CE]  unreachable  statement	106	None	add
311	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [CE]  <identifier>  expected  [FE]            IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  Throwables.throw  new  IllegalArgumentException( "   ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    Throwables.throw  new  IllegalArgumentException( "   ");	  	non-compiled	[CE]  <identifier>  expected	106	None	add
312	[BUG]  [BUGGY]  return  result!=  null?  null  :  result,  raw.fields;  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result,  raw.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result,  raw.fields;	  return    result!=    null?    null    :    result.fields;    	non-compiled	[CE]  ';'  expected	95	None	replace
313	[BUG]  [BUGGY]  return  result  >=  null?  null  :  result.fields;  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  >=  null?  null  :  result.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  >=  null?  null  :  result.fields;	  return    result!=    null?    null    :    result.fields;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	95	None	replace
314	[BUG]  [BUGGY]  return  declaredType;  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  declaredType;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  declaredType;	  return    previous;    	non-compiled	[CE]  incompatible  types	63	None	replace
315	[BUG]  [BUGGY]  return  returned;  [CE]  cannot  find  symbol  returned  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned;	  return    previous;    	non-compiled	[CE]  cannot  find  symbol  returned	63	None	replace
316	[BUG]  [BUGGY]  return  result!=  null?  boundField.get(raw):  result;  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  boundField.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  boundField.get(raw):  result;	  return    result!=    null?    field.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  boundField	44	None	replace
317	[BUG]  [BUGGY]  return  raw!=  null?  field.get(raw):  result;  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  field.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  field.get(raw):  result;	  return    result!=    null?    field.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  field	44	None	replace
318	[BUG]  [BUGGY]  return  previous.fields;  [CE]  cannot  find  symbol  previous  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  previous.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  previous.fields;	  return    raw.fields;    	non-compiled	[CE]  cannot  find  symbol  previous	71	None	replace
319	[BUG]  [BUGGY]  return  field.fields;  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.fields;	  return    raw.fields;    	non-compiled	[CE]  cannot  find  symbol  field	71	None	replace
320	[BUG]  [BUGGY]  return  type.fields;  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.fields;	  return    raw.fields;    	non-compiled	[CE]  cannot  find  symbol  fields	71	None	replace
321	[BUG]  [BUGGY]  return  fieldNames;  [CE]  cannot  find  symbol  fieldNames  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames;	  return    raw.fields;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	71	None	replace
322	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.add(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	136	None	replace
323	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [CE]  cannot  find  symbol  fieldNames  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.add(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	136	None	replace
324	[BUG]  [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [CE]  cannot  find  symbol  fields  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.add(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fields	136	None	replace
325	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.add(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	136	None	replace
326	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  type.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.add(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
327	[BUG]  [BUGGY]  Constructor  <?>[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Constructor  <?>[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Constructor  <?>[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.add(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
328	[BUG]  [BUGGY]  return  result  ==  null?  fields[0]  :  field;  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fields[0]  :  field;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields[0]  :  field;	  return    result    ==    null?    fieldTypes[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fields	29	None	replace
329	[BUG]  [BUGGY]  return  result  ==  null?  boundField.get(raw):  result;  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundField.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundField.get(raw):  result;	  return    result    ==    null?    field.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  boundField	76	None	replace
330	[BUG]  [BUGGY]  return  raw  ==  null?  field.get(raw):  result;  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  field.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  field.get(raw):  result;	  return    result    ==    null?    field.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  field	76	None	replace
331	[BUG]  [BUGGY]  return  result  ==  null?  raw.get(raw):  result;  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  raw.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw.get(raw):  result;	  return    result    ==    null?    field.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
332	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[replacements.size()  ]);  [CE]  cannot  find  symbol  replacements  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[replacements.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  Field[replacements.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  replacements	89	None	replace
333	[BUG]  [BUGGY]  return  type.getAnnotationType();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getAnnotationType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getAnnotationType();	  return    raw.getAnnotationType();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
334	[BUG]  [BUGGY]  return  boundFields.getAnnotationType();  [CE]  cannot  find  symbol  boundFields  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.getAnnotationType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.getAnnotationType();	  return    raw.getAnnotationType();    	non-compiled	[CE]  cannot  find  symbol  boundFields	73	None	replace
335	[BUG]  [BUGGY]  return  field.getAnnotationType();  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.getAnnotationType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.getAnnotationType();	  return    raw.getAnnotationType();    	non-compiled	[CE]  cannot  find  symbol  field	73	None	replace
336	[BUG]  [BUGGY]  return  context.getAnnotationType();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  context.getAnnotationType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  context.getAnnotationType();	  return    raw.getAnnotationType();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
337	[BUG]  [BUGGY]  return  fieldType.getAnnotationType();  [CE]  cannot  find  symbol  fieldType  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldType.getAnnotationType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldType.getAnnotationType();	  return    raw.getAnnotationType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	73	None	replace
338	[BUG]  [BUGGY]  return  result.getAnnotationType();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result.getAnnotationType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result.getAnnotationType();	  return    raw.getAnnotationType();    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
339	[BUG]  [BUGGY]  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(boundFields.size());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
340	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(boundFields.size());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
341	[BUG]  [BUGGY]  final  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  final  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	final  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(boundFields.size());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
342	[BUG]  [BUGGY]  Result  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Result  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Result  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(boundFields.size());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
343	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.size();  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.size();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields.size();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(boundFields.size());    	non-compiled	[CE]  cannot  find  symbol  boundFields	84	None	replace
344	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size()  -  1);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size()  -  1);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size()  -  1);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(boundFields.size());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
345	[BUG]  [BUGGY]  return  result  ==  null?  raw.name  :  result;  [CE]  name  has  private  access  in  Class  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  raw.name  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw.name  :  result;	  return    result    ==    null?    raw.length    :    result;    	non-compiled	[CE]  name  has  private  access  in  Class	41	None	replace
346	[BUG]  [BUGGY]  return  raw  ==  null?  result.length  :  result;  [CE]  cannot  find  symbol  length  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  result.length  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  result.length  :  result;	  return    result    ==    null?    raw.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  length	41	None	replace
347	[BUG]  [BUGGY]  return  type.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getDeclaredType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getDeclaredType();	  return    raw.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
348	[BUG]  [BUGGY]  return  field.getDeclaredType();  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.getDeclaredType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.getDeclaredType();	  return    raw.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol  field	70	None	replace
349	[BUG]  [BUGGY]  return  fieldType.getDeclaredType();  [CE]  cannot  find  symbol  fieldType  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldType.getDeclaredType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldType.getDeclaredType();	  return    raw.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	70	None	replace
350	[BUG]  [BUGGY]  return  boundFields.getDeclaredType();  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.getDeclaredType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.getDeclaredType();	  return    raw.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol  boundFields	70	None	replace
351	[BUG]  [BUGGY]  return  declaredType.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  declaredType.getDeclaredType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  declaredType.getDeclaredType();	  return    raw.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
352	[BUG]  [BUGGY]  return  context.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  context.getDeclaredType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  context.getDeclaredType();	  return    raw.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
353	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.getDeclaredFields();  [CE]  cannot  find  symbol  boundFields  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.getDeclaredFields();	  return    result    ==    null?    null    :    result.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	37	None	replace
354	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.getDeclaredFields();  [CE]  incompatible  types  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.getDeclaredFields();	  return    result    ==    null?    null    :    result.getDeclaredFields();    	non-compiled	[CE]  incompatible  types	37	None	replace
355	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  field.getDeclaredFields();  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  field.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  field.getDeclaredFields();	  return    result    ==    null?    null    :    result.getDeclaredFields();    	non-compiled	[CE]  ';'  expected	37	None	replace
356	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getDeclaredFields();	  return    result    ==    null?    null    :    result.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
357	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.fields.getDeclaredFields();  [CE]  cannot  find  symbol  fields  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.fields.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.fields.getDeclaredFields();	  return    result    ==    null?    null    :    result.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  fields	37	None	replace
358	[BUG]  [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Throwables.throw  new  IllegalArgumentException( " ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Throwables.throw  new  IllegalArgumentException( " ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  <identifier>  expected	107	None	replace
359	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declared  type: "  +  field.name);  [CE]  cannot  find  symbol  field  [FE]      IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declared  type: "  +  field.name);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  declared  type: "  +  field.name);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  field	107	None	replace
360	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  is  not  a  field  type. ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	add	throw  new  IllegalArgumentException(declaredType  + "  is  not  a  field  type. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
361	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  is  not  a  field  type. ");  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  is  not  a  field  type. ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  is  not  a  field  type. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
362	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  does  not  support  field  ' "  +  field.name  + "'. ");  [CE]  cannot  find  symbol  field  [FE]          IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  does  not  support  field  ' "  +  field.name  + "'. ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  does  not  support  field  ' "  +  field.name  + "'. ");	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  field	107	None	replace
363	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  type. ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	add	throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  type. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
364	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  type. ");  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  type. ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  type. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
365	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  field. ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	add	throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  field. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
366	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  field. ");  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  field. ");  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  is  not  anonymous  field. ");	  throw    new    IllegalArgumentException(   "   ");    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
367	[BUG]  [BUGGY]  return  context.getAnnotationIntrospector();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  context.getAnnotationIntrospector();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  context.getAnnotationIntrospector();	  return    raw.getAnnotationIntrospector();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
368	[BUG]  [BUGGY]  return  type.getAnnotationIntrospector();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getAnnotationIntrospector();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getAnnotationIntrospector();	  return    raw.getAnnotationIntrospector();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
369	[BUG]  [BUGGY]  return  field.getAnnotationIntrospector();  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.getAnnotationIntrospector();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.getAnnotationIntrospector();	  return    raw.getAnnotationIntrospector();    	non-compiled	[CE]  cannot  find  symbol  field	127	None	replace
370	[BUG]  [BUGGY]  return  boundFields.getAnnotationIntrospector();  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.getAnnotationIntrospector();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.getAnnotationIntrospector();	  return    raw.getAnnotationIntrospector();    	non-compiled	[CE]  cannot  find  symbol  boundFields	127	None	replace
371	[BUG]  [BUGGY]  return  result.getAnnotationIntrospector();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result.getAnnotationIntrospector();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result.getAnnotationIntrospector();	  return    raw.getAnnotationIntrospector();    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
372	[BUG]  [BUGGY]  return  jsonAdapter.getAnnotationIntrospector();  [CE]  cannot  find  symbol  jsonAdapter  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  jsonAdapter.getAnnotationIntrospector();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  jsonAdapter.getAnnotationIntrospector();	  return    raw.getAnnotationIntrospector();    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	127	None	replace
373	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.toArray(result);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.toArray(result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.toArray(result);	  return    result    ==    null?    null    :    result.toArray(raw);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
374	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.toArray(result);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  raw.toArray(result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.toArray(result);	  return    result    ==    null?    null    :    result.toArray(raw);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
375	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result.toArray(raw);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result.toArray(raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  result.toArray(raw);	  return    result    ==    null?    null    :    result.toArray(raw);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
376	[BUG]  [BUGGY]  result  ==  null?  null  :  result.getGenericSuperclass();  [CE]  not  a  statement  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  null  :  result.getGenericSuperclass();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  null  :  result.getGenericSuperclass();	  return    result    ==    null?    null    :    result;    result    ==    null?    null    :    result.getGenericSuperclass();    	non-compiled	[CE]  not  a  statement	17	None	replace
377	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.getGenericSuperclass();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.getGenericSuperclass();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.getGenericSuperclass();	  return    result    ==    null?    null    :    result;    result    ==    null?    null    :    result.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
378	[BUG]  [BUGGY]  result!=  null?  null  :  result.getGenericSuperclass();  [CE]  not  a  statement  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result!=  null?  null  :  result.getGenericSuperclass();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result!=  null?  null  :  result.getGenericSuperclass();	  return    result    ==    null?    null    :    result;    result    ==    null?    null    :    result.getGenericSuperclass();    	non-compiled	[CE]  not  a  statement	17	None	replace
379	[BUG]  [BUGGY]  Result  <  null?  null  :  result.getGenericSuperclass();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Result  <  null?  null  :  result.getGenericSuperclass();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Result  <  null?  null  :  result.getGenericSuperclass();	  return    result    ==    null?    null    :    result;    result    ==    null?    null    :    result.getGenericSuperclass();    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
380	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
381	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  type.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
382	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  boundFields  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundFields.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	20	None	replace
383	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  missing  return  statement  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  raw.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  missing  return  statement	20	None	replace
384	[BUG]  [BUGGY]  Field[]  fields  =  declaredType.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  declaredType.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  declaredType.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
385	[BUG]  [BUGGY]  return  result  ==  null?  result.length  :  result.length;  [CE]  cannot  find  symbol  length  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  result.length  :  result.length;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  result.length  :  result.length;	  return    result    ==    null?    result.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  length	115	None	replace
386	[BUG]  [BUGGY]  return  result  ==  null?  result.name  :  result;  [CE]  cannot  find  symbol  name  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  result.name  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  result.name  :  result;	  return    result    ==    null?    result.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  name	115	None	replace
387	[BUG]  [BUGGY]  return  result  ==  null?  result.length  :  raw.length;  [CE]  cannot  find  symbol  length  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  result.length  :  raw.length;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  result.length  :  raw.length;	  return    result    ==    null?    result.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  length	115	None	replace
388	[BUG]  [BUGGY]  return  result!=  null?  result.length  :  result;  [CE]  cannot  find  symbol  length  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  result.length  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  result.length  :  result;	  return    result    ==    null?    result.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  length	115	None	replace
389	[BUG]  [BUGGY]  Field[]  fields  =  jsonAdapter.getFields();  [CE]  cannot  find  symbol  jsonAdapter  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  jsonAdapter.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  jsonAdapter.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	24	None	replace
390	[BUG]  [BUGGY]  Field[]  fields  =  currentField.getFields();  [CE]  cannot  find  symbol  currentField  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  currentField.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  currentField.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  currentField	24	None	replace
391	[BUG]  [BUGGY]  return  boundFields  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    new    HashMap    <    String,    BoundField>()    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  boundFields	52	None	replace
392	[BUG]  [BUGGY]  return  raw  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    new    HashMap    <    String,    BoundField>()    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
393	[BUG]  [BUGGY]  return  result!=  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    new    HashMap    <    String,    BoundField>()    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
394	[BUG]  [BUGGY]  return  result  ==  null?  new  HashMap  <  String,  BoundField>(raw):  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  new  HashMap  <  String,  BoundField>(raw):  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  new  HashMap  <  String,  BoundField>(raw):  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    new    HashMap    <    String,    BoundField>()    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
395	[BUG]  [BUGGY]  return  raw  ==  null?  fields.get(raw):  result;  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fields.get(raw):  result;	  return    raw    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fields	117	None	replace
396	[BUG]  [BUGGY]  return  result  ==  null?  boundFields.get(raw):  raw;  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFields.get(raw):  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields.get(raw):  raw;	  return    raw    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	117	None	replace
397	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  result  :  Collections.EMPTY_MAP;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	add	return  raw  ==  null?  result  :  Collections.EMPTY_MAP;	  return    result    ==    null?    raw    :    Collections.emptyMap();    	compilable	  [FE]  ComparisonFailure  	11	8	replace
398	[BUG]  [BUGGY]  return  raw  ==  null?  result  :  Collections.EMPTY_MAP;  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  result  :  Collections.EMPTY_MAP;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  result  :  Collections.EMPTY_MAP;	  return    result    ==    null?    raw    :    Collections.emptyMap();    	compilable	  [FE]  ComparisonFailure  	11	8	replace
399	[BUG]  [BUGGY]  return  raw  ==  null?  Collections.emptyMap()  :  result;  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  Collections.emptyMap()  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  Collections.emptyMap()  :  result;	  return    result    ==    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	11	None	replace
400	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
401	[BUG]  [BUGGY]  return  context.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  context.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  context.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
402	[BUG]  [BUGGY]  return  field.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
403	[BUG]  [BUGGY]  return  fieldType.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldType.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldType.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
404	[BUG]  [BUGGY]  return  raw.getNativeType(JSTypeNative.OBJECT_TYPE,  type);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw.getNativeType(JSTypeNative.OBJECT_TYPE,  type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getNativeType(JSTypeNative.OBJECT_TYPE,  type);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
405	[BUG]  [BUGGY]  return  raw.getNativeType(JSTypeNative.OBJECT_TYPE,  fieldType);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw.getNativeType(JSTypeNative.OBJECT_TYPE,  fieldType);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getNativeType(JSTypeNative.OBJECT_TYPE,  fieldType);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
406	[BUG]  [BUGGY]  return  result.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
407	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getGenericSuperclass();  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.getGenericSuperclass();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getGenericSuperclass();	  return    result!=    null?    null    :    result;    result!=    null?    null    :    result.getGenericSuperclass();    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
408	[BUG]  [BUGGY]  result!=  null  :  result;  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result!=  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result!=  null  :  result;	  return    result!=    null?    null    :    result;    result!=    null    :    result;    	non-compiled	[CE]  not  a  statement	111	None	replace
409	[BUG]  [BUGGY]  result  ==  null  :  result;  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null  :  result;	  return    result!=    null?    null    :    result;    result!=    null    :    result;    	non-compiled	[CE]  not  a  statement	111	None	replace
410	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.cloneTree();  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.cloneTree();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.cloneTree();	  return    result!=    null?    null    :    result;    result!=    null    :    result;    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
411	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.getFields();  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields.getFields();	  return    result    ==    null?    null    :    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	86	None	replace
412	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.getFields();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.getFields();	  return    result    ==    null?    null    :    field.getFields();    	non-compiled	[CE]  incompatible  types	86	None	replace
413	[BUG]  [BUGGY]  return  type.getType();  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getType();	  return    raw.getType();    	non-compiled	[CE]  incompatible  types	126	None	replace
414	[BUG]  [BUGGY]  return  field.getType();  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.getType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.getType();	  return    raw.getType();    	non-compiled	[CE]  cannot  find  symbol  field	126	None	replace
415	[BUG]  [BUGGY]  return  fieldType.getType();  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldType.getType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldType.getType();	  return    raw.getType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	126	None	replace
416	[BUG]  [BUGGY]  return  boundFields.getType();  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.getType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.getType();	  return    raw.getType();    	non-compiled	[CE]  cannot  find  symbol  boundFields	126	None	replace
417	[BUG]  [BUGGY]  return  result.getType();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result.getType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result.getType();	  return    raw.getType();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
418	[BUG]  [BUGGY]  return  context.getType();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  context.getType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  context.getType();	  return    raw.getType();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
419	[BUG]  [BUGGY]  return  result  ==  null?  boundField  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundField  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundField  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    field    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  boundField	46	None	replace
420	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.put(fieldName,    fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	139	None	replace
421	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [CE]  cannot  find  symbol  fieldNames  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.put(fieldName,    fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	139	None	replace
422	[BUG]  [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [CE]  cannot  find  symbol  fields  [FE]                                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.put(fieldName,    fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fields	139	None	replace
423	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [CE]  cannot  find  symbol  [FE]                                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  type.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  type.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.put(fieldName,    fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol	139	None	replace
424	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [CE]  method  getFieldNames  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.put(fieldName,    fieldNames[i]);    }    	non-compiled	[CE]  method  getFieldNames  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	139	None	replace
425	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fields[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fields[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fields[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.put(fieldName,    fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	139	None	replace
426	[BUG]  [BUGGY]  return  type.getRawType();  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getRawType();	  return    type;    	non-compiled	[CE]  incompatible  types	64	None	replace
427	[BUG]  [BUGGY]  return  type.getSerializedType();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getSerializedType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getSerializedType();	  return    type;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
428	[BUG]  [BUGGY]  return  type.toString();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.toString();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.toString();	  return    type;    	non-compiled	[CE]  incompatible  types	64	None	replace
429	[BUG]  [BUGGY]  return  type.getReturnType();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getReturnType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getReturnType();	  return    type;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
430	[BUG]  [BUGGY]  return  type.getSerialize();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getSerialize();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getSerialize();	  return    type;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
431	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericType();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
432	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericType();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
433	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericType();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
434	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericType();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
435	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericType();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
436	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericType();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
437	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	100	None	replace
438	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName(fieldNames[i]);    }    	non-compiled	[CE]  ')'  expected	100	None	replace
439	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	100	None	replace
440	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	100	None	replace
441	[BUG]  [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	100	None	replace
442	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [CE]  cannot  find  symbol  fieldNames  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	100	None	replace
443	[BUG]  [BUGGY]  result  =  boundFields.get(result);  [CE]  cannot  find  symbol  boundFields  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields.get(result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields.get(result);	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	119	None	replace
444	[BUG]  [BUGGY]  result  =  boundFields.get(raw);  [CE]  cannot  find  symbol  boundFields  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields.get(raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields.get(raw);	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	119	None	replace
445	[BUG]  [BUGGY]  result  =  boundFields.get(i);  [CE]  cannot  find  symbol  i  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields.get(i);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields.get(i);	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  i	119	None	replace
446	[BUG]  [BUGGY]  result  =  boundFields.get(declaredType);  [CE]  cannot  find  symbol  boundFields  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields.get(declaredType);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields.get(declaredType);	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	119	None	replace
447	[BUG]  [BUGGY]  result  =  boundFields.get(previous);  [CE]  cannot  find  symbol  previous  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields.get(previous);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields.get(previous);	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  previous	119	None	replace
448	[BUG]  [BUGGY]  result  =  boundFields.get(type);  [CE]  cannot  find  symbol  boundFields  [FE]                  NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  boundFields.get(type);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  boundFields.get(type);	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	119	None	replace
449	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(raw,  result);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(raw,  result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(raw,  result);	  return    result    ==    null?    null    :    result.toArray(result);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
450	[BUG]  [BUGGY]  result  =  new  BoundField[fields.size()  ];  [CE]  cannot  find  symbol  fields  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fields.size()  ];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fields.size()  ];	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  fields	123	None	replace
451	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fields.size()  ];  }  [CE]  cannot  find  symbol  fields  [FE]                  NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fields.size()  ];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fields.size()  ];  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  fields	123	None	replace
452	[BUG]  [BUGGY]  result  =  new  BoundField[boundFields.size()  ];  [CE]  cannot  find  symbol  boundFields  [FE]                    NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[boundFields.size()  ];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[boundFields.size()  ];	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	123	None	replace
453	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result  ==  null)  {  result  =  new  BoundField[fields.size()  ];  }  [CE]  cannot  find  symbol  fields  [FE]                      NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result;  if(result  ==  null)  {  result  =  new  BoundField[fields.size()  ];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result;  if(result  ==  null)  {  result  =  new  BoundField[fields.size()  ];  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  fields	123	None	replace
454	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  if(result  ==  null)  {  result  =  new  BoundField[fields.size()  ];  }  [CE]  cannot  find  symbol  fields  [FE]                        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  if(result  ==  null)  {  result  =  new  BoundField[fields.size()  ];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  if(result  ==  null)  {  result  =  new  BoundField[fields.size()  ];  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  fields	123	None	replace
455	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[boundFields.size()  ];  }  [CE]  cannot  find  symbol  boundFields  [FE]                          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[boundFields.size()  ];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[boundFields.size()  ];  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	123	None	replace
456	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fields.size()  ];  }  [CE]  cannot  find  symbol  fields  [FE]                            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fields.size()  ];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fields.size()  ];  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  fields	123	None	replace
457	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
458	[BUG]  [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  type.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
459	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
460	[BUG]  [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getDeclaredFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
461	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundFields.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
462	[BUG]  [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  context.getFields();  if(fields!=  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
463	[BUG]  [BUGGY]  return  boundFields  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    new    HashMap    <    Field,    Field>()    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  boundFields	48	None	replace
464	[BUG]  [BUGGY]  return  raw  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    new    HashMap    <    Field,    Field>()    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
465	[BUG]  [BUGGY]  return  result!=  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    new    HashMap    <    Field,    Field>()    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
466	[BUG]  [BUGGY]  return  field  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    new    HashMap    <    Field,    Field>()    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  field	48	None	replace
467	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(new  BoundField[result.size()  ]);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toArray(new  BoundField[result.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(new  BoundField[result.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[result.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
468	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[result.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[result.size()  +  1]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[result.size()  +  1]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[result.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
469	[BUG]  [BUGGY]  return  raw  ==  null?  fieldNames  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldNames  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fieldNames  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fieldNames  :  Collections.emptyMap();	  return    raw    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	145	None	replace
470	[BUG]  [BUGGY]  return  raw  ==  null?  fieldType  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fieldType  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fieldType  :  Collections.emptyMap();	  return    raw    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldType	145	None	replace
471	[BUG]  [BUGGY]  return  raw  ==  null?  fields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fields  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fields  :  Collections.emptyMap();	  return    raw    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fields	145	None	replace
472	[BUG]  [BUGGY]  return  raw  ==  null?  fieldNamingPolicy  :  Collections.emptyMap();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fieldNamingPolicy  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fieldNamingPolicy  :  Collections.emptyMap();	  return    raw    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	145	None	replace
473	[BUG]  [BUGGY]  return  result  ==  null?  null  :  previous.getFields();  [CE]  cannot  find  symbol  previous  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  previous.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  previous.getFields();	  return    result    ==    null?    null    :    boundFields.getFields();    	non-compiled	[CE]  cannot  find  symbol  previous	58	None	replace
474	[BUG]  [BUGGY]  return  result  ==  null?  null  :  type.getFields();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  type.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  type.getFields();	  return    result    ==    null?    null    :    boundFields.getFields();    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
475	[BUG]  [BUGGY]  result  ==  null?  null  :  result;  Collections.sort(result);  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  null  :  result;  Collections.sort(result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  null  :  result;  Collections.sort(result);	  return    result    ==    null?    null    :    result;    Collections.sort(boundFields);    	non-compiled	[CE]  not  a  statement	151	None	replace
476	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fieldNames);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  Collections.sort(fieldNames);	  return    result    ==    null?    null    :    result;    Collections.sort(boundFields);    	non-compiled	[CE]  cannot  find  symbol  fieldNames	151	None	replace
477	[BUG]  [BUGGY]  return  result  ==  null?  fieldType  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldType  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldType  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldType  :  Collections.emptyMap();	  return    result    ==    null?    field    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldType	98	None	replace
478	[BUG]  [BUGGY]  return  result  ==  null?  boundField  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundField  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundField  :  Collections.emptyMap();	  return    result    ==    null?    field    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundField	98	None	replace
479	[BUG]  [BUGGY]  return  raw  ==  null?  field  :  Collections.emptyMap();  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  field  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  field  :  Collections.emptyMap();	  return    result    ==    null?    field    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  field	98	None	replace
480	[BUG]  [BUGGY]  return  raw!=  null?  null  :  raw.getFields();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  raw.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  raw.getFields();	  return    result    ==    null?    null    :    raw.getFields();    	non-compiled	[CE]  incompatible  types	59	None	replace
481	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result.getFields();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  result.getFields();	  return    result    ==    null?    null    :    raw.getFields();    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
482	[BUG]  [BUGGY]  return  field.getRawType();  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field.getRawType();	  return    raw.getRawType();    	non-compiled	[CE]  cannot  find  symbol  field	69	None	replace
483	[BUG]  [BUGGY]  return  fieldType.getRawType();  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldType.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldType.getRawType();	  return    raw.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldType	69	None	replace
484	[BUG]  [BUGGY]  return  boundFields.getRawType();  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.getRawType();	  return    raw.getRawType();    	non-compiled	[CE]  cannot  find  symbol  boundFields	69	None	replace
485	[BUG]  [BUGGY]  return  context.getRawType();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  context.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  context.getRawType();	  return    raw.getRawType();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
486	[BUG]  [BUGGY]  return  result.getRawType();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result.getRawType();	  return    raw.getRawType();    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
487	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[boundFields.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[boundFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class[boundFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Class[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	141	None	replace
488	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[result.size()  ]);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[result.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class[result.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Class[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
489	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Class[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Class[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  Class[fields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Class[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fields	141	None	replace
490	[BUG]  [BUGGY]  Field[]  fields  =  name.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  name  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  name.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  name.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  name	20	None	replace
491	[BUG]  [BUGGY]  Field[]  fields  =  this.fields.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fields  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  this.fields.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  this.fields.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fields	20	None	replace
492	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    return    fields[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
493	[BUG]  [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.add(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	136	None	replace
494	[BUG]  [BUGGY]  return  result  ==  null?  Arrays.asList(fields):  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  Arrays.asList(fields):  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  Arrays.asList(fields):  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    fieldNames    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  fields	47	None	replace
495	[BUG]  [BUGGY]  return  raw  ==  null?  fieldTypes  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldTypes  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fieldTypes  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fieldTypes  :  Collections.emptyMap();	  return    result    ==    null?    fieldTypes    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	12	None	replace
496	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex!=  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex!=  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex!=	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(ex    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
497	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  }  [CE]  ')'  expected  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(ex    	non-compiled	[CE]  ')'  expected	105	None	replace
498	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericType();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
499	[BUG]  [BUGGY]  return  result  ==  null?  null  :  resultFields;  [CE]  cannot  find  symbol  resultFields  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  resultFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  resultFields;	  return    result    ==    null?    null    :    result.fields;    	non-compiled	[CE]  cannot  find  symbol  resultFields	34	None	replace
500	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  boundFields;  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  boundFields;	  return    result    ==    null?    null    :    result.fields;    	non-compiled	[CE]  ';'  expected	34	None	replace
501	[BUG]  [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	101	None	replace
502	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  cannot  find  symbol  fieldNames  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  fieldNames.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  fieldNames.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	101	None	replace
503	[BUG]  [BUGGY]  return  result  ==  null?  Arrays.asList(fields):  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  Arrays.asList(fields):  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  Arrays.asList(fields):  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    fieldNames    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  fields	51	None	replace
504	[BUG]  [BUGGY]  return  returned  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  returned  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    new    HashMap    <    String,    BoundField>()    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  returned	52	None	replace
505	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.values;  [CE]  cannot  find  symbol  values  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.values;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.values;	  return    result    ==    null?    null    :    result.boundFields;    	non-compiled	[CE]  cannot  find  symbol  values	112	None	replace
506	[BUG]  [BUGGY]  return  raw  ==  null?  boundField  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  boundField  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundField  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundField  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    raw    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  boundField	53	None	replace
507	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  fieldNames  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	123	None	replace
508	[BUG]  [BUGGY]  return  result  ==  null?  null  :  resultFields.toArray(new  BoundField[result.size()  ]);  [CE]  cannot  find  symbol  resultFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  resultFields.toArray(new  BoundField[result.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  resultFields.toArray(new  BoundField[result.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[result.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  resultFields	4	None	replace
509	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[result.size()  ],  raw);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[result.size()  ],  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[result.size()  ],  raw);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[result.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
510	[BUG]  [BUGGY]  return  returned.fields;  [CE]  cannot  find  symbol  returned  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned.fields;	  return    raw.fields;    	non-compiled	[CE]  cannot  find  symbol  returned	71	None	replace
511	[BUG]  [BUGGY]  return  fieldNamingPolicy.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNamingPolicy.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNamingPolicy.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	97	None	replace
512	[BUG]  [BUGGY]  return  boundFields.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	97	None	replace
513	[BUG]  [BUGGY]  return  result!=  null?  boundFields  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  boundFields  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  boundFields  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    fields    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  boundFields	50	None	replace
514	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [CE]  cannot  find  symbol  fieldNames  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  fieldNames.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  fieldNames.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	24	None	replace
515	[BUG]  [BUGGY]  Field[]  fields  =  this.fields.getFields();  [CE]  cannot  find  symbol  fields  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  this.fields.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  this.fields.getFields();	  Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  fields	24	None	replace
516	[BUG]  [BUGGY]  return  raw  ==  null?  raw.get(i):  result;  [CE]  cannot  find  symbol  i  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  raw.get(i):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  raw.get(i):  result;	  return    boundFields    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
517	[BUG]  [BUGGY]  return  fieldNames  ==  null?  fieldFields.get(i):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  fieldFields.get(i):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  fieldFields.get(i):  result;	  return    boundFields    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	32	None	replace
518	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
519	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
520	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(new  TypeToken[replacement.size()  ]);  [CE]  cannot  find  symbol  replacement  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toArray(new  TypeToken[replacement.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(new  TypeToken[replacement.size()  ]);	  return    result!=    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  replacement	124	None	replace
521	[BUG]  [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields  ==  null?  null  :  boundFields.get(replacement);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields  ==  null?  null  :  boundFields.get(replacement);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	ObjectConstructor  <  ComparisonFailure>  result  =  boundFields  ==  null?  null  :  boundFields.get(replacement);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.get(replacement);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
522	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[reservedFields.size()  ]);  [CE]  cannot  find  symbol  reservedFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[reservedFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[reservedFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[remainingFields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  reservedFields	5	None	replace
523	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw;  result  ==  null?  null  :  result;  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw;  result  ==  null?  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw;  result  ==  null?  null  :  result;	  return    result    ==    null?    null    :    result;    result    ==    null?    null    :    result;    	non-compiled	[CE]  not  a  statement	13	None	replace
524	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
525	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field[]  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field[]  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field[]  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
526	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
527	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field[]  fields  =  field.getFields();  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field[]  fields  =  field.getFields();  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field[]  fields  =  field.getFields();  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
528	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  boundFields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  boundFields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  boundFields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
529	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " "));  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	133	None	replace
530	[BUG]  [BUGGY]  return  raw!=  null?  fieldFields.get(raw):  result;  [CE]  cannot  find  symbol  fieldFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  fieldFields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  fieldFields.get(raw):  result;	  return    result!=    null?    fieldFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldFields	87	None	replace
531	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [CE]  cannot  find  symbol  fieldNames  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	138	None	replace
532	[BUG]  [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [CE]  cannot  find  symbol  fields  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  fields	138	None	replace
533	[BUG]  [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.put(fieldName,    fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	139	None	replace
534	[BUG]  [BUGGY]  return  result  ==  null?  fieldTypes[0]  :  boundFields;  [CE]  cannot  find  symbol  fieldTypes  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldTypes[0]  :  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldTypes[0]  :  boundFields;	  return    result    ==    null?    fieldTypes[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	29	None	replace
535	[BUG]  [BUGGY]  return  result  ==  null?  fieldTypes[0]  :  raw;  [CE]  cannot  find  symbol  fieldTypes  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldTypes[0]  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldTypes[0]  :  raw;	  return    result    ==    null?    fieldTypes[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	29	None	replace
536	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames.get(raw):  boundFields;  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldNames.get(raw):  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames.get(raw):  boundFields;	  return    result    ==    null?    fieldNames.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	75	None	replace
537	[BUG]  [BUGGY]  return  fieldNamingPolicy.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNamingPolicy.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNamingPolicy.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
538	[BUG]  [BUGGY]  return  boundFields.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
539	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
540	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
541	[BUG]  [BUGGY]  return  result  ==  null?  result.length  :  raw;  [CE]  cannot  find  symbol  length  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  result.length  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  result.length  :  raw;	  return    result    ==    null?    result.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  length	115	None	replace
542	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  result  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	add	return  result  ==  null?  result  :  result;	  return    result    ==    null?    result.length    :    result;    	compilable	  [FE]  ComparisonFailure  	115	1	replace
543	[BUG]  [BUGGY]  return  result  ==  null?  result  :  result;  [FE]  ComparisonFailure  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  result  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  result  :  result;	  return    result    ==    null?    result.length    :    result;    	compilable	  [FE]  ComparisonFailure  	115	1	replace
544	[BUG]  [BUGGY]  return  result  ==  null?  result.size  :  result;  [CE]  cannot  find  symbol  size  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  result.size  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  result.size  :  result;	  return    result    ==    null?    result.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  size	115	None	replace
545	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(raw);  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(raw);	  return    result    ==    null?    null    :    result.toArray(raw);    	non-compiled	[CE]  cannot  find  symbol  boundFields	1	None	replace
546	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw,  fieldNames.values();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw,  fieldNames.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw,  fieldNames.values();	  return    result    ==    null?    null    :    result,    fieldNames.values();    	non-compiled	[CE]  ';'  expected	130	None	replace
547	[BUG]  [BUGGY]  return  fieldNames  ==  null?  null  :  fieldNames.values();  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  null  :  fieldNames.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  null  :  fieldNames.values();	  return    result    ==    null?    null    :    result,    fieldNames.values();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	130	None	replace
548	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  [CE]  cannot  find  symbol  fieldNames  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	122	None	replace
549	[BUG]  [BUGGY]  return  raw.getAnnotation(field);  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw.getAnnotation(field);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getAnnotation(field);	  return    raw.getAnnotation(JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  field	128	None	replace
550	[BUG]  [BUGGY]  return  raw!=  null?  boundFields.get(raw):  result;  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  boundFields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  boundFields.get(raw):  result;	  return    result!=    null?    fields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	42	None	replace
551	[BUG]  [BUGGY]  Return  result  ==  null?  null  :  boundFields.values();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Return  result  ==  null?  null  :  boundFields.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Return  result  ==  null?  null  :  boundFields.values();	  Return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  ';'  expected	7	None	replace
552	[BUG]  [BUGGY]  return  result!=  null?  fieldNames.get(raw):  boundFields;  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  fieldNames.get(raw):  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fieldNames.get(raw):  boundFields;	  return    result!=    null?    fieldNames.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	43	None	replace
553	[BUG]  [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [CE]  cannot  find  symbol  field  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Type[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    return    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	137	None	replace
554	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fields[i];  }  [CE]  cannot  find  symbol  field  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fields[i];  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    return    fieldNames[i];    }    	non-compiled	[CE]  cannot  find  symbol  field	137	None	replace
555	[BUG]  [BUGGY]  return  result  ==  null?  boundFields.get(removed):  raw;  [CE]  cannot  find  symbol  removed  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFields.get(removed):  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields.get(removed):  raw;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  removed	118	None	replace
556	[BUG]  [BUGGY]  return  raw  ==  null?  raw.get(removed):  result;  [CE]  cannot  find  symbol  removed  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  raw.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  raw.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  removed	118	None	replace
557	[BUG]  [BUGGY]  return  raw  ==  null?  rawFields.get(removed):  result;  [CE]  cannot  find  symbol  removed  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  rawFields.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  rawFields.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  removed	118	None	replace
558	[BUG]  [BUGGY]  return  boundFields.type;  [CE]  cannot  find  symbol  boundFields  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.type;	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  boundFields	68	None	replace
559	[BUG]  [BUGGY]  return  fieldType;  [CE]  cannot  find  symbol  fieldType  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldType;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldType;	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  fieldType	68	None	replace
560	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[reverse.size()  ]);  [CE]  cannot  find  symbol  reverse  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[reverse.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class[reverse.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Class[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  reverse	141	None	replace
561	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  BoundField[boundFields.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  BoundField[boundFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  BoundField[boundFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	88	None	replace
562	[BUG]  [BUGGY]  return  result!=  null?  raw[0]  :  result;  [CE]  array  required,  but  Class<CAP#1>  found  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  raw[0]  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  raw[0]  :  result;	  return    result    ==    null?    raw[0]    :    result;    	non-compiled	[CE]  array  required,  but  Class<CAP#1>  found	30	None	replace
563	[BUG]  [BUGGY]  return  raw  ==  null?  result[0]  :  result;  [CE]  array  required,  but  Map<String,BoundField>  found  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  result[0]  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  result[0]  :  result;	  return    result    ==    null?    raw[0]    :    result;    	non-compiled	[CE]  array  required,  but  Map<String,BoundField>  found	30	None	replace
564	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  fieldNames  [FE]    IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    if(fieldNames!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  fieldNames	106	None	add
565	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  fieldNames  [FE]      IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    if(fieldNames  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  fieldNames	106	None	add
566	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(constructor  ==  null)  {  throw  new  IllegalArgumentException(  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(constructor  ==  null)  {  throw  new  IllegalArgumentException(  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(constructor  ==  null)  {  throw  new  IllegalArgumentException(	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
567	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(constructor  ==  null)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]          IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(constructor  ==  null)  {  throw  new  IllegalArgumentException( "  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(constructor  ==  null)  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	106	None	add
568	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(new  Class  <?>());  [CE]  unexpected  type  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toArray(new  Class  <?>());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(new  Class  <?>());	  return    result    ==    null?    null    :    result.toArray(new    Class    <?>());    	non-compiled	[CE]  unexpected  type	143	None	replace
569	[BUG]  [BUGGY]  return  constructor.getAnnotationIntrospector();  [CE]  cannot  find  symbol  constructor  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  constructor.getAnnotationIntrospector();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  constructor.getAnnotationIntrospector();	  return    raw.getAnnotationIntrospector();    	non-compiled	[CE]  cannot  find  symbol  constructor	127	None	replace
570	[BUG]  [BUGGY]  return  raw!=  null?  boundFields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  boundFields  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  boundFields  :  Collections.emptyMap();	  return    result!=    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundFields	79	None	replace
571	[BUG]  [BUGGY]  return  result  ==  null?  null  :  resultFields.fields();  [CE]  cannot  find  symbol  resultFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  resultFields.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  resultFields.fields();	  return    result    ==    null?    null    :    result.fields();    	non-compiled	[CE]  cannot  find  symbol  resultFields	60	None	replace
572	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  fieldNames.fields();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  fieldNames.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  fieldNames.fields();	  return    result    ==    null?    null    :    result.fields();    	non-compiled	[CE]  ';'  expected	60	None	replace
573	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundFields[0]  :  result;  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  boundFields[0]  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundFields[0]  :  result;	  return    result    ==    null?    fields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	27	None	replace
574	[BUG]  [BUGGY]  return  fieldNames!=  null?  null  :  fieldNames;  [CE]  cannot  find  symbol  fieldNames  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames!=  null?  null  :  fieldNames;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames!=  null?  null  :  fieldNames;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	92	None	replace
575	[BUG]  [BUGGY]  return  raw!=  null?  null  :  boundFields;  [CE]  cannot  find  symbol  boundFields  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  boundFields;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  cannot  find  symbol  boundFields	92	None	replace
576	[BUG]  [BUGGY]  return  raw!=  null?  null  :  raw.bounds;  [CE]  cannot  find  symbol  bounds  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  raw.bounds;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  raw.bounds;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  cannot  find  symbol  bounds	92	None	replace
577	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  [CE]  cannot  find  symbol  field  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  field	110	None	replace
578	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  Field[]  fieldNames  =  boundField.getFieldNames();  [CE]  cannot  find  symbol  boundField  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result;  Field[]  fieldNames  =  boundField.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result;  Field[]  fieldNames  =  boundField.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  boundField	110	None	replace
579	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fieldNames  =  boundField.getFieldNames();  [CE]  cannot  find  symbol  boundField  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fieldNames  =  boundField.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  Field[]  fieldNames  =  boundField.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  boundField	110	None	replace
580	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
581	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
582	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field[]  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field[]  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field[]  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
583	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  Il  [CE]  '('  or  '['  expected  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  Il  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  Il	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  '('  or  '['  expected	134	None	replace
584	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " "));  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	134	None	replace
585	[BUG]  [BUGGY]  return  raw  ==  null?  boundFields  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundFields  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundFields  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    raw    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  boundFields	116	None	replace
586	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[boundFields.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[boundFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  Field[boundFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[removed.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	144	None	replace
587	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[removed.size()  ]);  [CE]  cannot  find  symbol  removed  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[removed.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  Field[removed.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[removed.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  removed	144	None	replace
588	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(comp    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
589	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(comp    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
590	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp!=  '  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp!=  '	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(comp    	non-compiled	[CE]  illegal  line  end  in  character  literal	103	None	replace
591	[BUG]  [BUGGY]  return  type.getNativeType(UNKNOWN_TYPE);  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getNativeType(UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getNativeType(UNKNOWN_TYPE);	  return    type;    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	64	None	replace
592	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getNativeType(JSTypeNative.NO_OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getNativeType(JSTypeNative.NO_OBJECT_TYPE);	  return    type;    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	64	None	replace
593	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.NULL_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getNativeType(JSTypeNative.NULL_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getNativeType(JSTypeNative.NULL_TYPE);	  return    type;    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	64	None	replace
594	[BUG]  [BUGGY]  return  type.getNativeType(JSTypeNative.TYPE_OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.getNativeType(JSTypeNative.TYPE_OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.getNativeType(JSTypeNative.TYPE_OBJECT_TYPE);	  return    type;    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	64	None	replace
595	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.objectConstructor;  [CE]  cannot  find  symbol  objectConstructor  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.objectConstructor;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.objectConstructor;	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>();    	non-compiled	[CE]  cannot  find  symbol  objectConstructor	81	None	replace
596	[BUG]  [BUGGY]  return  raw!=  null?  null  :  raw;  result!=  null  :  result;  [CE]  not  a  statement  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  raw;  result!=  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  raw;  result!=  null  :  result;	  return    result!=    null?    null    :    result;    result!=    null    :    result;    	non-compiled	[CE]  not  a  statement	111	None	replace
597	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  result!=  null  :  result;  [CE]  not  a  statement  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  result!=  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  result!=  null  :  result;	  return    result!=    null?    null    :    result;    result!=    null    :    result;    	non-compiled	[CE]  not  a  statement	111	None	replace
598	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames[0]  :  boundFields;  [CE]  cannot  find  symbol  fieldNames  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldNames[0]  :  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames[0]  :  boundFields;	  return    result    ==    null?    fieldNames[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	28	None	replace
599	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.getDeclaredType();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.getDeclaredType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.getDeclaredType();	  return    raw    ==    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
600	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.getSuperclass();  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.getSuperclass();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.getSuperclass();	  return    raw    ==    null?    null    :    result;    	non-compiled	[CE]  incompatible  types	94	None	replace
601	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw;  result  ==  null?  null  :  result.getRawType();  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw;  result  ==  null?  null  :  result.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw;  result  ==  null?  null  :  result.getRawType();	  return    result    ==    null?    null    :    result;    result    ==    null?    null    :    result.getRawType();    	non-compiled	[CE]  not  a  statement	15	None	replace
602	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result.toString();  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result.toString();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  result.toString();	  return    result    ==    null?    null    :    result.toString();    	non-compiled	[CE]  incompatible  types	147	None	replace
603	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  Field[fields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fields	89	None	replace
604	[BUG]  [BUGGY]  return  result  ==  null?  null  :  results.toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  results.toArray(new  Field[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  results.toArray(new  Field[fields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fields	89	None	replace
605	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  TypeToken[boundFields.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  TypeToken[boundFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  TypeToken[boundFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    TypeToken[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	90	None	replace
606	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  TypeToken[replacements.size()  ]);  [CE]  cannot  find  symbol  replacements  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  TypeToken[replacements.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  TypeToken[replacements.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    TypeToken[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  replacements	90	None	replace
607	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  ==  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  ==  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  ==  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(extern    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
608	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  ==  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  ==  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  ==	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(extern    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
609	[BUG]  [BUGGY]  return  raw  ==  null?  fields[0]  :  result;  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fields[0]  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fields[0]  :  result;	  return    result    ==    null?    fields[0]    :    raw;    	non-compiled	[CE]  cannot  find  symbol  fields	140	None	replace
610	[BUG]  [BUGGY]  return  raw  ==  null?  boundFields[0]  :  result;  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundFields[0]  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundFields[0]  :  result;	  return    result    ==    null?    fields[0]    :    raw;    	non-compiled	[CE]  cannot  find  symbol  boundFields	140	None	replace
611	[BUG]  [BUGGY]  return  result  ==  null?  boundFields[0]  :  field;  [CE]  cannot  find  symbol  boundFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFields[0]  :  field;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields[0]  :  field;	  return    result    ==    null?    fields[0]    :    raw;    	non-compiled	[CE]  cannot  find  symbol  boundFields	140	None	replace
612	[BUG]  [BUGGY]  Field[]  fields  =  name.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  name  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  name.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  name.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  name	21	None	replace
613	[BUG]  [BUGGY]  Field[]  fields  =  this.fields.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fields  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  this.fields.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  this.fields.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fields	21	None	replace
614	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  boundFields.get(result);  }  [CE]  cannot  find  symbol  boundFields  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  boundFields.get(result);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  if(result!=  null)  {  result  =  boundFields.get(result);  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	119	None	replace
615	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  if(result  ==  null)  {  result  =  boundFields.get(result);  }  [CE]  cannot  find  symbol  boundFields  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  if(result  ==  null)  {  result  =  boundFields.get(result);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  if(result  ==  null)  {  result  =  boundFields.get(result);  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	119	None	replace
616	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result  ==  null)  {  result  =  boundFields.get(result);  }  [CE]  cannot  find  symbol  boundFields  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result;  if(result  ==  null)  {  result  =  boundFields.get(result);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result;  if(result  ==  null)  {  result  =  boundFields.get(result);  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	119	None	replace
617	[BUG]  [BUGGY]  return  fieldNames.getDeclaredFields();  [CE]  cannot  find  symbol  fieldNames  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames.getDeclaredFields();	  return    raw.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	72	None	replace
618	[BUG]  [BUGGY]  return  result  ==  null?  boundFields.get(replacement):  result;  [CE]  cannot  find  symbol  replacement  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFields.get(replacement):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields.get(replacement):  result;	  return    result    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  replacement	33	None	replace
619	[BUG]  [BUGGY]  return  fieldNames  ==  null?  fieldFields.get(raw):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  fieldFields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  fieldFields.get(raw):  result;	  return    boundFields    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	31	None	replace
620	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator(),  raw.next();  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator(),  raw.next();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator(),  raw.next();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.iterator().next();    	non-compiled	[CE]  ';'  expected	82	None	replace
621	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  fieldNames.iterator().next();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  fieldNames.iterator().next();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  fieldNames.iterator().next();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
622	[BUG]  [BUGGY]  return  result!=  null?  null  :  resultFields;  [CE]  cannot  find  symbol  resultFields  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  resultFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  resultFields;	  return    result!=    null?    null    :    result.fields;    	non-compiled	[CE]  cannot  find  symbol  resultFields	95	None	replace
623	[BUG]  [BUGGY]  return  raw!=  null?  null  :  result.fields;  [CE]  cannot  find  symbol  fields  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  result.fields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  result.fields;	  return    result!=    null?    null    :    result.fields;    	non-compiled	[CE]  cannot  find  symbol  fields	95	None	replace
624	[BUG]  [BUGGY]  if(fieldNames  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fieldNames  [FE]    IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  fieldNames	107	None	replace
625	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  [CE]  cannot  find  symbol  field  [FE]      IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  field.name);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  field	107	None	replace
626	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  [CE]  cannot  find  symbol  previous  [FE]        IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  previous	107	None	replace
627	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  type.name);  [CE]  cannot  find  symbol  name  [FE]          IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  type.name);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  type.name);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
628	[BUG]  [BUGGY]  return  fieldNames.getRawType();  [CE]  cannot  find  symbol  fieldNames  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames.getRawType();	  return    raw.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	69	None	replace
629	[BUG]  [BUGGY]  return  result  ==  null?  fieldFields[0]  :  raw;  [CE]  cannot  find  symbol  fieldFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldFields[0]  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldFields[0]  :  raw;	  return    result    ==    null?    fieldFields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldFields	113	None	replace
630	[BUG]  [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  raw.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
631	[BUG]  [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  fieldType.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    i++)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
632	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fields  =  boundFields.getFields();  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fields  =  boundFields.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  Field[]  fields  =  boundFields.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	16	None	replace
633	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields;  Field[]  fields  =  boundFields.getFields();  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields;  Field[]  fields  =  boundFields.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields;  Field[]  fields  =  boundFields.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	16	None	replace
634	[BUG]  [BUGGY]  return  field  ==  null?  null  :  field;  Field[]  fields  =  field.getFields();  [CE]  cannot  find  symbol  field  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field  ==  null?  null  :  field;  Field[]  fields  =  field.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field  ==  null?  null  :  field;  Field[]  fields  =  field.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  field	16	None	replace
635	[BUG]  [BUGGY]  if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    result[i]    =    fieldType.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
636	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  Result  <  null?  null  :  result;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result;  Result  <  null?  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result;  Result  <  null?  null  :  result;	  return    result    ==    null?    null    :    result;    Result    <    null?    null    :    result;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
637	[BUG]  [BUGGY]  Result  <  null?  null  :  result;  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Result  <  null?  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Result  <  null?  null  :  result;	  return    result    ==    null?    null    :    result;    Result    <    null?    null    :    result;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
638	[BUG]  [BUGGY]  result  =  result  ==  null?  null  :  result;  Result  <  null?  null  :  result;  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  result  ==  null?  null  :  result;  Result  <  null?  null  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  result  ==  null?  null  :  result;  Result  <  null?  null  :  result;	  return    result    ==    null?    null    :    result;    Result    <    null?    null    :    result;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
639	[BUG]  [BUGGY]  return  raw!=  null?  null  :  result.values();  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  null  :  result.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  null  :  result.values();	  return    result!=    null?    null    :    result.values();    	non-compiled	[CE]  incompatible  types	8	None	replace
640	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]    ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ]);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	add
641	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  [CE]  cannot  find  symbol  field  [FE]      ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  fieldNames  =  field.getFieldNames();	  	non-compiled	[CE]  cannot  find  symbol  field	93	None	add
642	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  fieldNames.values().toArray(new  Field[fields.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]        ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  fieldNames.values().toArray(new  Field[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  result  =  fieldNames.values().toArray(new  Field[fields.size()  ]);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	add
643	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  fieldNames.values().toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]          ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  result  =  fieldNames.values().toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  result  =  fieldNames.values().toArray(new  Field[fieldNames.size()  ]);	  	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	add
644	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Collections.sort(fieldNames);  [CE]  cannot  find  symbol  fieldNames  [FE]            ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Collections.sort(fieldNames);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Collections.sort(fieldNames);	  	non-compiled	[CE]  cannot  find  symbol  fieldNames	93	None	add
645	[BUG]  [BUGGY]  result!=  null  :  result.getGenericSuperclass();  [CE]  not  a  statement  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result!=  null  :  result.getGenericSuperclass();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result!=  null  :  result.getGenericSuperclass();	  return    result!=    null?    null    :    result;    result!=    null?    null    :    result.getGenericSuperclass();    	non-compiled	[CE]  not  a  statement	109	None	replace
646	[BUG]  [BUGGY]  return  raw  ==  null?  fieldName  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldName  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fieldName  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fieldName  :  Collections.emptyMap();	  return    raw    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldName	145	None	replace
647	[BUG]  [BUGGY]  return  result  ==  null?  null  :  field.getDeclaredFields();  [CE]  cannot  find  symbol  field  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  field.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  field.getDeclaredFields();	  return    result    ==    null?    null    :    result.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  field	37	None	replace
648	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.fields.getRawType();  [CE]  cannot  find  symbol  fields  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.fields.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.fields.getRawType();	  return    result    ==    null?    null    :    result.getRawType();    	non-compiled	[CE]  cannot  find  symbol  fields	36	None	replace
649	[BUG]  [BUGGY]  return  fieldNames  ==  null?  null  :  field.values();  [CE]  cannot  find  symbol  fieldNames  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  null  :  field.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  null  :  field.values();	  return    boundFields    ==    null?    null    :    boundFields.values();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	129	None	replace
650	[BUG]  [BUGGY]  return  fieldNames  ==  null?  null  :  fieldNames;  Field[]  fieldNames  =  type.getFieldNames();  [CE]  cannot  find  symbol  fieldNames  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  null  :  fieldNames;  Field[]  fieldNames  =  type.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  null  :  fieldNames;  Field[]  fieldNames  =  type.getFieldNames();	  return    result    ==    null?    null    :    result;    Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	18	None	replace
651	[BUG]  [BUGGY]  return  result  ==  null?  null  :  fieldNames;  Field[]  fieldNames  =  type.getFieldNames();  [CE]  cannot  find  symbol  fieldNames  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  fieldNames;  Field[]  fieldNames  =  type.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  fieldNames;  Field[]  fieldNames  =  type.getFieldNames();	  return    result    ==    null?    null    :    result;    Field[]    fieldNames    =    type.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	18	None	replace
652	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [CE]  cannot  find  symbol  fieldNames  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName();    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	135	None	replace
653	[BUG]  [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [CE]  cannot  find  symbol  fields  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName();    }    	non-compiled	[CE]  cannot  find  symbol  fields	135	None	replace
654	[BUG]  [BUGGY]  return  raw  ==  null?  result  :  Collections.EMPTYMap();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  result  :  Collections.EMPTYMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  result  :  Collections.EMPTYMap();	  return    result    ==    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
655	[BUG]  [BUGGY]  return  result  ==  null?  fields.get(raw):  boundFields;  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fields.get(raw):  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields.get(raw):  boundFields;	  return    result    ==    null?    fields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fields	74	None	replace
656	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [CE]  cannot  find  symbol  fieldNames  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  fieldNames.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  fieldNames.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	100	None	replace
657	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [CE]  cannot  find  symbol  fieldNames  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	100	None	replace
658	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.getAnnotation(JSON_NAME);  [CE]  cannot  find  symbol  JSON_NAME  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.getAnnotation(JSON_NAME);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.getAnnotation(JSON_NAME);	  return    result!=    null?    null    :    result.getAnnotation(JSON_NAME);    	non-compiled	[CE]  cannot  find  symbol  JSON_NAME	125	None	replace
659	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getAnnotation(raw);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.getAnnotation(raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getAnnotation(raw);	  return    result!=    null?    null    :    result.getAnnotation(JSON_NAME);    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
660	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  raw.getValue();  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  raw.getValue();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  raw.getValue();	  return    result    ==    null?    null    :    result.getValue();    	non-compiled	[CE]  ';'  expected	35	None	replace
661	[BUG]  [BUGGY]  return  fieldNames.getType();  [CE]  cannot  find  symbol  fieldNames  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames.getType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames.getType();	  return    raw.getType();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	126	None	replace
662	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  BoundField[boundField.size()  ]);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  BoundField[boundField.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundField.toArray(new  BoundField[boundField.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacement.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	91	None	replace
663	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result  ==  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  fieldNames  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result;  if(result  ==  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result;  if(result  ==  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	123	None	replace
664	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  BoundField[result.size()  ]);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  BoundField[result.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundField.toArray(new  BoundField[result.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacement.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	91	None	replace
665	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundFields[0]  :  raw;  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  boundFields[0]  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundFields[0]  :  raw;	  return    result    ==    null?    fields[0]    :    raw;    	non-compiled	[CE]  cannot  find  symbol  boundFields	140	None	replace
666	[BUG]  [BUGGY]  return  raw  ==  null?  boundFields[0]  :  field;  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundFields[0]  :  field;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundFields[0]  :  field;	  return    result    ==    null?    fields[0]    :    raw;    	non-compiled	[CE]  cannot  find  symbol  boundFields	140	None	replace
667	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  original.name);  [CE]  cannot  find  symbol  original  [FE]    IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  original.name);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  original.name);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  original	107	None	replace
668	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  [CE]  cannot  find  symbol  name  [FE]      IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  name);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  name	107	None	replace
669	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  last.name);  [CE]  cannot  find  symbol  last  [FE]        IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  last.name);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  last.name);	  throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  cannot  find  symbol  last	107	None	replace
670	[BUG]  [BUGGY]  return  type.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  type.restrictByNotNullOrUndefined();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type.restrictByNotNullOrUndefined();	  return    type;    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
671	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.values().next();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.values().next();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.values().next();	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.iterator().next();    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
672	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  boundFields.get(result);  }  [CE]  cannot  find  symbol  boundFields  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  boundFields.get(result);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  boundFields.get(result);  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    boundFields.get(removed);    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundFields	119	None	replace
673	[BUG]  [BUGGY]  return  raw!=  null?  fieldNames  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldNames  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  fieldNames  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  fieldNames  :  Collections.emptyMap();	  return    result!=    null?    fieldNames    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	78	None	replace
674	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.values();  Collections.sort(boundFields);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.values();  Collections.sort(boundFields);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.values();  Collections.sort(boundFields);	  return    result    ==    null?    null    :    result;    Collections.sort(boundFields);    	non-compiled	[CE]  incompatible  types	151	None	replace
675	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.values();  Collections.sort(fields);  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.values();  Collections.sort(fields);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.values();  Collections.sort(fields);	  return    result    ==    null?    null    :    result;    Collections.sort(boundFields);    	non-compiled	[CE]  incompatible  types	151	None	replace
676	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.values();  Collections.sort(result);  [CE]  incompatible  types  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.values();  Collections.sort(result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.values();  Collections.sort(result);	  return    result    ==    null?    null    :    result;    Collections.sort(boundFields);    	non-compiled	[CE]  incompatible  types	151	None	replace
677	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.put(fieldName,    fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	139	None	replace
678	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields.put(fieldName,  fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields.put(fieldName,  fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields.put(fieldName,  fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.put(fieldName,    fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	139	None	replace
679	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(removed);  [CE]  cannot  find  symbol  removed  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toArray(removed);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(removed);	  return    result!=    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  removed	124	None	replace
680	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(new  Class[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toArray(new  Class[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(new  Class[fields.size()  ]);	  return    result!=    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  fields	124	None	replace
681	[BUG]  [BUGGY]  return  fieldNames  ==  null?  fieldNames.get(raw):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  fieldNames.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  fieldNames.get(raw):  result;	  return    boundFields    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	31	None	replace
682	[BUG]  [BUGGY]  return  raw  ==  null?  fieldFields.get(raw):  result;  [CE]  cannot  find  symbol  fieldFields  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fieldFields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fieldFields.get(raw):  result;	  return    boundFields    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldFields	31	None	replace
683	[BUG]  [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  cannot  find  symbol  fields  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fields	101	None	replace
684	[BUG]  [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  cannot  find  symbol  fieldNames  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldType(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	101	None	replace
685	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundField  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  boundField  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundField  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    field    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  boundFields	46	None	replace
686	[BUG]  [BUGGY]  return  replaced  ==  null?  null  :  replaced.values();  [CE]  cannot  find  symbol  replaced  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  replaced  ==  null?  null  :  replaced.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  replaced  ==  null?  null  :  replaced.values();	  return    boundFields    ==    null?    null    :    boundFields.values();    	non-compiled	[CE]  cannot  find  symbol  replaced	129	None	replace
687	[BUG]  [BUGGY]  return  returnedFields  ==  null?  null  :  raw.values();  [CE]  cannot  find  symbol  returnedFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returnedFields  ==  null?  null  :  raw.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returnedFields  ==  null?  null  :  raw.values();	  return    boundFields    ==    null?    null    :    boundFields.values();    	non-compiled	[CE]  cannot  find  symbol  returnedFields	129	None	replace
688	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  <  2)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  <  2)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  <  2)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericSuperclass();    }    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
689	[BUG]  [BUGGY]  Return  result  ==  null?  null  :  result.fields();  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Return  result  ==  null?  null  :  result.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Return  result  ==  null?  null  :  result.fields();	  Return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  ';'  expected	7	None	replace
690	[BUG]  [BUGGY]  return  new  Field[fields.size()  ];  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  new  Field[fields.size()  ];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  new  Field[fields.size()  ];	  return    raw.fields;    	non-compiled	[CE]  cannot  find  symbol  fields	71	None	replace
691	[BUG]  [BUGGY]  return  new  Field(fields,  declaredType.fields);  [CE]  cannot  find  symbol  fields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  new  Field(fields,  declaredType.fields);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  new  Field(fields,  declaredType.fields);	  return    raw.fields;    	non-compiled	[CE]  cannot  find  symbol  fields	71	None	replace
692	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
693	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
694	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i];    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
695	[BUG]  [BUGGY]  return  raw!=  null?  fieldTypes  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldTypes  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  fieldTypes  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  fieldTypes  :  Collections.emptyMap();	  return    result!=    null?    fieldTypes    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	80	None	replace
696	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fields  =  boundField.getFields();  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fields  =  boundField.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  Field[]  fields  =  boundField.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  boundField	16	None	replace
697	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.fields;  Field[]  fields  =  field.getFields();  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.fields;  Field[]  fields  =  field.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.fields;  Field[]  fields  =  field.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  fields	16	None	replace
698	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.fields;  Field[]  fields  =  boundField.getFields();  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.fields;  Field[]  fields  =  boundField.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.fields;  Field[]  fields  =  boundField.getFields();	  return    result    ==    null?    null    :    result;    Field[]    fields    =    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  fields	16	None	replace
699	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames[0]  :  field;  [CE]  cannot  find  symbol  fieldNames  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldNames[0]  :  field;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames[0]  :  field;	  return    result    ==    null?    fieldNames[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	28	None	replace
700	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames[0]  :  type;  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fieldNames[0]  :  type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames[0]  :  type;	  return    result    ==    null?    fieldNames[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	28	None	replace
701	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp  ==  '  [CE]  illegal  line  end  in  character  literal  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp  ==  '  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp  ==  '	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(comp    	non-compiled	[CE]  illegal  line  end  in  character  literal	103	None	replace
702	[BUG]  [BUGGY]  return  fieldNames.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	97	None	replace
703	[BUG]  [BUGGY]  return  result  ==  null?  null  :  resultFields.toArray(result);  [CE]  cannot  find  symbol  resultFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  resultFields.toArray(result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  resultFields.toArray(result);	  return    result    ==    null?    null    :    result.toArray(result);    	non-compiled	[CE]  cannot  find  symbol  resultFields	3	None	replace
704	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  raw.boundFields;  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  raw.boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  raw.boundFields;	  return    result    ==    null?    null    :    result.boundFields;    	non-compiled	[CE]  ';'  expected	112	None	replace
705	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(new  Class[result.size()  ]);  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.toArray(new  Class[result.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(new  Class[result.size()  ]);	  return    result!=    null?    null    :    result;    result!=    null    :    result;    	non-compiled	[CE]  cannot  find  symbol	111	None	replace
706	[BUG]  [BUGGY]  if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass()  [CE]  ';'  expected  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass()  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass()	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    result[i]    =    fieldType.getGenericSuperclass();    }    	non-compiled	[CE]  ';'  expected	121	None	replace
707	[BUG]  [BUGGY]  return  raw.getAnnotation(fieldType);  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw.getAnnotation(fieldType);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getAnnotation(fieldType);	  return    raw.getAnnotation(JSON_TYPE);    	non-compiled	[CE]  cannot  find  symbol  fieldType	128	None	replace
708	[BUG]  [BUGGY]  return  boundField  ==  null?  field  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundField  ==  null?  field  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundField  ==  null?  field  :  new  HashMap  <  Field,  Field>();	  return    raw    ==    null?    field    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  boundField	148	None	replace
709	[BUG]  [BUGGY]  return  raw  ==  null?  fields  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fields  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fields  :  new  HashMap  <  Field,  Field>();	  return    raw    ==    null?    field    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  fields	148	None	replace
710	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.toArray(new  Class  <?>());  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.toArray(new  Class  <?>());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields.toArray(new  Class  <?>());	  return    result    ==    null?    null    :    result.toArray(new    Class    <?>());    	non-compiled	[CE]  cannot  find  symbol  boundFields	143	None	replace
711	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(  field.getGenericSuperclass());  }  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(  field.getGenericSuperclass());  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(  field.getGenericSuperclass());  }	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
712	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(  field.getGenericSuperclass()  +  field.getGen  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(  field.getGenericSuperclass()  +  field.getGen  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(  field.getGenericSuperclass()  +  field.getGen	  	non-compiled	[CE]  	106	None	add
713	[BUG]  [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(  field.getGenericSuperclass());  }  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  throw  new  IllegalArgumentException(   "   ");  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(  field.getGenericSuperclass());  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw    new    IllegalArgumentException(   "   ");    if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException(  field.getGenericSuperclass());  }	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
714	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[removed.size()  ]);  [CE]  cannot  find  symbol  removed  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[removed.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[removed.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[remainingFields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  removed	5	None	replace
715	[BUG]  [BUGGY]  return  returned!=  null?  boundFields.get(raw):  result;  [CE]  cannot  find  symbol  returned  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned!=  null?  boundFields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned!=  null?  boundFields.get(raw):  result;	  return    result!=    null?    fields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  returned	42	None	replace
716	[BUG]  [BUGGY]  return  result!=  null?  fields.get(raw):  boundFields;  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  fields.get(raw):  boundFields;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fields.get(raw):  boundFields;	  return    result!=    null?    fields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fields	42	None	replace
717	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
718	[BUG]  [BUGGY]  Field[]  replaced  =  new  Field[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  replaced  =  new  Field[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  replaced  =  new  Field[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
719	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named   "  +  previous.name);  }	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
720	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named  [CE]  unclosed  string  literal  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  + "  declares  multiple  JSON  fields  named	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  unclosed  string  literal	134	None	replace
721	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  +  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  +  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException(declaredType  +	  if(fieldNames    ==    null)    {    for(int    i    =    0;    i    <    fields.size();    ++i)    {    Field    field    =    fields[i].getField(field);    if(field!=    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
722	[BUG]  [BUGGY]  return  returned!=  null?  boundFields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  returned  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned!=  null?  boundFields  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned!=  null?  boundFields  :  Collections.emptyMap();	  return    result!=    null?    fields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  returned	77	None	replace
723	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[boundField.size()  ]);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Field[boundField.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  Field[boundField.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[removed.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	144	None	replace
724	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  Field[boundField.size()  ]);  [CE]  cannot  find  symbol  boundField  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  Field[boundField.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundField.toArray(new  Field[boundField.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[removed.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	144	None	replace
725	[BUG]  [BUGGY]  return  raw  ==  null?  result[0]  :  field;  [CE]  array  required,  but  Map<String,BoundField>  found  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  result[0]  :  field;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  result[0]  :  field;	  return    result    ==    null?    raw[0]    :    result;    	non-compiled	[CE]  array  required,  but  Map<String,BoundField>  found	30	None	replace
726	[BUG]  [BUGGY]  return  raw  ==  null?  boundField[0]  :  result;  [CE]  cannot  find  symbol  boundField  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundField[0]  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundField[0]  :  result;	  return    result    ==    null?    raw[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  boundField	30	None	replace
727	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.getName();  [CE]  incompatible  types  [FE]    ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.getName();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.getName();	  return    raw    ==    null?    null    :    result;    	non-compiled	[CE]  incompatible  types	94	None	replace
728	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.getAnnotation(JsonNull.class);  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.getAnnotation(JsonNull.class);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.getAnnotation(JsonNull.class);	  return    raw    ==    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
729	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.getAnnotated();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.getAnnotated();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.getAnnotated();	  return    raw    ==    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
730	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  <  2)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  <  2)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  <  2)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericType();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
731	[BUG]  [BUGGY]  Field[]  fields  =  row.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  row.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  row.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    result[i]    =    field.getGenericType();    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
732	[BUG]  [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [CE]  cannot  find  symbol  fields  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	fields  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fields[i]    =    fieldNames[i].getFieldName(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  fields	100	None	replace
733	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  <  2)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  <  2)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  <  2)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null)    {    for(int    i    =    0;    i    <    fields.length;    ++i)    {    return    fields[i];    }    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
734	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.sort();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.sort();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.sort();	  return    result    ==    null?    null    :    result;    Collections.sort(fields);    result    =    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol	149	None	replace
735	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern!=  '  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern!=  '	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(extern    	non-compiled	[CE]  illegal  line  end  in  character  literal	104	None	replace
736	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  ==  }  [CE]  illegal  start  of  expression  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  ==  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  ==  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(extern    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
737	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundField  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundFields  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  boundField  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundField  :  Collections.emptyMap();	  return    result    ==    null?    field    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundFields	98	None	replace
738	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  field.getRawType();  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  field.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  field.getRawType();	  return    result    ==    null?    null    :    result.getRawType();    	non-compiled	[CE]  ';'  expected	36	None	replace
739	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  fieldType.getRawType();  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  fieldType.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  fieldType.getRawType();	  return    result    ==    null?    null    :    result.getRawType();    	non-compiled	[CE]  ';'  expected	36	None	replace
740	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.values());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.values());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.values());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(fields.size());    	non-compiled	[CE]  cannot  find  symbol	85	None	replace
741	[BUG]  [BUGGY]  return  fieldNames  ==  null?  null  :  fieldNames;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [CE]  cannot  find  symbol  fieldNames  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  null  :  fieldNames;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  null  :  fieldNames;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(fields.size());    	non-compiled	[CE]  cannot  find  symbol  fieldNames	85	None	replace
742	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.fields();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  raw.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.fields();	  return    raw    ==    null?    null    :    raw.values();    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
743	[BUG]  [BUGGY]  return  fieldNames.getAnnotationIntrospector();  [CE]  cannot  find  symbol  fieldNames  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames.getAnnotationIntrospector();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames.getAnnotationIntrospector();	  return    raw.getAnnotationIntrospector();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	127	None	replace
744	[BUG]  [BUGGY]  return  fieldType.getAnnotationIntrospector();  [CE]  cannot  find  symbol  fieldType  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldType.getAnnotationIntrospector();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldType.getAnnotationIntrospector();	  return    raw.getAnnotationIntrospector();    	non-compiled	[CE]  cannot  find  symbol  fieldType	127	None	replace
745	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields,  field.getFields();  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields,  field.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields,  field.getFields();	  return    result    ==    null?    null    :    result,    field.getFields();    	non-compiled	[CE]  ';'  expected	61	None	replace
746	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  boundField.getFields();  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  boundField.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  boundField.getFields();	  return    result    ==    null?    null    :    result,    field.getFields();    	non-compiled	[CE]  ';'  expected	61	None	replace
747	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundField.get(raw):  result;  [CE]  cannot  find  symbol  boundFields  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  boundField.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundField.get(raw):  result;	  return    result    ==    null?    field.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	76	None	replace
748	[BUG]  [BUGGY]  return  result  ==  null?  field.get(raw):  raw;  [CE]  cannot  find  symbol  field  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  field.get(raw):  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  field.get(raw):  raw;	  return    result    ==    null?    field.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  field	76	None	replace
749	[BUG]  [BUGGY]  return  fieldNames.get(raw.getType());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames.get(raw.getType());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames.get(raw.getType());	  return    raw.getType();    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
750	[BUG]  [BUGGY]  return  field  ==  null?  null  :  field.getFields();  [CE]  cannot  find  symbol  field  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  field  ==  null?  null  :  field.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field  ==  null?  null  :  field.getFields();	  return    result    ==    null?    null    :    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  field	86	None	replace
751	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundField.getFields();  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundField.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundField.getFields();	  return    result    ==    null?    null    :    field.getFields();    	non-compiled	[CE]  cannot  find  symbol  boundField	86	None	replace
752	[BUG]  [BUGGY]  return  fieldNames  ==  null?  fieldNames.get(i):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  fieldNames.get(i):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  fieldNames.get(i):  result;	  return    boundFields    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	32	None	replace
753	[BUG]  [BUGGY]  return  result  ==  null?  boundFields.get(i):  raw;  [CE]  cannot  find  symbol  i  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundFields.get(i):  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields.get(i):  raw;	  return    boundFields    ==    null?    boundFields.get(i):    result;    	non-compiled	[CE]  cannot  find  symbol  i	32	None	replace
754	[BUG]  [BUGGY]  if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
755	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  +  1];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  fieldNames  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  +  1];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  +  1];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  fieldNames	120	None	replace
756	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " "));  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fields.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	120	None	replace
757	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [CE]  cannot  find  symbol  field  [FE]                                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fields.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    ++i)    {    fieldNames.add(fieldNames[i]);    }    	non-compiled	[CE]  cannot  find  symbol  field	136	None	replace
758	[BUG]  [BUGGY]  return  raw  ==  null?  boundFields.size()  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  boundFields.size()  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundFields.size()  :  Collections.emptyMap();	  return    result    ==    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundFields	11	None	replace
759	[BUG]  [BUGGY]  return  raw  ==  null?  type  :  Collections.emptyMap();  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  type  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  type  :  Collections.emptyMap();	  return    result    ==    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	11	None	replace
760	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  Field[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundField.toArray(new  Field[fields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Field[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fields	89	None	replace
761	[BUG]  [BUGGY]  Result  <  null?  null  :  result.getRawType();  [CE]  illegal  start  of  type  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Result  <  null?  null  :  result.getRawType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Result  <  null?  null  :  result.getRawType();	  return    result!=    null?    null    :    result;    result    ==    null?    null    :    result.getRawType();    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
762	[BUG]  [BUGGY]  return  result  ==  null?  fields.get(raw):  field;  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  fields.get(raw):  field;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields.get(raw):  field;	  return    result    ==    null?    fieldNames.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fields	75	None	replace
763	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(boundFields,  raw);  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(boundFields,  raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(boundFields,  raw);	  return    result    ==    null?    null    :    result.toArray(raw);    	non-compiled	[CE]  cannot  find  symbol  boundFields	1	None	replace
764	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex!=  '  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex!=  '	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(ex    	non-compiled	[CE]  illegal  line  end  in  character  literal	105	None	replace
765	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  }  [CE]  illegal  start  of  expression  [FE]                                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(ex    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
766	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  [CE]  illegal  start  of  expression  [FE]                                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(ex    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
767	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  }  [CE]  illegal  start  of  expression  [FE]                                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  ==  }	  if(fieldNames!=    null)    {    Field[]    fieldNames    =    field.getFieldNames();    for(int    i    =    0;    i    <    fieldNames.length;    i++)    {    ObjectConstructor    constructor    =    fieldNames[i];    if(ex    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
768	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(removed);  [CE]  cannot  find  symbol  removed  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(removed);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(removed);	  return    result    ==    null?    null    :    result.toArray(removed);    	non-compiled	[CE]  cannot  find  symbol  removed	142	None	replace
769	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(result);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(result);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundField.toArray(result);	  return    result    ==    null?    null    :    result.toArray(removed);    	non-compiled	[CE]  cannot  find  symbol  boundField	142	None	replace
770	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(boundField);  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(boundField);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(boundField);	  return    result    ==    null?    null    :    result.toArray(removed);    	non-compiled	[CE]  cannot  find  symbol  boundField	142	None	replace
771	[BUG]  [BUGGY]  return  result  ==  null?  result.length  :  previous;  [CE]  cannot  find  symbol  length  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  result.length  :  previous;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  result.length  :  previous;	  return    result    ==    null?    result.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  length	115	None	replace
772	[BUG]  [BUGGY]  Return  raw  ==  null?  null  :  raw.getFields();  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Return  raw  ==  null?  null  :  raw.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Return  raw  ==  null?  null  :  raw.getFields();	  return    result    ==    null?    null    :    raw.getFields();    	non-compiled	[CE]  ';'  expected	59	None	replace
773	[BUG]  [BUGGY]  return  returned  ==  null?  boundFields[0]  :  result;  [CE]  cannot  find  symbol  returned  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned  ==  null?  boundFields[0]  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned  ==  null?  boundFields[0]  :  result;	  return    result    ==    null?    fields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  returned	27	None	replace
774	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  if(fieldNames[i]!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  if(fieldNames[i]!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  if(fieldNames[i]!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
775	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  if(fieldNames[i]  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  if(fieldNames[i]  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  if(fieldNames[i]  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
776	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  ObjectConstructor  constructor  =  fieldNames[i];  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  ObjectConstructor  constructor  =  fieldNames[i];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  ObjectConstructor  constructor  =  fieldNames[i];	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
777	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  field  [FE]          ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  field	93	None	add
778	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  ObjectConstructor  constructor  =  fieldNames[i];  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  ObjectConstructor  constructor  =  fieldNames[i];  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  ObjectConstructor  constructor  =  fieldNames[i];	  	non-compiled	[CE]  illegal  start  of  expression	93	None	add
779	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure    [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    raw    ==    null?    null    :    result;    Field[]  fieldNames  =  field.getFieldNames();  if(fieldNames  ==  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol  field	93	None	add
780	[BUG]  [BUGGY]  return  result  ==  null?  null  :  replaced.getFields();  [CE]  cannot  find  symbol  replaced  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  replaced.getFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  replaced.getFields();	  return    result    ==    null?    null    :    boundFields.getFields();    	non-compiled	[CE]  cannot  find  symbol  replaced	58	None	replace
781	[BUG]  [BUGGY]  return  fieldNames.getAnnotationType();  [CE]  cannot  find  symbol  fieldNames  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames.getAnnotationType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames.getAnnotationType();	  return    raw.getAnnotationType();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	73	None	replace
782	[BUG]  [BUGGY]  return  raw!=  null?  boundFields.size()  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  boundFields.size()  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  boundFields.size()  :  Collections.emptyMap();	  return    result!=    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundFields	79	None	replace
783	[BUG]  [BUGGY]  return  raw!=  null?  type  :  Collections.emptyMap();  [CE]  incompatible  types  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  type  :  Collections.emptyMap();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  type  :  Collections.emptyMap();	  return    result!=    null?    raw    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	79	None	replace
784	[BUG]  [BUGGY]  return  returnedFields  ==  null?  boundFields.get(removed):  result;  [CE]  cannot  find  symbol  returnedFields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returnedFields  ==  null?  boundFields.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returnedFields  ==  null?  boundFields.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  returnedFields	118	None	replace
785	[BUG]  [BUGGY]  return  replaced  ==  null?  boundFields.get(removed):  result;  [CE]  cannot  find  symbol  replaced  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  replaced  ==  null?  boundFields.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  replaced  ==  null?  boundFields.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  replaced	118	None	replace
786	[BUG]  [BUGGY]  return  fieldNames  ==  null?  fieldNames.get(removed):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames  ==  null?  fieldNames.get(removed):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames  ==  null?  fieldNames.get(removed):  result;	  return    boundFields    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	118	None	replace
787	[BUG]  [BUGGY]  return  raw  ==  null?  fieldNames  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  fieldNames  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw  ==  null?  fieldNames  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  fieldNames  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    fieldNames    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	47	None	replace
788	[BUG]  [BUGGY]  return  result  ==  null?  boundField  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  boundField  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  boundField  :  new  HashMap  <  String,  BoundField>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundField  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    fieldNames    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  boundField	51	None	replace
789	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  field.getName();  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  field.getName();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  field.getName();	  return    result    ==    null?    null    :    result.getName();    	non-compiled	[CE]  ';'  expected	146	None	replace
790	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.toString();  [CE]  cannot  find  symbol  boundFields  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.toString();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields.toString();	  return    result    ==    null?    null    :    result.toString();    	non-compiled	[CE]  cannot  find  symbol  boundFields	147	None	replace
791	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  BoundField[result.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  BoundField[result.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  BoundField[result.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[result.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	4	None	replace
792	[BUG]  [BUGGY]  return  boundFields  ==  null?  fieldType  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  boundFields  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  fieldType  :  new  HashMap  <  Field,  Field>();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  fieldType  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    fieldType    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  boundFields	49	None	replace
793	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  boundFields);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result,  boundFields);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  boundFields);	  return    result    ==    null?    null    :    result.fields;    	non-compiled	[CE]  ';'  expected	34	None	replace
794	[BUG]  [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  boundField  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundField.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundField	21	None	replace
795	[BUG]  [BUGGY]  Field[]  fields  =  row.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  row  [FE]                              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  row.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  row.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields    ==    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  row	21	None	replace
796	[BUG]  [BUGGY]  return  fieldNames.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    raw.getNativeType(JSTypeNative.OBJECT_TYPE);    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	96	None	replace
797	[BUG]  [BUGGY]  return  boundField.cloneTree();  [CE]  cannot  find  symbol  boundField  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundField.cloneTree();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundField.cloneTree();	  return    replaced;    	non-compiled	[CE]  cannot  find  symbol  boundField	132	None	replace
798	[BUG]  [BUGGY]  return  boundField.clone();  [CE]  cannot  find  symbol  boundField  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundField.clone();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundField.clone();	  return    replaced;    	non-compiled	[CE]  cannot  find  symbol  boundField	132	None	replace
799	[BUG]  [BUGGY]  return  boundField.narrowBy(raw);  [CE]  cannot  find  symbol  boundField  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundField.narrowBy(raw);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundField.narrowBy(raw);	  return    replaced;    	non-compiled	[CE]  cannot  find  symbol  boundField	132	None	replace
800	[BUG]  [BUGGY]  result  ==  null?  null  :  result.getAnnotation(JSON_NAME);  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  ==  null?  null  :  result.getAnnotation(JSON_NAME);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  ==  null?  null  :  result.getAnnotation(JSON_NAME);	  return    result    ==    null?    null    :    result;    result    ==    null?    null    :    result;    	non-compiled	[CE]  not  a  statement	13	None	replace
801	[BUG]  [BUGGY]  return  fieldNames.getDeclaredType();  [CE]  cannot  find  symbol  fieldNames  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames.getDeclaredType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames.getDeclaredType();	  return    raw.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	70	None	replace
802	[BUG]  [BUGGY]  return  result.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result.getDeclaredType();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result.getDeclaredType();	  return    raw.getDeclaredType();    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
803	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.fields();  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields.fields();	  return    result    ==    null?    null    :    result.fields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	60	None	replace
804	[BUG]  [BUGGY]  return  fields  ==  null?  null  :  fields.fields();  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fields  ==  null?  null  :  fields.fields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fields  ==  null?  null  :  fields.fields();	  return    result    ==    null?    null    :    result.fields();    	non-compiled	[CE]  cannot  find  symbol  fields	60	None	replace
805	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.getDeclaredFields(fields);  [CE]  cannot  find  symbol  fields  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.getDeclaredFields(fields);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.getDeclaredFields(fields);	  return    result    ==    null?    null    :    result.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  fields	37	None	replace
806	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  BoundField[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundField.toArray(new  BoundField[fields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundField.toArray(new  BoundField[fields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    BoundField[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  fields	88	None	replace
807	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Class[boundFields.size()  ]);  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  boundFields.toArray(new  Class[boundFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.toArray(new  Class[boundFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Class[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundFields	141	None	replace
808	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[removedFields.size()  ]);  [CE]  cannot  find  symbol  removedFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[removedFields.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class[removedFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    Class[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  removedFields	141	None	replace
809	[BUG]  [BUGGY]  return  returned!=  null?  null  :  returned;  [CE]  cannot  find  symbol  returned  [FE]        NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned!=  null?  null  :  returned;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned!=  null?  null  :  returned;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  cannot  find  symbol  returned	92	None	replace
810	[BUG]  [BUGGY]  return  previous!=  null?  null  :  raw;  [CE]  cannot  find  symbol  previous  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  previous!=  null?  null  :  raw;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  previous!=  null?  null  :  raw;	  return    boundFields!=    null?    null    :    boundFields;    	non-compiled	[CE]  cannot  find  symbol  previous	92	None	replace
811	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.values());  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.values());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.values());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(boundFields.size());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
812	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields,  field.size());  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields,  field.size());  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields,  field.size());	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    new    ObjectConstructor    <    ComparisonFailure>(boundFields.size());    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
813	[BUG]  [BUGGY]  Field[]  fields  =  row.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  row  [FE]                          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  row.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  row.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  row	20	None	replace
814	[BUG]  [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  boundField  [FE]                            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  Field[]  fields  =  boundField.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  boundField.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	  Field[]    fields    =    field.getFields();    if(fields!=    null    ||    fields.length    ==    0)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  cannot  find  symbol  boundField	20	None	replace
815	[BUG]  [BUGGY]  if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]              NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(result!=  null)  {  return  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
816	[BUG]  [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " "));  }	  return    result!=    null?    null    :    result;    if(result!=    null)    {    result    =    new    BoundField[fieldNames.size()    ];    for(int    i    =    0;    i    <    fieldNames.size();    ++i)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	122	None	replace
817	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[retrieved.size()  ]);  [CE]  cannot  find  symbol  retrieved  [FE]                  ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[retrieved.size()  ]);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  TypeToken[retrieved.size()  ]);	  return    result    ==    null?    null    :    result.toArray(new    TypeToken[replacements.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  retrieved	90	None	replace
818	[BUG]  [BUGGY]  return  result!=  null?  fields.get(raw):  field;  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  fields.get(raw):  field;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fields.get(raw):  field;	  return    result!=    null?    fieldNames.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fields	43	None	replace
819	[BUG]  [BUGGY]  return  raw!=  null?  fields.get(raw):  result;  [CE]  cannot  find  symbol  fields  [FE]                        ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  raw!=  null?  fields.get(raw):  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw!=  null?  fields.get(raw):  result;	  return    result!=    null?    fieldNames.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fields	43	None	replace
820	[BUG]  [BUGGY]  return  fieldType.getDeclaredFields();  [CE]  cannot  find  symbol  fieldType  [FE]                    ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldType.getDeclaredFields();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldType.getDeclaredFields();	  return    raw.getDeclaredFields();    	non-compiled	[CE]  cannot  find  symbol  fieldType	72	None	replace
821	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Result  <  null? "null "  :  result;  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  Result  <  null? "null "  :  result;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  Result  <  null? "null "  :  result;	  return    result    ==    null?    null    :    result;    Result    <    null?    null    :    result;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
822	[BUG]  [BUGGY]  return  fieldNames!=  null?  null  :  fieldNames;  Field[]  fieldNames  =  field.getFieldNames();  [CE]  cannot  find  symbol  fieldNames  [FE]          NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  fieldNames!=  null?  null  :  fieldNames;  Field[]  fieldNames  =  field.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  fieldNames!=  null?  null  :  fieldNames;  Field[]  fieldNames  =  field.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	110	None	replace
823	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.fields;  Field[]  fieldNames  =  field.getFieldNames();  [CE]  cannot  find  symbol  fields  [FE]            NullPointerException      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result!=  null?  null  :  result.fields;  Field[]  fieldNames  =  field.getFieldNames();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.fields;  Field[]  fieldNames  =  field.getFieldNames();	  return    result!=    null?    null    :    result;    Field[]    fieldNames    =    field.getFieldNames();    	non-compiled	[CE]  cannot  find  symbol  fields	110	None	replace
824	[BUG]  [BUGGY]  return  returned.type;  [CE]  cannot  find  symbol  returned  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  returned.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  returned.type;	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  returned	68	None	replace
825	[BUG]  [BUGGY]  return  original.type;  [CE]  cannot  find  symbol  original  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  original.type;  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  original.type;	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  original	68	None	replace
826	[BUG]  [BUGGY]  return  boundFields.values();  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  boundFields.values();  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields.values();	  return    raw.type;    	non-compiled	[CE]  cannot  find  symbol  boundFields	68	None	replace
827	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.values();  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.values();  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.values();  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.get(replacement);    	non-compiled	[CE]  incompatible  types	83	None	replace
828	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.value;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.value;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.value;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.get(replacement);    	non-compiled	[CE]  cannot  find  symbol  value	83	None	replace
829	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  fieldNames.get(replacement);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  fieldNames.get(replacement);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  fieldNames.get(replacement);	  return    result    ==    null?    null    :    result;    ObjectConstructor    <    ComparisonFailure>    result    =    boundFields.get(replacement);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
830	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.sort();  Collections.sort(fields);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }      [BUGGY]  return  result  ==  null?  null  :  result.sort();  Collections.sort(fields);  [BUGGY]      }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.sort();  Collections.sort(fields);	  return    result    ==    null?    null    :    result;    Collections.sort(fields);    result    =    Collections.emptyList();    	non-compiled	[CE]  cannot  find  symbol	150	None	replace
