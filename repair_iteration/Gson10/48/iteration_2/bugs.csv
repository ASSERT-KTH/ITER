bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(raw);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(raw);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(raw);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
2	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(fields);  [CE]  cannot  find  symbol  fields  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(fields);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(fields);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  fields	2	None	replace
3	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(result);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(result);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(result);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
4	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[result.size()  ]);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[result.size()  ]);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[result.size()  ]);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
5	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[remainingFields.size()  ]);  [CE]  cannot  find  symbol  remainingFields  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[remainingFields.size()  ]);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[remainingFields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  remainingFields	2	None	replace
6	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  raw.values();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw  ==  null?  null  :  raw.values();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  raw.values();	  return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
7	[BUG]  [BUGGY]  Return  result  ==  null?  null  :  result.values();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  Return  result  ==  null?  null  :  result.values();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Return  result  ==  null?  null  :  result.values();	  return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  ';'  expected	14	None	replace
8	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.values();  [CE]  incompatible  types  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result.values();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.values();	  return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  incompatible  types	14	None	replace
9	[BUG]  [BUGGY]  return  result  ==  null?  fields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fields  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fields  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields  :  Collections.emptyMap();	  return    result    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fields	15	None	replace
10	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldNames  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldNames  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames  :  Collections.emptyMap();	  return    result    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	15	None	replace
11	[BUG]  [BUGGY]  return  result  ==  null?  raw  :  Collections.emptyMap();  [CE]  incompatible  types  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  raw  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw  :  Collections.emptyMap();	  return    result    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	15	None	replace
12	[BUG]  [BUGGY]  return  result  ==  null?  fieldTypes  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldTypes  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldTypes  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldTypes  :  Collections.emptyMap();	  return    result    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	15	None	replace
13	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  result  ==  null?  null  :  result;  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  result  ==  null?  null  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    result  ==  null?  null  :  result;	  	non-compiled	[CE]  not  a  statement	3	None	add
14	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Result  <  null?  null  :  result;  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  Result  <  null?  null  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    Result  <  null?  null  :  result;	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
15	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  result  ==  null?  null  :  result.getRawType();  [CE]  not  a  statement  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  result  ==  null?  null  :  result.getRawType();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    result  ==  null?  null  :  result.getRawType();	  	non-compiled	[CE]  not  a  statement	3	None	add
16	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fields  =  field.getFields();  [CE]  cannot  find  symbol  field  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fields  =  field.getFields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    Field[]  fields  =  field.getFields();	  	non-compiled	[CE]  cannot  find  symbol  field	3	None	add
17	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  result  ==  null?  null  :  result.getGenericSuperclass();  [CE]  not  a  statement  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  result  ==  null?  null  :  result.getGenericSuperclass();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    result  ==  null?  null  :  result.getGenericSuperclass();	  	non-compiled	[CE]  not  a  statement	3	None	add
18	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fieldNames  =  type.getFieldNames();  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  Field[]  fieldNames  =  type.getFieldNames();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    Field[]  fieldNames  =  type.getFieldNames();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
19	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fields);  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fields);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    Collections.sort(fields);	  	non-compiled	[CE]  cannot  find  symbol  fields	3	None	add
20	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields!=  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  cannot  find  symbol  field	9	None	replace
21	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  field  [FE]                        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null  ||  fields.length  ==  0)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  cannot  find  symbol  field	9	None	replace
22	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  return  fields[i];  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
23	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericSuperclass();  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
24	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  [CE]  cannot  find  symbol  field  [FE]                              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  Field[]  fields  =  field.getFields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();	      	non-compiled	[CE]  cannot  find  symbol  field	9	None	replace
25	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  i++)  {  result[i]  =  field.getGenericSuperclass();  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
26	[BUG]  [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	Field[]  fields  =  field.getFields();  if(fields  ==  null)  {  for(int  i  =  0;  i  <  fields.length;  ++i)  {  result[i]  =  field.getGenericType();  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
27	[BUG]  [BUGGY]  return  result  ==  null?  fields[0]  :  result;  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fields[0]  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields[0]  :  result;	  return    result    ==    null?    boundFields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fields	5	None	replace
28	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames[0]  :  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldNames[0]  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames[0]  :  result;	  return    result    ==    null?    boundFields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	5	None	replace
29	[BUG]  [BUGGY]  return  result  ==  null?  fieldTypes[0]  :  result;  [CE]  cannot  find  symbol  fieldTypes  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldTypes[0]  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldTypes[0]  :  result;	  return    result    ==    null?    boundFields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	5	None	replace
30	[BUG]  [BUGGY]  return  result  ==  null?  raw[0]  :  result;  [CE]  array  required,  but  Class<CAP#1>  found  [FE]                    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  raw[0]  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw[0]  :  result;	  return    result    ==    null?    boundFields[0]    :    result;    	non-compiled	[CE]  array  required,  but  Class<CAP#1>  found	5	None	replace
31	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundFields.get(raw):  result;  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  boundFields  ==  null?  boundFields.get(raw):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundFields.get(raw):  result;	  return    result    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	7	None	replace
32	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundFields.get(i):  result;  [CE]  cannot  find  symbol  boundFields  [FE]                    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  boundFields  ==  null?  boundFields.get(i):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundFields.get(i):  result;	  return    result    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	7	None	replace
33	[BUG]  [BUGGY]  return  result  ==  null?  boundFields.get(i):  result;  [CE]  cannot  find  symbol  i  [FE]                      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  boundFields.get(i):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  boundFields.get(i):  result;	  return    result    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  i	7	None	replace
34	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.fields;  [CE]  cannot  find  symbol  fields  [FE]    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.fields;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.fields;	  return    result    ==    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol  fields	4	None	replace
35	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.getValue();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.getValue();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.getValue();	  return    result    ==    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
36	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.getRawType();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.getRawType();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.getRawType();	  return    result    ==    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
37	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.getDeclaredFields();  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.getDeclaredFields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.getDeclaredFields();	  return    result!=    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
38	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames.length  :  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldNames.length  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames.length  :  result;	  return    result    ==    null?    boundFields.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	8	None	replace
39	[BUG]  [BUGGY]  return  result  ==  null?  field.length  :  result;  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  field.length  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  field.length  :  result;	  return    result    ==    null?    boundFields.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  field	8	None	replace
40	[BUG]  [BUGGY]  return  result  ==  null?  fields.length  :  result;  [CE]  cannot  find  symbol  fields  [FE]                        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fields.length  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields.length  :  result;	  return    result    ==    null?    boundFields.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  fields	8	None	replace
41	[BUG]  [BUGGY]  return  result  ==  null?  raw.length  :  result;  [CE]  cannot  find  symbol  length  [FE]                          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  raw.length  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw.length  :  result;	  return    result    ==    null?    boundFields.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  length	8	None	replace
42	[BUG]  [BUGGY]  return  result!=  null?  fields.get(raw):  result;  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  fields.get(raw):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fields.get(raw):  result;	  return    result!=    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fields	19	None	replace
43	[BUG]  [BUGGY]  return  result!=  null?  fieldNames.get(raw):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  fieldNames.get(raw):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fieldNames.get(raw):  result;	  return    result!=    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	19	None	replace
44	[BUG]  [BUGGY]  return  result!=  null?  field.get(raw):  result;  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  field.get(raw):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  field.get(raw):  result;	  return    result!=    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  field	19	None	replace
45	[BUG]  [BUGGY]  return  result  ==  null?  fields  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  fields  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fields  :  new  HashMap  <  Field,  Field>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  fields	17	None	replace
46	[BUG]  [BUGGY]  return  result  ==  null?  field  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  field  :  new  HashMap  <  Field,  Field>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  field  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  field	17	None	replace
47	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  fieldNames  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldNames  :  new  HashMap  <  Field,  Field>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	17	None	replace
48	[BUG]  [BUGGY]  return  result  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  new  HashMap  <  Field,  Field>()  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
49	[BUG]  [BUGGY]  return  result  ==  null?  fieldType  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  fieldType  [FE]                    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldType  :  new  HashMap  <  Field,  Field>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldType  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  fieldType	17	None	replace
50	[BUG]  [BUGGY]  return  result  ==  null?  fields  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fields  :  new  HashMap  <  String,  BoundField>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  fields	18	None	replace
51	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  fieldNames  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldNames  :  new  HashMap  <  String,  BoundField>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	18	None	replace
52	[BUG]  [BUGGY]  return  result  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  new  HashMap  <  String,  BoundField>()  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
53	[BUG]  [BUGGY]  return  result  ==  null?  raw  :  new  HashMap  <  String,  BoundField>();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  raw  :  new  HashMap  <  String,  BoundField>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw  :  new  HashMap  <  String,  BoundField>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    String,    BoundField>();    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
54	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  result!=  null?  null  :  result;  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  result!=  null?  null  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    result!=  null?  null  :  result;	  	non-compiled	[CE]  not  a  statement	11	None	add
55	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  result  ==  null?  null  :  result;  [CE]  not  a  statement  [FE]      NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  result  ==  null?  null  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    result  ==  null?  null  :  result;	  	non-compiled	[CE]  not  a  statement	11	None	add
56	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  result!=  null?  null  :  result.getRawType();  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  result!=  null?  null  :  result.getRawType();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    result!=  null?  null  :  result.getRawType();	  	non-compiled	[CE]  not  a  statement	11	None	add
57	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  result  ==  null?  null  :  result.getRawType();  [CE]  not  a  statement  [FE]          NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  result  ==  null?  null  :  result.getRawType();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    result  ==  null?  null  :  result.getRawType();	  	non-compiled	[CE]  not  a  statement	11	None	add
58	[BUG]  [BUGGY]  return  result  ==  null?  null  :  boundFields.getFields();  [CE]  cannot  find  symbol  boundFields  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  boundFields.getFields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  boundFields.getFields();	  return    result    ==    null?    null    :    result.getFields();    	non-compiled	[CE]  cannot  find  symbol  boundFields	13	None	replace
59	[BUG]  [BUGGY]  return  result  ==  null?  null  :  raw.getFields();  [CE]  incompatible  types  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  raw.getFields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  raw.getFields();	  return    result    ==    null?    null    :    result.getFields();    	non-compiled	[CE]  incompatible  types	13	None	replace
60	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.fields();  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.fields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.fields();	  return    result    ==    null?    null    :    result.getFields();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
61	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  field.getFields();  [CE]  ';'  expected  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result,  field.getFields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  field.getFields();	  return    result    ==    null?    null    :    result.getFields();    	non-compiled	[CE]  ';'  expected	13	None	replace
62	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getFields();  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result.getFields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getFields();	  return    result    ==    null?    null    :    result.getFields();    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
63	[BUG]  [BUGGY]  return  previous;  [CE]  cannot  find  symbol  previous  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  previous;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  previous;	  return    boundFields;    	non-compiled	[CE]  cannot  find  symbol  previous	1	None	replace
64	[BUG]  [BUGGY]  return  type;  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  type;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  type;	  return    boundFields;    	non-compiled	[CE]  incompatible  types	1	None	replace
65	[BUG]  [BUGGY]  return  field;  [CE]  cannot  find  symbol  field  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  field;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  field;	  return    boundFields;    	non-compiled	[CE]  cannot  find  symbol  field	1	None	replace
66	[BUG]  [BUGGY]  return  first;  [CE]  cannot  find  symbol  first  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  first;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  first;	  return    boundFields;    	non-compiled	[CE]  cannot  find  symbol  first	1	None	replace
67	[BUG]  [BUGGY]  return  original;  [CE]  cannot  find  symbol  original  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  original;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  original;	  return    boundFields;    	non-compiled	[CE]  cannot  find  symbol  original	1	None	replace
68	[BUG]  [BUGGY]  return  raw.type;  [CE]  cannot  find  symbol  type  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.type;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.type;	  return    raw;    	non-compiled	[CE]  cannot  find  symbol  type	10	None	replace
69	[BUG]  [BUGGY]  return  raw.getRawType();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.getRawType();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getRawType();	  return    raw;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
70	[BUG]  [BUGGY]  return  raw.getDeclaredType();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.getDeclaredType();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getDeclaredType();	  return    raw;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
71	[BUG]  [BUGGY]  return  raw.fields;  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.fields;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.fields;	  return    raw;    	non-compiled	[CE]  cannot  find  symbol  fields	10	None	replace
72	[BUG]  [BUGGY]  return  raw.getDeclaredFields();  [CE]  incompatible  types  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.getDeclaredFields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getDeclaredFields();	  return    raw;    	non-compiled	[CE]  incompatible  types	10	None	replace
73	[BUG]  [BUGGY]  return  raw.getAnnotationType();  [CE]  getAnnotationType()  is  not  public  in  Class;  cannot  be  accessed  from  outside  package  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.getAnnotationType();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getAnnotationType();	  return    raw;    	non-compiled	[CE]  getAnnotationType()  is  not  public  in  Class;  cannot  be  accessed  from  outside  package	10	None	replace
74	[BUG]  [BUGGY]  return  result  ==  null?  fields.get(raw):  result;  [CE]  cannot  find  symbol  fields  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fields.get(raw):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields.get(raw):  result;	  return    result    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fields	6	None	replace
75	[BUG]  [BUGGY]  return  result  ==  null?  fieldNames.get(raw):  result;  [CE]  cannot  find  symbol  fieldNames  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldNames.get(raw):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldNames.get(raw):  result;	  return    result    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldNames	6	None	replace
76	[BUG]  [BUGGY]  return  result  ==  null?  field.get(raw):  result;  [CE]  cannot  find  symbol  field  [FE]                    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  field.get(raw):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  field.get(raw):  result;	  return    result    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  field	6	None	replace
77	[BUG]  [BUGGY]  return  result!=  null?  fields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fields  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  fields  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fields  :  Collections.emptyMap();	  return    result!=    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fields	16	None	replace
78	[BUG]  [BUGGY]  return  result!=  null?  fieldNames  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldNames  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  fieldNames  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fieldNames  :  Collections.emptyMap();	  return    result!=    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldNames	16	None	replace
79	[BUG]  [BUGGY]  return  result!=  null?  raw  :  Collections.emptyMap();  [CE]  incompatible  types  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  raw  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  raw  :  Collections.emptyMap();	  return    result!=    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  incompatible  types	16	None	replace
80	[BUG]  [BUGGY]  return  result!=  null?  fieldTypes  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldTypes  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  fieldTypes  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fieldTypes  :  Collections.emptyMap();	  return    result!=    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	16	None	replace
81	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
82	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator().next();  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator().next();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.iterator().next();	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
83	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    ObjectConstructor  <  ComparisonFailure>  result  =  boundFields.get(replacement);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
84	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(boundFields.size());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
85	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    ObjectConstructor  <  ComparisonFailure>  result  =  new  ObjectConstructor  <  ComparisonFailure>(fields.size());	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
86	[BUG]  [BUGGY]  return  result  ==  null?  null  :  field.getFields();  [CE]  cannot  find  symbol  field  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  field.getFields();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  field.getFields();	  return    result    ==    null?    null    :    result.getFields();    	non-compiled	[CE]  cannot  find  symbol  field	13	None	replace
87	[BUG]  [BUGGY]  return  result!=  null?  fieldFields.get(raw):  result;  [CE]  cannot  find  symbol  fieldFields  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  fieldFields.get(raw):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fieldFields.get(raw):  result;	  return    result!=    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  fieldFields	19	None	replace
88	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[replacements.size()  ]);  [CE]  cannot  find  symbol  replacements  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[replacements.size()  ]);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[replacements.size()  ]);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  replacements	2	None	replace
89	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[replacements.size()  ]);  [CE]  cannot  find  symbol  replacements  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[replacements.size()  ]);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Field[replacements.size()  ]);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  replacements	2	None	replace
90	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[replacements.size()  ]);  [CE]  cannot  find  symbol  replacements  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  TypeToken[replacements.size()  ]);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  TypeToken[replacements.size()  ]);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  replacements	2	None	replace
91	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[replacement.size()  ]);  [CE]  cannot  find  symbol  replacement  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  BoundField[replacement.size()  ]);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  BoundField[replacement.size()  ]);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  replacement	2	None	replace
92	[BUG]  [BUGGY]  return  boundFields!=  null?  null  :  boundFields;  [CE]  cannot  find  symbol  boundFields  [FE]    NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  boundFields!=  null?  null  :  boundFields;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields!=  null?  null  :  boundFields;	  return    result!=    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	12	None	replace
93	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw  ==  null?  null  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	add	return  raw  ==  null?  null  :  result;	  return    result!=    null?    null    :    result;    	compilable	  [FE]  ComparisonFailure  	12	1	replace
94	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result;  [FE]  ComparisonFailure  [FE]      NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw  ==  null?  null  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  result;	  return    result!=    null?    null    :    result;    	compilable	  [FE]  ComparisonFailure  	12	1	replace
95	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.fields;  [CE]  cannot  find  symbol  fields  [FE]        NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result.fields;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.fields;	  return    result!=    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol  fields	12	None	replace
96	[BUG]  [BUGGY]  return  raw.getNativeType(JSTypeNative.OBJECT_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.getNativeType(JSTypeNative.OBJECT_TYPE);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getNativeType(JSTypeNative.OBJECT_TYPE);	  return    raw;    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	10	None	replace
97	[BUG]  [BUGGY]  return  raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [CE]  cannot  find  symbol  JSTypeNative  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getNativeType(JSTypeNative.UNKNOWN_TYPE);	  return    raw;    	non-compiled	[CE]  cannot  find  symbol  JSTypeNative	10	None	replace
98	[BUG]  [BUGGY]  return  result  ==  null?  field  :  Collections.emptyMap();  [CE]  cannot  find  symbol  field  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  field  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  field  :  Collections.emptyMap();	  return    result    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  field	15	None	replace
99	[BUG]  [BUGGY]  return  replacement;  [CE]  cannot  find  symbol  replacement  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  replacement;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  replacement;	  return    boundFields;    	non-compiled	[CE]  cannot  find  symbol  replacement	1	None	replace
100	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName(fieldNames[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
101	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldType(fieldNames[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
102	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if  [CE]  '('  expected  [FE]                          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if	      	non-compiled	[CE]  '('  expected	9	None	replace
103	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp  [CE]  ')'  expected  [FE]                            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(comp	      	non-compiled	[CE]  ')'  expected	9	None	replace
104	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  [CE]  ')'  expected  [FE]                              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(extern	      	non-compiled	[CE]  ')'  expected	9	None	replace
105	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  [CE]  ')'  expected  [FE]                                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  i++)  {  ObjectConstructor  constructor  =  fieldNames[i];  if(ex	      	non-compiled	[CE]  ')'  expected	9	None	replace
106	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	add	throw  new  IllegalArgumentException( " ");	      	compilable	  [FE]  IllegalArgumentException  	9	9	replace
107	[BUG]  [BUGGY]  throw  new  IllegalArgumentException( " ");  [FE]  IllegalArgumentException  [FE]                                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  throw  new  IllegalArgumentException( " ");  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	throw  new  IllegalArgumentException( " ");	      	compilable	  [FE]  IllegalArgumentException  	9	9	replace
108	[BUG]  [BUGGY]  return  raw  ==  null?  null  :  result.values();  [CE]  incompatible  types  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw  ==  null?  null  :  result.values();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  null  :  result.values();	  return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  incompatible  types	14	None	replace
109	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  result!=  null?  null  :  result.getGenericSuperclass();  [CE]  not  a  statement  [FE]    NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  result!=  null?  null  :  result.getGenericSuperclass();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    result!=  null?  null  :  result.getGenericSuperclass();	  	non-compiled	[CE]  not  a  statement	11	None	add
110	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  [CE]  cannot  find  symbol  field  [FE]      NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  Field[]  fieldNames  =  field.getFieldNames();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    Field[]  fieldNames  =  field.getFieldNames();	  	non-compiled	[CE]  cannot  find  symbol  field	11	None	add
111	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  result!=  null  :  result;  [CE]  not  a  statement  [FE]        NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  result!=  null  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    result!=  null  :  result;	  	non-compiled	[CE]  not  a  statement	11	None	add
112	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.boundFields;  [CE]  cannot  find  symbol  boundFields  [FE]    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.boundFields;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.boundFields;	  return    result    ==    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	4	None	replace
113	[BUG]  [BUGGY]  return  result  ==  null?  fieldFields[0]  :  result;  [CE]  cannot  find  symbol  fieldFields  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fieldFields[0]  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fieldFields[0]  :  result;	  return    result    ==    null?    boundFields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fieldFields	5	None	replace
114	[BUG]  [BUGGY]  return  result!=  null?  fieldFields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  fieldFields  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  fieldFields  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  fieldFields  :  Collections.emptyMap();	  return    result!=    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  fieldFields	16	None	replace
115	[BUG]  [BUGGY]  return  result  ==  null?  result.length  :  result;  [CE]  cannot  find  symbol  length  [FE]                    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  result.length  :  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  result.length  :  result;	  return    result    ==    null?    boundFields.length    :    result;    	non-compiled	[CE]  cannot  find  symbol  length	8	None	replace
116	[BUG]  [BUGGY]  return  result  ==  null?  raw  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  raw  :  new  HashMap  <  Field,  Field>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  raw  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
117	[BUG]  [BUGGY]  return  raw  ==  null?  boundFields.get(raw):  result;  [CE]  cannot  find  symbol  boundFields  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw  ==  null?  boundFields.get(raw):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundFields.get(raw):  result;	  return    result    ==    null?    boundFields.get(raw):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	6	None	replace
118	[BUG]  [BUGGY]  return  boundFields  ==  null?  boundFields.get(removed):  result;  [CE]  cannot  find  symbol  boundFields  [FE]                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  boundFields  ==  null?  boundFields.get(removed):  result;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  boundFields.get(removed):  result;	  return    result    ==    null?    boundFields.get(removed):    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	7	None	replace
119	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  boundFields.get(removed);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  removed  [FE]    NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  boundFields.get(removed);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    if(result!=  null)  {  result  =  boundFields.get(removed);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  cannot  find  symbol  removed	11	None	add
120	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]      NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
121	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [CE]  illegal  start  of  expression  [FE]        NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fields.size();  ++i)  {  result[i]  =  fieldType.getGenericSuperclass();  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
122	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]          NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  for(int  i  =  0;  i  <  fieldNames.size();  ++i)  {  throw  new  IllegalArgumentException( " ");  }	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
123	[BUG]  [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }  [CE]  cannot  find  symbol  fieldNames  [FE]            NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result;  if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result!=    null?    null    :    result;    if(result!=  null)  {  result  =  new  BoundField[fieldNames.size()  ];  }	  	non-compiled	[CE]  cannot  find  symbol  fieldNames	11	None	add
124	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.toArray(boundFields);  [CE]  cannot  find  symbol  boundFields  [FE]    NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result.toArray(boundFields);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.toArray(boundFields);	  return    result!=    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol  boundFields	12	None	replace
125	[BUG]  [BUGGY]  return  result!=  null?  null  :  result.getAnnotation(JSON_NAME);  [CE]  cannot  find  symbol  JSON_NAME  [FE]      NullPointerException    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result!=  null?  null  :  result.getAnnotation(JSON_NAME);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result!=  null?  null  :  result.getAnnotation(JSON_NAME);	  return    result!=    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol  JSON_NAME	12	None	replace
126	[BUG]  [BUGGY]  return  raw.getType();  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.getType();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getType();	  return    raw;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
127	[BUG]  [BUGGY]  return  raw.getAnnotationIntrospector();  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.getAnnotationIntrospector();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getAnnotationIntrospector();	  return    raw;    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
128	[BUG]  [BUGGY]  return  raw.getAnnotation(JSON_TYPE);  [CE]  cannot  find  symbol  JSON_TYPE  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw.getAnnotation(JSON_TYPE);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw.getAnnotation(JSON_TYPE);	  return    raw;    	non-compiled	[CE]  cannot  find  symbol  JSON_TYPE	10	None	replace
129	[BUG]  [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.values();  [CE]  cannot  find  symbol  boundFields  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  boundFields  ==  null?  null  :  boundFields.values();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  boundFields  ==  null?  null  :  boundFields.values();	  return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  cannot  find  symbol  boundFields	14	None	replace
130	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result,  fieldNames.values();  [CE]  ';'  expected  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result,  fieldNames.values();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result,  fieldNames.values();	  return    result    ==    null?    null    :    result.values();    	non-compiled	[CE]  ';'  expected	14	None	replace
131	[BUG]  [BUGGY]  return  saved;  [CE]  cannot  find  symbol  saved  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  saved;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  saved;	  return    boundFields;    	non-compiled	[CE]  cannot  find  symbol  saved	1	None	replace
132	[BUG]  [BUGGY]  return  replaced;  [CE]  cannot  find  symbol  replaced  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  replaced;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  replaced;	  return    boundFields;    	non-compiled	[CE]  cannot  find  symbol  replaced	1	None	replace
133	[BUG]  [BUGGY]  if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i];  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
134	[BUG]  [BUGGY]  if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames  ==  null)  {  for(int  i  =  0;  i  <  fields.size();  ++i)  {  Field  field  =  fields[i].getField(field);  if(field!=  null)  {  throw  new  IllegalArgumentException( " ");  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
135	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i].getFieldName();  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
136	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.add(fieldNames[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
137	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [CE]  illegal  start  of  expression  [FE]                              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  return  fieldNames[i];  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
138	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [CE]  illegal  start  of  expression  [FE]                                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fields[i]  =  fieldNames[i];  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
139	[BUG]  [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [CE]  illegal  start  of  expression  [FE]                                  ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	if(fieldNames!=  null)  {  Field[]  fieldNames  =  field.getFieldNames();  for(int  i  =  0;  i  <  fieldNames.length;  ++i)  {  fieldNames.put(fieldName,  fieldNames[i]);  }	      	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
140	[BUG]  [BUGGY]  return  result  ==  null?  fields[0]  :  raw;  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  fields[0]  :  raw;  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  fields[0]  :  raw;	  return    result    ==    null?    boundFields[0]    :    result;    	non-compiled	[CE]  cannot  find  symbol  fields	5	None	replace
141	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[fields.size()  ]);  [CE]  cannot  find  symbol  fields  [FE]          ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class[fields.size()  ]);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class[fields.size()  ]);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  fields	2	None	replace
142	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(removed);  [CE]  cannot  find  symbol  removed  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(removed);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(removed);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  removed	2	None	replace
143	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <?>());  [CE]  unexpected  type  [FE]              ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Class  <?>());  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Class  <?>());	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  unexpected  type	2	None	replace
144	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[removed.size()  ]);  [CE]  cannot  find  symbol  removed  [FE]                ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toArray(new  Field[removed.size()  ]);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toArray(new  Field[removed.size()  ]);	  return    result    ==    null?    null    :    result.toArray(boundFields);    	non-compiled	[CE]  cannot  find  symbol  removed	2	None	replace
145	[BUG]  [BUGGY]  return  raw  ==  null?  boundFields  :  Collections.emptyMap();  [CE]  cannot  find  symbol  boundFields  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw  ==  null?  boundFields  :  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  boundFields  :  Collections.emptyMap();	  return    result    ==    null?    boundFields    :    Collections.emptyMap();    	non-compiled	[CE]  cannot  find  symbol  boundFields	15	None	replace
146	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.getName();  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.getName();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.getName();	  return    result    ==    null?    null    :    result;    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
147	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result.toString();  [CE]  incompatible  types  [FE]      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result.toString();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  result  ==  null?  null  :  result.toString();	  return    result    ==    null?    null    :    result;    	non-compiled	[CE]  incompatible  types	4	None	replace
148	[BUG]  [BUGGY]  return  raw  ==  null?  field  :  new  HashMap  <  Field,  Field>();  [CE]  cannot  find  symbol  field  [FE]            ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  raw  ==  null?  field  :  new  HashMap  <  Field,  Field>();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return  raw  ==  null?  field  :  new  HashMap  <  Field,  Field>();	  return    result    ==    null?    boundFields    :    new    HashMap    <    Field,    Field>();    	non-compiled	[CE]  cannot  find  symbol  field	17	None	replace
149	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fields);  result  =  Collections.emptyMap();  [CE]  cannot  find  symbol  fields  [FE]    ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fields);  result  =  Collections.emptyMap();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    Collections.sort(fields);  result  =  Collections.emptyMap();	  	non-compiled	[CE]  cannot  find  symbol  fields	3	None	add
150	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fields);  result  =  Collections.emptyList();  [CE]  cannot  find  symbol  fields  [FE]      ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(fields);  result  =  Collections.emptyList();  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    Collections.sort(fields);  result  =  Collections.emptyList();	  	non-compiled	[CE]  cannot  find  symbol  fields	3	None	add
151	[BUG]  [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(boundFields);  [CE]  cannot  find  symbol  boundFields  [FE]        ComparisonFailure    [CONTEXT]    if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +     "  declares  multiple  JSON  fields  named     "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  raw  =  type.getRawType();  }    [BUGGY]  return  result  ==  null?  null  :  result;  Collections.sort(boundFields);  [BUGGY]    }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	176	176	1	replace	return    result    ==    null?    null    :    result;    Collections.sort(boundFields);	  	non-compiled	[CE]  cannot  find  symbol  boundFields	3	None	add
