bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	56	None	replace
2	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.class.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.class.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.class.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
3	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapterPresent?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	56	None	replace
4	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
5	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter,  fieldType.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  JsonAdapter  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter,  fieldType.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter,  fieldType.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  JsonAdapter	56	None	replace
6	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
7	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructor,  fieldType,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructor,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructor,  fieldType,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	14	None	replace
8	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);  [CE]  cannot  find  symbol  annotation  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  context,  fieldType,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  annotation	14	None	replace
9	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
10	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
11	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  fieldType,  deserialize);  [CE]  cannot  find  symbol  annotation  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  fieldType,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  annotation	14	None	replace
12	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  constructor,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  constructor,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  constructor,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	14	None	replace
13	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	add	final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	compilable	  [FE]  ComparisonFailure  	34	1	replace
14	[BUG]  [BUGGY]  final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	compilable	  [FE]  ComparisonFailure  	34	1	replace
15	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	34	None	replace
16	[BUG]  [BUGGY]  final  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
17	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  else  {  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  else  {  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  else  {  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	34	None	replace
18	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  serialize,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  serialize,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  serialize,  isPrimitive);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
19	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  serialize,  deserialize);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
20	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  deserialize);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  deserialize);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
21	[BUG]  [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  fieldType,  context);  [CE]  boolean  cannot  be  dereferenced  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  fieldType,  context);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  fieldType,  context);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	7	None	replace
22	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  context,  serialize);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  context,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  context,  serialize);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
23	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serializedName,  isPrimitive);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serializedName,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serializedName,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  serializedName	49	None	replace
24	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
25	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	49	None	replace
26	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serializedName,  isPrimitive);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serializedName,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serializedName,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  serializedName	49	None	replace
27	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  serializedName);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  serializedName);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  serializedName	49	None	replace
28	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  description);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    description);    	non-compiled	[CE]  cannot  find  symbol  description	28	None	replace
29	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serialize);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
30	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldTypePresent);  [CE]  cannot  find  symbol  fieldTypePresent  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldTypePresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldTypePresent);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fieldTypePresent	61	None	replace
31	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  mapped);  [CE]  cannot  find  symbol  mapped  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  mapped);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  mapped);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  mapped	61	None	replace
32	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getTypeAdapter(context.getRawType());  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getTypeAdapter(context.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getTypeAdapter(context.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getTypeAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
33	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getTypeAdapter(fieldType,  fieldType.getRawType());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getTypeAdapter(fieldType,  fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getTypeAdapter(fieldType,  fieldType.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getTypeAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
34	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fields.getTypeAdapter(fieldType.getRawType());  [CE]  cannot  find  symbol  fields  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fields.getTypeAdapter(fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fields.getTypeAdapter(fieldType.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getTypeAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol  fields	13	None	replace
35	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getTypeAdapter(fieldType.getRawType());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getTypeAdapter(fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getTypeAdapter(fieldType.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getTypeAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
36	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context,  fieldType.getTypeAdapter(fieldType.getRawType());  [CE]  ';'  expected  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context,  fieldType.getTypeAdapter(fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context,  fieldType.getTypeAdapter(fieldType.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getTypeAdapter(fieldType.getRawType());    	non-compiled	[CE]  ';'  expected	13	None	replace
37	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	18	None	replace
38	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  annotation  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  serialize,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  annotation	18	None	replace
39	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  deserialize);  [CE]  cannot  find  symbol  annotation  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  annotation	18	None	replace
40	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	18	None	replace
41	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructor,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructor,  fieldType,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructor,  fieldType,  serialize,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	18	None	replace
42	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  deserialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  deserialize);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
43	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  serialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  serialize);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
44	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  jsonAdapterPresent);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	24	None	replace
45	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  typeAdapter);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  typeAdapter);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	24	None	replace
46	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    description);    	non-compiled	[CE]  ';'  expected	62	None	replace
47	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    description);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	62	None	replace
48	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  description);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    description);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
49	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    description);    	non-compiled	[CE]  ';'  expected	62	None	replace
50	[BUG]  [BUGGY]  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Annotation    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
51	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Annotation    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	37	None	replace
52	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Annotation    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
53	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive,  deserialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive,  deserialize);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
54	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  context);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  context);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  context);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	40	None	replace
55	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive,  serialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive,  serialize);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
56	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  jsonAdapterPresent);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	40	None	replace
57	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  context,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  context,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  context,  isPrimitive);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
58	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  method);  [CE]  cannot  find  symbol  method  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  method);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  method);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    id);    	non-compiled	[CE]  cannot  find  symbol  method	50	None	replace
59	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  serialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)	27	None	replace
60	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)	27	None	replace
61	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  isPrimitive,  fieldType);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  isPrimitive,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  isPrimitive,  fieldType);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
62	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  mapped,  isPrimitive);  [CE]  cannot  find  symbol  mapped  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  mapped,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  mapped,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  mapped	27	None	replace
63	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean,boolean)  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean,boolean)	39	None	replace
64	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  fieldType);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	39	None	replace
65	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapterPresent.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	39	None	replace
66	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  typeAdapter  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	39	None	replace
67	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean)	39	None	replace
68	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean,boolean)	39	None	replace
69	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  context);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  context);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  context);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
70	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  context);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Gson)  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  context);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  context);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Gson)	8	None	replace
71	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	8	None	replace
72	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context,  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context,  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context,  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  ';'  expected	8	None	replace
73	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean,boolean)  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean,boolean)	3	None	replace
74	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
75	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean,boolean)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean,boolean)	3	None	replace
76	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean,boolean)  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean,boolean)	3	None	replace
77	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	3	None	replace
78	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize,  jsonAdapterPresent);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	3	None	replace
79	[BUG]  [BUGGY]  JsonAdapter  annotation  =  this.fieldType.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  fieldType  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  this.fieldType.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  this.fieldType.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    this.fieldType.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fieldType	26	None	replace
80	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  this.fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  cannot  find  symbol  fieldType  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  this.fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  this.fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    this.fieldType.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fieldType	26	None	replace
81	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor(isPrimitive);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor(isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  fieldType.getConstructor(isPrimitive);	  Constructor    <?>    constructor    =    fieldType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
82	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  field.getConstructor();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  field.getConstructor();	  Constructor    <?>    constructor    =    fieldType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
83	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.constructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  fieldType.constructor();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  fieldType.constructor();	  Constructor    <?>    constructor    =    fieldType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
84	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.constructorConstructor();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  fieldType.constructorConstructor();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  fieldType.constructorConstructor();	  Constructor    <?>    constructor    =    fieldType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
85	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.toConstructor();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  fieldType.toConstructor();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  fieldType.toConstructor();	  Constructor    <?>    constructor    =    fieldType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
86	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getReturnType();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getReturnType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getReturnType();	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
87	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getNativeType(UNKNOWN_TYPE);  [CE]  cannot  find  symbol  UNKNOWN_TYPE  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getNativeType(UNKNOWN_TYPE);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getNativeType(UNKNOWN_TYPE);	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  UNKNOWN_TYPE	19	None	replace
88	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getDeclaredType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getDeclaredType();	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
89	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getNativeType(NO_TYPE);  [CE]  cannot  find  symbol  NO_TYPE  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getNativeType(NO_TYPE);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getNativeType(NO_TYPE);	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  NO_TYPE	19	None	replace
90	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getType();  [CE]  incompatible  types  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getType();	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  incompatible  types	19	None	replace
91	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getValue();  [CE]  cannot  find  symbol  [FE]                                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getValue();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getValue();	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
92	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldValue);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldValue);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fieldValue	10	None	replace
93	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldName);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldName);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldName);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  fieldName	10	None	replace
94	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  field);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  field);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  field);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
95	[BUG]  [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(fieldType.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(fieldType.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  JsonAdapter.getAnnotation(fieldType.class);	  JsonAdapter    annotation    =    isPrimitive.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
96	[BUG]  [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(isPrimitive,  fieldType.class);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(isPrimitive,  fieldType.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  JsonAdapter.getAnnotation(isPrimitive,  fieldType.class);	  JsonAdapter    annotation    =    isPrimitive.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
97	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getSerialize());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getSerialize());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getSerialize());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
98	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType(),  deserialize);  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType(),  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType(),  deserialize);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
99	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getReturnType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
100	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaredType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
101	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getValue());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getValue());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getValue());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
102	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  jsonAdapterPresent);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	29	None	replace
103	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
104	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serializedName);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serializedName);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	29	None	replace
105	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean)	29	None	replace
106	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  typeAdapter);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  typeAdapter);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	29	None	replace
107	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	21	None	replace
108	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType;  [CE]  cannot  find  symbol  annotation  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol  annotation	16	None	replace
109	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive();	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
110	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive,  fieldType.getRawType());  [CE]  ';'  expected  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive,  fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  isPrimitive,  fieldType.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  ';'  expected	16	None	replace
111	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  jsonAdapterPresent  :  isPrimitive;  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  jsonAdapterPresent  :  isPrimitive;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  jsonAdapterPresent  :  isPrimitive;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
112	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  jsonAdapterPresent;  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  jsonAdapterPresent;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  jsonAdapterPresent;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
113	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  deserialize;  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  deserialize;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  deserialize;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
114	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getReturnType();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getReturnType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getReturnType();	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
115	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getJsonType();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getJsonType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getJsonType();	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
116	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getSerialize();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getSerialize();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getSerialize();	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
117	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getDeclaredType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getDeclaredType();	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
118	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getFunctionType();  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getFunctionType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getFunctionType();	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
119	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getElementType();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getElementType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getElementType();	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
120	[BUG]  [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  ';'  expected	30	None	replace
121	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  ';'  expected	30	None	replace
122	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter,  fieldType.class):  JsonAdapter.class;  [CE]  cannot  find  symbol  JsonAdapter  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter,  fieldType.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter,  fieldType.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  cannot  find  symbol  JsonAdapter	30	None	replace
123	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapterPresent?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	30	None	replace
124	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.valueOf(isPrimitive);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.valueOf(isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.valueOf(isPrimitive);	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
125	[BUG]  [BUGGY]  Object  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Object  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Object  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	58	None	replace
126	[BUG]  [BUGGY]  Object  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Object  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Object  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
127	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    serialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	17	None	replace
128	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructor,  fieldType,  serialize);  [CE]  cannot  find  symbol  constructor  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructor,  fieldType,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructor,  fieldType,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	17	None	replace
129	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  constructor,  serialize);  [CE]  cannot  find  symbol  constructor  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  constructor,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  constructor,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	17	None	replace
130	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  serialize);  [CE]  cannot  find  symbol  annotation  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  fieldType,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol  annotation	17	None	replace
131	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(type,  fieldType,  serialize);  [CE]  cannot  find  symbol  type  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(type,  fieldType,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(type,  fieldType,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol  type	17	None	replace
132	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize,  isPrimitive);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    serialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	17	None	replace
133	[BUG]  [BUGGY]  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  incompatible  types	45	None	replace
134	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	45	None	replace
135	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	45	None	replace
136	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapterPresent.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    serialize.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	6	None	replace
137	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  typeAdapter  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    serialize.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	6	None	replace
138	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  fields  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    serialize.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	6	None	replace
139	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
140	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	5	None	replace
141	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  jsonAdapterPresent);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  jsonAdapterPresent);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  serializedName	5	None	replace
142	[BUG]  [BUGGY]  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
143	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
144	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
145	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
146	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean,boolean)  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    serialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean,boolean)	48	None	replace
147	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name,  serialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name,  serialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    serialize);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
148	[BUG]  [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  name,  field);  [CE]  boolean  cannot  be  dereferenced  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  name,  field);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  name,  field);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	48	None	replace
149	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serializedName,  isPrimitive);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serializedName,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serializedName,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    serialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	48	None	replace
150	[BUG]  [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  name,  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  name,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  name,  fieldType);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	48	None	replace
151	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize,  jsonAdapterPresent);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    serialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	48	None	replace
152	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.getType();  [CE]  incompatible  types  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.getType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.getType();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  incompatible  types	64	None	replace
153	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.getReturnType();  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.getReturnType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.getReturnType();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
154	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.getDeclaredType();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.getDeclaredType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.getDeclaredType();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
155	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.getSerialize();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.getSerialize();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.getSerialize();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
156	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.toString();  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.toString();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.toString();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  incompatible  types	64	None	replace
157	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.getSimpleType();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.getSimpleType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.getSimpleType();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
158	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    context.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	38	None	replace
159	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    context.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	38	None	replace
160	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    context.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	38	None	replace
161	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    context.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	38	None	replace
162	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class  [CE]  ';'  expected  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    context.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	38	None	replace
163	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
164	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
165	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
166	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
167	[BUG]  [BUGGY]  JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  context  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    this.context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  context	12	None	replace
168	[BUG]  [BUGGY]  JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  context  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    this.context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  context	12	None	replace
169	[BUG]  [BUGGY]  JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);	  JsonAdapter    annotation    =    this.context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	12	None	replace
170	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)	63	None	replace
171	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    deserialize);    	non-compiled	[CE]  ';'  expected	63	None	replace
172	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    deserialize);    	non-compiled	[CE]  ';'  expected	63	None	replace
173	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  serialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    deserialize);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
174	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  context,  fieldType,  serialize);  [CE]  cannot  find  symbol  annotation  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  context,  fieldType,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  context,  fieldType,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol  annotation	54	None	replace
175	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructorConstructor,  fieldType,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    serialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	54	None	replace
176	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructor,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  constructor  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructor,  fieldType,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  constructor,  fieldType,  isPrimitive);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	54	None	replace
177	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  isPrimitive);  [CE]  no  suitable  method  found  for  getAdapter(Class<CAP#1>,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  isPrimitive);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAdapter(fieldType.getRawType());    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(Class<CAP#1>,boolean)	53	None	replace
178	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAdapter(fieldType.getRawType());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAdapter(fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAdapter(fieldType.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
179	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAdapter(context.getRawType());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAdapter(context.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getAdapter(context.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
180	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType,  fieldType.getRawType());  [CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,Class<CAP#2>)  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType,  fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType,  fieldType.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getAdapter(fieldType.getRawType());    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(TypeToken<CAP#1>,Class<CAP#2>)	53	None	replace
181	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  fieldValue);  [CE]  cannot  find  symbol  fieldValue  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  fieldValue);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  fieldValue);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol  fieldValue	53	None	replace
182	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  deserialize);  [CE]  no  suitable  method  found  for  getAdapter(Class<CAP#1>,boolean)  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAdapter(fieldType.getRawType());    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(Class<CAP#1>,boolean)	53	None	replace
183	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    jsonAdapterPresent?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	23	None	replace
184	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldPresent?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  fieldPresent  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldPresent?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldPresent?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    jsonAdapterPresent?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fieldPresent	23	None	replace
185	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  typeAdapter,  isPrimitive);  [CE]  cannot  find  symbol  typeAdapter  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  typeAdapter,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  typeAdapter,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    typeAdapter,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	55	None	replace
186	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	33	None	replace
187	[BUG]  [BUGGY]  TypeToken  <?>  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  incompatible  types  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  incompatible  types	59	None	replace
188	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	59	None	replace
189	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	59	None	replace
190	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  isPrimitive.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  isPrimitive.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  isPrimitive.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    fieldType.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	20	None	replace
191	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  isPrimitive.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  isPrimitive.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  isPrimitive.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    fieldType.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	20	None	replace
192	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    fieldType.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	20	None	replace
193	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  context.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  context.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  context.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    fieldType.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	20	None	replace
194	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    context.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	46	None	replace
195	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    context.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
196	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context,  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context,  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  context,  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    context.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  :  expected	46	None	replace
197	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    isPrimitive?    context.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
198	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType,  deserialize);	  JsonAdapter    annotation    =    isPrimitive.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	41	None	replace
199	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  incompatible  types  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    mapped    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  incompatible  types	36	None	replace
200	[BUG]  [BUGGY]  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  mapped  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    mapped    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  mapped	36	None	replace
201	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class);  [CE]  incompatible  types  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    mapped    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  incompatible  types	36	None	replace
202	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  context.getConstructor(fieldType);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
203	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType.getRawType());  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  context.getConstructor(fieldType.getRawType());	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
204	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(isPrimitive);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  context.getConstructor(isPrimitive);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
205	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor(fieldType,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  context.getConstructor(fieldType,  isPrimitive);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
206	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	22	None	replace
207	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class)-  field.getAnnotation(JsonAdapter.class);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class)-  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class)-  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	22	None	replace
208	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  name,  field);  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  name,  field);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  name,  field);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	42	None	replace
209	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  name,  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  name,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  name,  fieldType);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	42	None	replace
210	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialization,  isPrimitive);  [CE]  cannot  find  symbol  serialization  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialization,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialization,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  serialization	42	None	replace
211	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  name,  isPrimitive);  [CE]  cannot  find  symbol  typeAdapter  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  name,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  name,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	42	None	replace
212	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  serialize);  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  serialize);	  JsonAdapter    annotation    =    serialize.getAnnotation(JsonAdapter.class,    field);    	non-compiled	[CE]  cannot  find  symbol  fields	4	None	replace
213	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  field);  [CE]  cannot  find  symbol  typeAdapter  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  field);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  field);	  JsonAdapter    annotation    =    serialize.getAnnotation(JsonAdapter.class,    field);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	4	None	replace
214	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  Serialize.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  Serialize.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  Serialize.class);	  JsonAdapter    annotation    =    serialize.getAnnotation(JsonAdapter.class,    field);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
215	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean)  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType,  deserialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean)	43	None	replace
216	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean)  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean)	43	None	replace
217	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
218	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serializedName,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serializedName,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	57	None	replace
219	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name,  deserialize);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  name,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
220	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serializedName,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serializedName,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	57	None	replace
221	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  name,  deserialize);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  name,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  name,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	57	None	replace
222	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  context);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  context);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  context);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	9	None	replace
223	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	9	None	replace
224	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  isPrimitive,  serialize);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  isPrimitive,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  isPrimitive,  serialize);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
225	[BUG]  [BUGGY]  JsonAdapter  annotation  =  _context.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  _context  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  _context.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  _context.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  _context	9	None	replace
226	[BUG]  [BUGGY]  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
227	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    context.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
228	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context,  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  :  expected  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context,  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  context,  fieldType.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    context.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  :  expected	31	None	replace
229	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapterPresent?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    context.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	31	None	replace
230	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	2	None	replace
231	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  serialize,  field);  [CE]  boolean  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  serialize,  field);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  serialize,  field);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	1	None	replace
232	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldConstructor.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  fieldConstructor  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldConstructor.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldConstructor.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    constructor.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	47	None	replace
233	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  id);  [CE]  cannot  find  symbol  id  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  id);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  id);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  id	61	None	replace
234	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  ';'  expected	30	None	replace
235	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  cannot  find  symbol  typeAdapter  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  typeAdapter?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	30	None	replace
236	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  jsonAdapterPresent);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  jsonAdapterPresent);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	27	None	replace
237	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,TypeToken<CAP#1>)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive,  fieldType);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,TypeToken<CAP#1>)	27	None	replace
238	[BUG]  [BUGGY]  JsonAdapter  annotation  =  _context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  _context  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  _context.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  _context.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    this.context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  _context	12	None	replace
239	[BUG]  [BUGGY]  JsonAdapter  annotation  =  reader.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  reader  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  reader.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  reader.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    this.context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  reader	12	None	replace
240	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getLeastSupertype(fieldType.getRawType());  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getLeastSupertype(fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getLeastSupertype(fieldType.getRawType());	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
241	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.restrictByNotNullOrUndefined();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.restrictByNotNullOrUndefined();	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
242	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType(isPrimitive);  [CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType(isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawType(isPrimitive);	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  method  getRawType  in  class  TypeToken<T>  cannot  be  applied  to  given  types;	19	None	replace
243	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class)?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  incompatible  types  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class)?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class)?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  incompatible  types	22	None	replace
244	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive?  fieldType.getRawType()  :  field;  [CE]  incompatible  types  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive?  fieldType.getRawType()  :  field;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  isPrimitive?  fieldType.getRawType()  :  field;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  incompatible  types	16	None	replace
245	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive  &&  fieldType.getRawType()!=  null;  [CE]  incompatible  types  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive  &&  fieldType.getRawType()!=  null;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  isPrimitive  &&  fieldType.getRawType()!=  null;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  incompatible  types	16	None	replace
246	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive  ||  fieldType.isPrimitive();  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive  ||  fieldType.isPrimitive();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  isPrimitive  ||  fieldType.isPrimitive();	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
247	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  typeAdapter;  [CE]  cannot  find  symbol  typeAdapter  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  typeAdapter;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  typeAdapter;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	16	None	replace
248	[BUG]  [BUGGY]  JsonAdapter  annotation  =  getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
249	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  typeAdapter);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  typeAdapter);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    description);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	28	None	replace
250	[BUG]  [BUGGY]  TypeToken  <?>  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	59	None	replace
251	[BUG]  [BUGGY]  TypeToken  <?>  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	59	None	replace
252	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  methodType,  isPrimitive);  [CE]  cannot  find  symbol  methodType  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  methodType,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  methodType,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    typeAdapter,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  methodType	55	None	replace
253	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  constructorConstructor,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  constructorConstructor,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	18	None	replace
254	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(compiler,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  compiler  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(compiler,  fieldType,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(compiler,  fieldType,  serialize,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  compiler	18	None	replace
255	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  fields  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    isPrimitive.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  fields	41	None	replace
256	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	56	None	replace
257	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class;  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class;  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class;  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	34	None	replace
258	[BUG]  [BUGGY]  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	34	None	replace
259	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize? "   "  :  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,INT#1)  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize? "   "  :  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize? "   "  :  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,INT#1)	42	None	replace
260	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  serialize);  [CE]  no  suitable  method  found  for  getAdapter(Class<CAP#1>,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType(),  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    context.getAdapter(fieldType.getRawType());    	non-compiled	[CE]  no  suitable  method  found  for  getAdapter(Class<CAP#1>,boolean)	53	None	replace
261	[BUG]  [BUGGY]  Object  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Object  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Object  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	58	None	replace
262	[BUG]  [BUGGY]  Object  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Object  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Object  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	58	None	replace
263	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize?  null  :  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,Boolean)  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize?  null  :  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize?  null  :  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,Boolean)	39	None	replace
264	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize? "   "  :  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,INT#1)  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize? "   "  :  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serialize? "   "  :  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,INT#1)	39	None	replace
265	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  getTypeAdapter(fieldType):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  getTypeAdapter(fieldType):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  getTypeAdapter(fieldType):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    typeAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	25	None	replace
266	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  typeAdapter);  [CE]  cannot  find  symbol  typeAdapter  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  typeAdapter);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  typeAdapter);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	10	None	replace
267	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,String)  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  name);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  name);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    serialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,String)	48	None	replace
268	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  isPrimitive,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean,boolean)  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  isPrimitive,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  isPrimitive,  serialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    serialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean,boolean)	48	None	replace
269	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);  [CE]  boolean  cannot  be  dereferenced  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	1	None	replace
270	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  constructorConstructor,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
271	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  constructor,  fieldType,  deserialize);  [CE]  cannot  find  symbol  annotation  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  constructor,  fieldType,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(annotation,  constructor,  fieldType,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  annotation	14	None	replace
272	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  typeAdapter.getTypeAdapter(fieldType.getRawType());  [CE]  cannot  find  symbol  typeAdapter  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  typeAdapter.getTypeAdapter(fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  typeAdapter.getTypeAdapter(fieldType.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getTypeAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	13	None	replace
273	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldConstructor.getConstructor();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  fieldConstructor.getConstructor();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  fieldConstructor.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
274	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldNamingPolicy.getConstructor();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  fieldNamingPolicy.getConstructor();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  fieldNamingPolicy.getConstructor();	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
275	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class;  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
276	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
277	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
278	[BUG]  [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  context);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  context);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  context);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	2	None	replace
279	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.restrictByNotNullOrUndefined();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.restrictByNotNullOrUndefined();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.restrictByNotNullOrUndefined();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
280	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.constructType(isPrimitive?  fieldType.getRawType()  :  fieldType.getRawType());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.constructType(isPrimitive?  fieldType.getRawType()  :  fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.constructType(isPrimitive?  fieldType.getRawType()  :  fieldType.getRawType());	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
281	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.constructType(isPrimitive?  fieldType.getRawType()  :  fieldType.getRawType();  [CE]  ')'  expected  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.constructType(isPrimitive?  fieldType.getRawType()  :  fieldType.getRawType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.constructType(isPrimitive?  fieldType.getRawType()  :  fieldType.getRawType();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  ')'  expected	64	None	replace
282	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.cloneTree();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.cloneTree();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.cloneTree();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
283	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.getTypeOfThis();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  type  =  fieldType.getTypeOfThis();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.getTypeOfThis();	  TypeToken    <?>    type    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
284	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    serialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	54	None	replace
285	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  isPrimitive);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructorConstructor,  isPrimitive);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    serialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	54	None	replace
286	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructor,  fieldType,  serialize);  [CE]  cannot  find  symbol  constructor  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructor,  fieldType,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructor,  fieldType,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	17	None	replace
287	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [CE]  cannot  find  symbol  typeAdapter  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  serialize,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	3	None	replace
288	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  serialize,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
289	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnn  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnn  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnn	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	45	None	replace
290	[BUG]  [BUGGY]  TypeAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	45	None	replace
291	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    sanitize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	51	None	replace
292	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  description);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  description);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    description);    	non-compiled	[CE]  ';'  expected	62	None	replace
293	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  constructorConstructor.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    constructor.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
294	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldNamingPolicy.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldNamingPolicy.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldNamingPolicy.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    constructor.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
295	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive)?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive)?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive)?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	43	None	replace
296	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  ';'  expected	43	None	replace
297	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  value);  [CE]  cannot  find  symbol  value  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  value);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  value);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    id);    	non-compiled	[CE]  cannot  find  symbol  value	50	None	replace
298	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  incompatible  types  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    context.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  incompatible  types	31	None	replace
299	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
300	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class;  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
301	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
302	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(Json  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(Json  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(Json	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
303	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    context.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	38	None	replace
304	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive)?  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [CE]  :  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive)?  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive)?  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    deserialize);    	non-compiled	[CE]  :  expected	63	None	replace
305	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive):  field.getAnnotation(JsonAdapter.class,  serialize);  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive):  field.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  isPrimitive):  field.getAnnotation(JsonAdapter.class,  serialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    deserialize);    	non-compiled	[CE]  ';'  expected	63	None	replace
306	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	44	None	replace
307	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	44	None	replace
308	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	44	None	replace
309	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getPrimitiveType());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getPrimitiveType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getPrimitiveType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
310	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getNativeType());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getNativeType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getNativeType());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
311	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
312	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType()  +  1);  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType()  +  1);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType()  +  1);	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
313	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getValue();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getValue();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getValue();	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
314	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getRawParameterType(0);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getRawParameterType(0);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getRawParameterType(0);	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
315	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getFullType();  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getFullType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getFullType();	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
316	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.findConstructor(isPrimitive);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  fieldType.findConstructor(isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  fieldType.findConstructor(isPrimitive);	  Constructor    <?>    constructor    =    fieldType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
317	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deerialize);  [CE]  cannot  find  symbol  deerialize  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deerialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deerialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  deerialize	5	None	replace
318	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  hasPrimitive);  [CE]  cannot  find  symbol  hasPrimitive  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  hasPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  hasPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  hasPrimitive	5	None	replace
319	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  typeAdapter  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	24	None	replace
320	[BUG]  [BUGGY]  JsonAdapter  annotation  =  FieldUtils.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  FieldUtils.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  FieldUtils.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    fieldType.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	20	None	replace
321	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Annotation    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	37	None	replace
322	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Annotation    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ')'  expected	37	None	replace
323	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnno  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnno  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnno	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Annotation    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	37	None	replace
324	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  fieldType.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  fieldType.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  fieldType.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    mapped    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	36	None	replace
325	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    mapped    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	36	None	replace
326	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnno  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnno  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnno	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    mapped    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	36	None	replace
327	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialized);  [CE]  cannot  find  symbol  serialized  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialized);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialized);	  JsonAdapter    annotation    =    serialize.getAnnotation(JsonAdapter.class,    field);    	non-compiled	[CE]  cannot  find  symbol  serialized	4	None	replace
328	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  name,  isPrimitive);  [CE]  cannot  find  symbol  fields  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  name,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  name,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  fields	49	None	replace
329	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructor,  serialize);  [CE]  cannot  find  symbol  constructor  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructor,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructor,  serialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	54	None	replace
330	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	24	None	replace
331	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	33	None	replace
332	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(J	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    context.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	38	None	replace
333	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(Json  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(Json  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(Json	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    context.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	38	None	replace
334	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.findAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.findAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.findAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
335	[BUG]  [BUGGY]  JsonAdapter  annotation  =  serializer.getAnnotation(JsonAdapter.class,  context);  [CE]  cannot  find  symbol  serializer  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  serializer.getAnnotation(JsonAdapter.class,  context);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  serializer.getAnnotation(JsonAdapter.class,  context);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  serializer	2	None	replace
336	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  jsonAdapterPresent,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  jsonAdapterPresent,  isPrimitive);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	61	None	replace
337	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  description);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  description);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  description	61	None	replace
338	[BUG]  [BUGGY]  JsonAdapter  annotation  =  FieldUtils.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  FieldUtils  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  FieldUtils.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  FieldUtils.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    isPrimitive.getAnnotation(JsonAdapter.class,    fieldType);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	41	None	replace
339	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  FieldUtils.getTypeAdapter(fieldType.getRawType());  [CE]  cannot  find  symbol  FieldUtils  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  FieldUtils.getTypeAdapter(fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  FieldUtils.getTypeAdapter(fieldType.getRawType());	  TypeToken    <?>    jsonAdapterPresent    =    context.getTypeAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	13	None	replace
340	[BUG]  [BUGGY]  JsonAdapter  annotation  =  compiler.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  compiler  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  compiler.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  compiler.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    constructor.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  compiler	47	None	replace
341	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    this.fieldType.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fields	26	None	replace
342	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
343	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class)-  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class)-  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class)-  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
344	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	60	None	replace
345	[BUG]  [BUGGY]  JsonAdapter  annotation  =  this.field.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  field  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  this.field.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  this.field.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  field	9	None	replace
346	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serializer,  isPrimitive);  [CE]  cannot  find  symbol  serializer  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serializer,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serializer,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  serializer	42	None	replace
347	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  name,  isPrimitive,  deserialize);  [CE]  cannot  find  symbol  fields  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  name,  isPrimitive,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  name,  isPrimitive,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  fields	42	None	replace
348	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(structorConstructor,  fieldType,  serialize,  deserialize);  [CE]  cannot  find  symbol  structorConstructor  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(structorConstructor,  fieldType,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(structorConstructor,  fieldType,  serialize,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    fieldType,    serialize);    	non-compiled	[CE]  cannot  find  symbol  structorConstructor	17	None	replace
349	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawParameterType(0);  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawParameterType(0);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawParameterType(0);	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
350	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.toString();  [CE]  incompatible  types  [FE]                                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.toString();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.toString();	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  incompatible  types	19	None	replace
351	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.cloneTree();  [CE]  cannot  find  symbol  [FE]                                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.cloneTree();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.cloneTree();	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
352	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.constructType(fieldType.getRawType());  [CE]  cannot  find  symbol  [FE]                                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.constructType(fieldType.getRawType());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.constructType(fieldType.getRawType());	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
353	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawValue();  [CE]  cannot  find  symbol  [FE]                                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawValue();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawValue();	  TypeToken    <?>    mapped    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
354	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  fieldType.getRawType();  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  fieldType.getRawType();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  fieldType.getRawType();	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
355	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive?  fieldType.getJsonType()  :  field;  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive?  fieldType.getJsonType()  :  field;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  isPrimitive?  fieldType.getJsonType()  :  field;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
356	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  fieldType;  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  fieldType;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.isPrimitive()?  isPrimitive  :  fieldType;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
357	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.isPrimitive()?  fieldType.getRawType()  :  isPrimitive;  [CE]  cannot  find  symbol  [FE]                                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.isPrimitive()?  fieldType.getRawType()  :  isPrimitive;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.isPrimitive()?  fieldType.getRawType()  :  isPrimitive;	  TypeToken    <?>    jsonAdapterPresent    =    isPrimitive;    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
358	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialized);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialized);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  deserialized	5	None	replace
359	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  serialize,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
360	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class),  JsonAdapter.class;  [CE]  :  expected  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class),  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class),  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  :  expected	30	None	replace
361	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonObject.class):  JsonAdapter.class;  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonObject.class):  JsonAdapter.class;  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonObject.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    isPrimitive?    JsonAdapter.getAnnotation(JsonAdapter.class):    JsonAdapter.class;    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
362	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawValue());  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawValue());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawValue());	  TypeToken    <?>    jsonAdapterPresent    =    context.getAdapter(fieldType.getRawType());    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
363	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class,  serialize):  field.getAnnotation(JsonAdapter.class,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class,  serialize):  field.getAnnotation(JsonAdapter.class,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class,  serialize):  field.getAnnotation(JsonAdapter.class,  deserialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	63	None	replace
364	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  name,  deserialize);  [CE]  cannot  find  symbol  fields  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  name,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fields.getAnnotation(JsonAdapter.class,  name,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fields	57	None	replace
365	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(context,  fieldType,  serialize,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
366	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructor,  deserialize);  [CE]  cannot  find  symbol  constructor  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructor,  deserialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(fieldType,  context,  constructor,  deserialize);	  TypeToken    <?>    jsonAdapterPresent    =    getTypeAdapter(constructorConstructor,    context,    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  constructor	14	None	replace
367	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getRawValue();  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getRawValue();  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getRawValue();	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
368	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getPropertyType(property);  [CE]  cannot  find  symbol  property  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getPropertyType(property);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getPropertyType(property);	  TypeToken    <?>    jsonAdapterPresent    =    fieldType.getRawType();    	non-compiled	[CE]  cannot  find  symbol  property	15	None	replace
369	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  this.serialize);  [CE]  cannot  find  symbol  serialize  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  this.serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  this.serialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    description);    	non-compiled	[CE]  cannot  find  symbol  serialize	28	None	replace
370	[BUG]  [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
371	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(Json  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(Json  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(Json	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    mapped    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	36	None	replace
372	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapt	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    mapped    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	36	None	replace
373	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    mapped    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	36	None	replace
374	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);  [CE]  cannot  find  symbol  typeAdapter  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	1	None	replace
375	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnno  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnno  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnno	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	45	None	replace
376	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class)&&  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class)&&  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class)&&  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
377	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor(fieldNamingStrategy);  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor(fieldNamingStrategy);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  fieldType.getConstructor(fieldNamingStrategy);	  Constructor    <?>    constructor    =    fieldType.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
378	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  name);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  name);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  name);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    name,    serialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	48	None	replace
379	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	34	None	replace
380	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final    JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	34	None	replace
381	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  i);  [CE]  cannot  find  symbol  i  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  i);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  i);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    id);    	non-compiled	[CE]  cannot  find  symbol  i	50	None	replace
382	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serializedName,  isPrimitive);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serializedName,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  serializedName,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  serializedName	39	None	replace
383	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
384	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  fieldType);  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  fieldType);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive,  fieldType);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    fieldType,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
385	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnn  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnn  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnn	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken    <?>    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	59	None	replace
386	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  FieldUtils.getConstructor(fieldType.getConstructor());  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  FieldUtils.getConstructor(fieldType.getConstructor());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  FieldUtils.getConstructor(fieldType.getConstructor());	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
387	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  FieldUtils.getConstructor(context);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Constructor  <?>  constructor  =  FieldUtils.getConstructor(context);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  FieldUtils.getConstructor(context);	  Constructor    <?>    constructor    =    context.getConstructor();    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
388	[BUG]  [BUGGY]  Object  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Class<JsonAdapter>)  [FE]        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  Object  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Object  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,Class<JsonAdapter>)	58	None	replace
389	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent,  serialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent,  serialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	27	None	replace
390	[BUG]  [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	if(isPrimitive)  {  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  }	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
391	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(J	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor    constructor    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	35	None	replace
392	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                        ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
393	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                          ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass());  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getDeclaringClass());	  final    boolean    isPrimitive    =    Primitives.isPrimitive(fieldType.getRawType());    	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	52	None	replace
394	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldConstructor.getAnnotation(JsonAdapter.class,  serialize);  [CE]  cannot  find  symbol  fieldConstructor  [FE]                  ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldConstructor.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldConstructor.getAnnotation(JsonAdapter.class,  serialize);	  JsonAdapter    annotation    =    serialize.getAnnotation(JsonAdapter.class,    field);    	non-compiled	[CE]  cannot  find  symbol  fieldConstructor	4	None	replace
395	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldUtil.getAnnotation(JsonAdapter.class,  serialize);  [CE]  cannot  find  symbol  fieldUtil  [FE]                    ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  fieldUtil.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldUtil.getAnnotation(JsonAdapter.class,  serialize);	  JsonAdapter    annotation    =    serialize.getAnnotation(JsonAdapter.class,    field);    	non-compiled	[CE]  cannot  find  symbol  fieldUtil	4	None	replace
396	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class)&&  field.getAnnotation(JsonAdapter.class);  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            ComparisonFailure      [CONTEXT]      final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());        [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class)&&  field.getAnnotation(JsonAdapter.class);  [BUGGY]      TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({     "unchecked     ",       "rawtypes     "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class)&&  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	22	None	replace
