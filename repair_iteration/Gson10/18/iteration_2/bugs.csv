bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)	9	None	replace
2	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  serialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
3	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean,boolean)	9	None	replace
4	[BUG]  [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  field);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  field);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  field);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	9	None	replace
5	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serialize,  jsonAdapterPresent);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	9	None	replace
6	[BUG]  [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  serialize.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	9	None	replace
7	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  serialize);  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  serialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  serialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
8	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
9	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
10	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	1	None	replace
11	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  jsonAdapter  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	1	None	replace
12	[BUG]  [BUGGY]  JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  context  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  this.context.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    context.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  context	1	None	replace
13	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getTypeAdapter(fieldType.getRawType());  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getTypeAdapter(fieldType.getRawType());  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getTypeAdapter(fieldType.getRawType());	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
14	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  deserialize);	      	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
15	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getRawType();  [CE]  incompatible  types  [FE]                        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  fieldType.getRawType();  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  fieldType.getRawType();	      	non-compiled	[CE]  incompatible  types	8	None	replace
16	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive;  [CE]  incompatible  types  [FE]                          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  isPrimitive;  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  isPrimitive;	      	non-compiled	[CE]  incompatible  types	8	None	replace
17	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  serialize);	      	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
18	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  fieldType,  deserialize);	      	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
19	[BUG]  [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType();  [CE]  incompatible  types  [FE]                                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  mapped  =  fieldType.getRawType();  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  mapped  =  fieldType.getRawType();	      	non-compiled	[CE]  incompatible  types	8	None	replace
20	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
21	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	4	None	replace
22	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  ';'  expected	4	None	replace
23	[BUG]  [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  jsonAdapterPresent?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  jsonAdapterPresent?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	4	None	replace
24	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive);  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  isPrimitive);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
25	[BUG]  [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  typeAdapter  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  typeAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	5	None	replace
26	[BUG]  [BUGGY]  JsonAdapter  annotation  =  this.fieldType.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  fieldType  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  this.fieldType.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  this.fieldType.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    fieldType.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  fieldType	5	None	replace
27	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent,  isPrimitive);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent,  isPrimitive);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  jsonAdapterPresent,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	7	None	replace
28	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  description);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  description	7	None	replace
29	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)  [FE]                      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String)	7	None	replace
30	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    jsonAdapterPresent.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
31	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.class;  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.class;	  JsonAdapter    annotation    =    jsonAdapterPresent.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
32	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class);  [CE]  boolean  cannot  be  dereferenced  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    jsonAdapterPresent.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	6	None	replace
33	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	3	None	add
34	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    final  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	3	None	add
35	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  ';'  expected	3	None	add
36	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  incompatible  types  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken  <?>  mapped  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  incompatible  types	3	None	add
37	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Annotation  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
38	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectConstructor  constructor  =  context.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  ';'  expected	3	None	add
39	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean)  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>,boolean)	2	None	replace
40	[BUG]  [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  context.getAnnotation(JsonAdapter.class,  fieldType,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
41	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  boolean  cannot  be  dereferenced  [FE]              ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	2	None	replace
42	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  isPrimitive);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean)  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  isPrimitive);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean)	2	None	replace
43	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  fieldType);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,TypeToken<CAP#1>)	4	None	replace
44	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    ObjectAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  cannot  find  symbol	3	None	add
45	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	3	None	add
46	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  context.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    jsonAdapterPresent.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
47	[BUG]  [BUGGY]  JsonAdapter  annotation  =  constructor.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  constructor  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  constructor.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  constructor.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    jsonAdapterPresent.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  constructor	6	None	replace
48	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean)  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  name,  serialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,String,boolean)	9	None	replace
49	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  isPrimitive);  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  isPrimitive);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	9	None	replace
50	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  id);  [CE]  cannot  find  symbol  id  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  id);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  id);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  id	7	None	replace
51	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  sanitize);  [CE]  cannot  find  symbol  sanitize  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  sanitize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  sanitize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  sanitize	7	None	replace
52	[BUG]  [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  [CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());	      	non-compiled	[CE]  variable  isPrimitive  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	8	None	replace
53	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType());  [CE]  incompatible  types  [FE]                      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType());  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  context.getAdapter(fieldType.getRawType());	      	non-compiled	[CE]  incompatible  types	8	None	replace
54	[BUG]  [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  serialize);  [CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  serialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  jsonAdapterPresent  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  serialize);	      	non-compiled	[CE]  method  getTypeAdapter  in  class  JsonAdapterAnnotationTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
55	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  typeAdapter,  isPrimitive);  [CE]  cannot  find  symbol  typeAdapter  [FE]          ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  typeAdapter,  isPrimitive);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  typeAdapter,  isPrimitive);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  typeAdapter	2	None	replace
56	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  JsonAdapter.getAnnotation(JsonAdapter.class):  JsonAdapter.getAnnotation(JsonAdapter.class);	  JsonAdapter    annotation    =    jsonAdapterPresent.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
57	[BUG]  [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  deserialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  field.getAnnotation(JsonAdapter.class,  serializedName,  deserialize);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    serialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	9	None	replace
58	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	3	None	add
59	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)  [FE]      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  TypeToken  <?>  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    TypeToken  <?>  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  variable  annotation  is  already  defined  in  method  createBoundField(Gson,Field,String,TypeToken<?>,boolean,boolean)	3	None	add
60	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    Object  constructor  =  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class);	  	non-compiled	[CE]  ';'  expected	3	None	add
61	[BUG]  [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                  ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  fieldType.getAnnotation(JsonAdapter.class,  jsonAdapterPresent);	  JsonAdapter    annotation    =    field.getAnnotation(JsonAdapter.class,    jsonAdapterPresent);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	7	None	replace
62	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  description);  [CE]  cannot  find  symbol  description  [FE]    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  description);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  description);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  cannot  find  symbol  description	4	None	replace
63	[BUG]  [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  deserialize);  [CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)  [FE]      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  deserialize);  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	JsonAdapter  annotation  =  isPrimitive?  field.getAnnotation(JsonAdapter.class):  field.getAnnotation(JsonAdapter.class,  deserialize);	  JsonAdapter    annotation    =    isPrimitive?    field.getAnnotation(JsonAdapter.class):    field.getAnnotation(JsonAdapter.class);    	non-compiled	[CE]  no  suitable  method  found  for  getAnnotation(Class<JsonAdapter>,boolean)	4	None	replace
64	[BUG]  [BUGGY]  TypeToken  <?>  type  =  fieldType.getRawType();  [CE]  incompatible  types  [FE]                    ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  TypeToken  <?>  type  =  fieldType.getRawType();  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	TypeToken  <?>  type  =  fieldType.getRawType();	      	non-compiled	[CE]  incompatible  types	8	None	replace
65	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor();  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  Constructor  <?>  constructor  =  fieldType.getConstructor();  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  fieldType.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
66	[BUG]  [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor();  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    final  TypeToken<?>  fieldType,  boolean  serialize,  boolean  deserialize)  {  final  boolean  isPrimitive  =  Primitives.isPrimitive(fieldType.getRawType());      [BUGGY]  Constructor  <?>  constructor  =  context.getConstructor();  [BUGGY]    TypeAdapter<?>  mapped  =  null;  if  (annotation  !=  null)  {  mapped  =  getTypeAdapter(constructorConstructor,  context,  fieldType,  annotation);  }  final  boolean  jsonAdapterPresent  =  mapped  !=  null;  if  (mapped  ==  null)  mapped  =  context.getAdapter(fieldType);  final  TypeAdapter<?>  typeAdapter  =  mapped;  return  new  ReflectiveTypeAdapterFactory.BoundField(name,  serialize,  deserialize)  {  @SuppressWarnings({   "unchecked   ",     "rawtypes   "})  //  the  type  adapter  and  field  type  always  agree  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  createBoundField  [RETURN_TYPE]  ReflectiveTypeAdapterFactory$BoundField  Gson  context  Field  field  String  name  TypeToken<?>  fieldType  boolean  serialize  boolean  deserialize  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  JsonAdapter  annotation  Excluder  excluder  JsonWriter  writer  FieldNamingStrategy  fieldNamingPolicy  ConstructorConstructor  constructorConstructor  Field  field  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  fieldType  ObjectConstructor  constructor  TypeAdapter  mapped  t  typeAdapter  JsonReader  reader  Object  fieldValue  value  Map  boundFields  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	108	108	1	replace	Constructor  <?>  constructor  =  context.getConstructor();	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
