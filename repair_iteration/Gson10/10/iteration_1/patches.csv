bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	10	9	replace
2	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	10	9	replace
3	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	10	9	replace
4	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	10	9	replace
5	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	10	9	replace
6	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	10	9	replace
7	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	10	None	replace
8	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
9	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
10	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy();  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
11	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass();  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
12	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class);  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
13	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy();  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
14	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy();  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
15	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class);  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
16	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
17	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null)  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
18	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation  ==  null)  {  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation  ==  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
19	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {  [CE]  illegal  start  of  type  [FE]        NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
20	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy!=  null)  {  [CE]  illegal  start  of  type  [FE]          NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy!=  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null  ||  fieldNamingPolicy!=  null)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
21	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {  [CE]  illegal  start  of  type  [FE]            NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
22	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  >=  null)  {  [CE]  illegal  start  of  type  [FE]              NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  >=  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
23	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  arrayNamingPolicy.translateName(f)  ==  null)  {  [CE]  illegal  start  of  type  [FE]                NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  arrayNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null  ||  arrayNamingPolicy.translateName(f)  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
24	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy  ==  null)  {  [CE]  illegal  start  of  type  [FE]                  NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  fieldNamingPolicy  ==  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null  ||  fieldNamingPolicy  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
25	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.value().length()!=  0)  {	  if(annotation    ==    null    ||    annotation.value()!=    0)    {    	compilable	  [FE]  ComparisonFailure  	5	1	replace
26	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().length()!=  0)  {	  if(annotation    ==    null    ||    annotation.value()!=    0)    {    	compilable	  [FE]  ComparisonFailure  	5	1	replace
27	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()!=  0)  {  [CE]  incomparable  types:  String  and  int  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.value()!=  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()!=  0)  {	  if(annotation    ==    null    ||    annotation.value()!=    0)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	5	None	replace
28	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()  >=  0)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value()  >=  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()  >=  0)  {	  if(annotation    ==    null    ||    annotation.value()!=    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	5	None	replace
29	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.value()!=    0)    {    	compilable	  [FE]  ComparisonFailure  	5	1	replace
30	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.value()!=    0)    {    	compilable	  [FE]  ComparisonFailure  	5	1	replace
31	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	9	None	add
32	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	9	None	add
33	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  ';'  expected	9	None	add
34	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  >=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	9	None	add
35	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	9	None	add
36	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.value().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	compilable	  [FE]  NullPointerException  	4	9	replace
37	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	compilable	  [FE]  NullPointerException  	4	9	replace
38	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	4	1	replace
39	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	compilable	  [FE]  ComparisonFailure  	4	1	replace
40	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value()  ==  0)  {  [CE]  incomparable  types:  String  and  int  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  &&  annotation.value()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value()  ==  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	4	None	replace
41	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  >=  0)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.value()  >=  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  >=  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	4	None	replace
42	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.size()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.size()  ==  0)  {	  if(annotation    ==    null    ||    annotation.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
43	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.size()!=  0)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.size()!=  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.size()!=  0)  {	  if(annotation    ==    null    ||    annotation.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
44	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotations.size()  ==  0)  {  [CE]  cannot  find  symbol  annotations  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotations.size()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotations.size()  ==  0)  {	  if(annotation    ==    null    ||    annotation.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  annotations	12	None	replace
45	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.name()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name()  ==  0)  {	  if(annotation    ==    null    ||    annotation.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
46	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.isEmpty())  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.isEmpty())  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.isEmpty())  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
47	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	compilable	  [FE]  ComparisonFailure  	11	1	replace
48	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	compilable	  [FE]  ComparisonFailure  	11	1	replace
49	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
50	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.value().isEmpty())  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	compilable	  [FE]  ComparisonFailure  	11	1	replace
51	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().isEmpty())  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	compilable	  [FE]  ComparisonFailure  	11	1	replace
52	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.length()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.length()  ==  0)  {	  if(annotation    ==    null    ||    annotation.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
53	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.length()!=  0)  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.length()!=  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.length()!=  0)  {	  if(annotation    ==    null    ||    annotation.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
54	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.isConstructor())  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.isConstructor())  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.isConstructor())  {	  if(annotation!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
55	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.type()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.type()  ==  Token.NAME)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.type()  ==  Token.NAME)  {	  if(annotation    ==    null    ||    annotation.value()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
56	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.value()))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.value()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.value()))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
57	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getSerializedName()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
58	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(value))  {  [CE]  cannot  find  symbol  value  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(value))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(value))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	non-compiled	[CE]  cannot  find  symbol  value	8	None	replace
59	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(name))  {  [CE]  cannot  find  symbol  name  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(name))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(name))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	non-compiled	[CE]  cannot  find  symbol  name	8	None	replace
60	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getSerializedName()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(f.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
61	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
62	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
63	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getValue(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
64	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name()!=  null)  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.name()!=  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name()!=  null)  {	  if(annotation    ==    null    ||    annotation.value()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
65	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()  [Delete]  0)  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value()  [Delete]  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()  [Delete]  0)  {	  if(annotation    ==    null    ||    annotation.value()!=    0)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
66	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class);  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
67	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class);  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class);  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
68	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f);  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
69	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	compilable	  [FE]  ComparisonFailure  	11	1	replace
70	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	compilable	  [FE]  ComparisonFailure  	11	1	replace
71	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getType()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getType()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getType()))  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
72	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.TranslateName(f)))  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.TranslateName(f)))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.TranslateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	9	None	add
73	[BUG]  [BUGGY]  if(annotation!=  null)  {  If(annotation!=  null)  {  [CE]  ';'  expected  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  If(annotation!=  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    If(annotation!=  null)  {	  	non-compiled	[CE]  ';'  expected	1	None	add
74	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  annotation!=  null)  {  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  annotation!=  null)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null  ||  annotation!=  null)  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
75	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  -1)  {  [CE]  incomparable  types:  String  and  int  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  -1)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()  ==  -1)  {	  if(annotation    ==    null    ||    annotation.value()    ==    0)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	3	None	replace
76	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  -1)  {  [CE]  incomparable  types:  String  and  int  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  -1)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  ==  -1)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	4	None	replace
77	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.value()))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.value()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(f.value()))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
78	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.name))  {  [CE]  cannot  find  symbol  name  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.name))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.name))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	non-compiled	[CE]  cannot  find  symbol  name	8	None	replace
79	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.class))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.class))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.class))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
80	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name()!=  0)  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.name()!=  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name()!=  0)  {	  if(annotation    ==    null    ||    annotation.value()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
81	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value()  >  0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  &&  annotation.value()  >  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value()  >  0)  {	  if(annotation!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	2	None	replace
82	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  &&  annotation.length()  >  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.length()  >  0)  {	  if(annotation!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
83	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.isEmpty())  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  &&  annotation.isEmpty())  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.isEmpty())  {	  if(annotation!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
84	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  &&  annotation.size()  >  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.size()  >  0)  {	  if(annotation!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
85	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.getClass()!=  getClass())  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>  [FE]            NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  &&  annotation.getClass()!=  getClass())  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.getClass()!=  getClass())  {	  if(annotation!=    null)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>	2	None	replace
86	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.length()  >  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.length()  >  0)  {	  if(annotation    ==    null    ||    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
87	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||   " ".equals(annotation.getClass()))  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||   " ".equals(annotation.getClass()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null  ||   " ".equals(annotation.getClass()))  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
88	[BUG]  [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  annotation!=  fieldNamingPolicy.translateName(f))  {  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null)  {  if(annotation!=  null  ||  annotation!=  fieldNamingPolicy.translateName(f))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null)    {    if(annotation!=  null  ||  annotation!=  fieldNamingPolicy.translateName(f))  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
89	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class);  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class);	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
90	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor();  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	ObjectConstructor  constructor  =  f.getConstructor();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
91	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructor();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructor();  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructor();	      	non-compiled	[CE]  illegal  start  of  type	7	None	replace
92	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serialize))  {  [CE]  cannot  find  symbol  serialize  [FE]        ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serialize))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(serialize))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	non-compiled	[CE]  cannot  find  symbol  serialize	8	None	replace
93	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	compilable	  [FE]  ComparisonFailure  	8	1	replace
94	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(serializedName))    {    	compilable	  [FE]  ComparisonFailure  	8	1	replace
95	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
96	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
97	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  >  0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]            ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.value()  >  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  >  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	4	None	replace
98	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  <  0)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]              ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.value()  <  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  <  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	4	None	replace
99	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.name()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation!=  null  ||  annotation.name()  ==  0)  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.name()  ==  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
100	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.class.isAssignableFrom(annotation.class))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.class.isAssignableFrom(annotation.class))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.class.isAssignableFrom(annotation.class))  {	  if(annotation    ==    null    ||    annotation.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
101	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.class.isAssignableFrom(annotation.getClass()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);    [BUGGY]  if(annotation  ==  null  ||  annotation.class.isAssignableFrom(annotation.getClass()))  {  [BUGGY]    String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.class.isAssignableFrom(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
