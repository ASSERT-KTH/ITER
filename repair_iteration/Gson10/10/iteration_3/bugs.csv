bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotation);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotation);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
2	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f,  annotation);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f,  annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f,  annotation);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
3	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations,  f);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations,  f);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations,  f);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
4	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
5	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations[0],  f);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations[0],  f);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations[0],  f);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
6	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(annotation);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(annotation);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
7	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations[0]);  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations[0]);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotations[0]);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
8	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.serialize()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.serialize()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.serialize()  ==  0)  {	  if(annotation    ==    null    ||    annotations.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
9	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
10	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
11	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateValue(f).equals(annotation.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateValue(f).equals(annotation.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.translateValue(f).equals(annotation.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
12	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
13	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
14	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateValue(f).equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateValue(f).equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.translateValue(f).equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
15	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
16	[BUG]  [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.isEmpty())  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  fieldNamingPolicy.isEmpty())  {	  if(annotation!=    null    &&    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
17	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.isEmpty())  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.isEmpty())  {	  if(annotation!=    null    &&    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
18	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.isEmpty()  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.isEmpty()  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.isEmpty()  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation!=    null    &&    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
19	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.getValue()))  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.getValue()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(annotation.getValue()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
20	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	compilable	  [FE]  ComparisonFailure  	70	1	replace
21	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.getClass()))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	compilable	  [FE]  ComparisonFailure  	70	1	replace
22	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.name()))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.name()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(annotation.name()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
23	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  annotation.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	compilable	  [FE]  NullPointerException  	70	9	replace
24	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(annotation.value()))  {  [FE]  NullPointerException  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	compilable	  [FE]  NullPointerException  	70	9	replace
25	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  annotation.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	compilable	  [FE]  NullPointerException  	70	9	replace
26	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(annotation.value()))  {  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	compilable	  [FE]  NullPointerException  	70	9	replace
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.equals(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	compilable	  [FE]  NullPointerException  	70	9	replace
28	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(annotation.getClass()))  {  [FE]  NullPointerException  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	compilable	  [FE]  NullPointerException  	70	9	replace
29	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
30	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {  [FE]  ComparisonFailure  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
31	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
32	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {  [FE]  ComparisonFailure  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
33	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  NullPointerException  	22	9	replace
34	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  NullPointerException  	22	9	replace
35	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
36	[BUG]  [BUGGY]  if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {  [FE]  ComparisonFailure  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
37	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  NullPointerException  	22	9	replace
38	[BUG]  [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {  [FE]  NullPointerException  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  NullPointerException  	22	9	replace
39	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
40	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {  [FE]  ComparisonFailure  [FE]                            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
41	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)  >=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.translateName(f)  >=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
42	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.value()!=  0)  {  [CE]  incomparable  types:  String  and  int  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.value()!=  0)  {	  if(annotation!=    null    &&    annotation.value()    ==    0)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	40	None	replace
43	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.value()  ==  0)  {  [CE]  incomparable  types:  String  and  int  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.value()  ==  0)  {	  if(annotation!=    null    &&    annotation.value()    ==    0)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	40	None	replace
44	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value()  >=  0)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value()  >=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value()  >=  0)  {	  if(annotation!=    null    &&    annotation.value()    ==    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	40	None	replace
45	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()  <  0)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()  <  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()  <  0)  {	  if(annotation!=    null    ||    annotation.value()    >    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	97	None	replace
46	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()  >  0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()  >  0)  {	  if(annotation!=    null    ||    annotation.value()    >    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	97	None	replace
47	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.type()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.type()  ==  Token.NAME)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.type()  ==  Token.NAME)  {	  if(annotation    ==    null    ||    annotation.type()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
48	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.type()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.type()  ==  Token.NAME)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.type()  ==  Token.NAME)  {	  if(annotation    ==    null    ||    annotation.type()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
49	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.type()!=  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.type()!=  Token.NAME)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.type()!=  Token.NAME)  {	  if(annotation    ==    null    ||    annotation.type()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
50	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.type()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.type()  ==  Token.NAME)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.type()  ==  Token.NAME)  {	  if(annotation    ==    null    ||    annotation.type()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	55	None	replace
51	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotations.type()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  annotations  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotations.type()  ==  Token.NAME)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotations.type()  ==  Token.NAME)  {	  if(annotation    ==    null    ||    annotation.type()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  annotations	55	None	replace
52	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.value().isEmpty())  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  NullPointerException  	51	9	replace
53	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().isEmpty())  {  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value().isEmpty())  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  NullPointerException  	51	9	replace
54	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  annotation.value().isEmpty())  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  NullPointerException  	51	9	replace
55	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.value().isEmpty())  {  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.value().isEmpty())  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  NullPointerException  	51	9	replace
56	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(f.getValue()))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(f.getValue()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().equals(f.getValue()))  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
57	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.value().equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  ComparisonFailure  	51	1	replace
58	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(annotation.value()))  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  ComparisonFailure  	51	1	replace
59	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  annotation.value().isEmpty())  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  NullPointerException  	51	9	replace
60	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value().isEmpty())  {  [FE]  NullPointerException  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value().isEmpty())  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  NullPointerException  	51	9	replace
61	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
62	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
63	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
64	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
65	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
66	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
67	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
68	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.length()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.length()  >  0)  {	  if(annotation!=    null    &&    annotation.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
69	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.length()  >  0)  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.length()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.length()  >  0)  {	  if(annotation!=    null    &&    annotation.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
70	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.value()  >  0)  {  [CE]  bad  operand  types  for  binary  operator  '>'  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.value()  >  0)  {	  if(annotation!=    null    &&    annotation.length()    >    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>'	82	None	replace
71	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.name().length()  >  0)  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.name().length()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.name().length()  >  0)  {	  if(annotation!=    null    &&    annotation.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	82	None	replace
72	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value()!=  0)  {  [CE]  incomparable  types:  String  and  int  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value()!=  0)  {	  if(annotation!=    null    ||    annotation.value()!=    0)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	27	None	replace
73	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.value().length()!=  0)  {	  if(annotation!=    null    ||    annotation.value()!=    0)    {    	compilable	  [FE]  NullPointerException  	27	9	replace
74	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()!=  0)  {  [FE]  NullPointerException  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value().length()!=  0)  {	  if(annotation!=    null    ||    annotation.value()!=    0)    {    	compilable	  [FE]  NullPointerException  	27	9	replace
75	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name().length()  >  0)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.name().length()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name().length()  >  0)  {	  if(annotation    ==    null    ||    annotation.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
76	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.length()  <  0)  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.length()  <  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.length()  <  0)  {	  if(annotation    ==    null    ||    annotation.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
77	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.size()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.size()  >  0)  {	  if(annotation    ==    null    ||    annotation.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
78	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    if(annotation  ==  null  ||  annotation.value().length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  type	25	None	add
79	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  type	25	None	add
80	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation!=  null  ||  annotation.value().length()!=  0)  {  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation!=  null  ||  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    if(annotation!=  null  ||  annotation.value().length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  type	25	None	add
81	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  If(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  If(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    If(annotation  ==  null  ||  annotation.value().length()!=  0)  {	  	non-compiled	[CE]  ';'  expected	25	None	add
82	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  ==  null  ||  annotation.value().length()  >>  0)  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  ==  null  ||  annotation.value().length()  >>  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    if(annotation  ==  null  ||  annotation.value().length()  >>  0)  {	  	non-compiled	[CE]  illegal  start  of  type	25	None	add
83	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  >=  null  ||  annotation.value().length()!=  0)  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  >=  null  ||  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    if(annotation  >=  null  ||  annotation.value().length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  type	25	None	add
84	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  ==  null  ||  annotation.value().length()  [Delete]  0)  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  if(annotation  ==  null  ||  annotation.value().length()  [Delete]  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    if(annotation  ==  null  ||  annotation.value().length()  [Delete]  0)  {	  	non-compiled	[CE]  ')'  expected	25	None	add
85	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().isEmpty())    {    if(annotation  ==  null  ||  annotation.value().isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  type	50	None	add
86	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation!=  null  ||  annotation.value().isEmpty())  {  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation!=  null  ||  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().isEmpty())    {    if(annotation!=  null  ||  annotation.value().isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  type	50	None	add
87	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  If(annotation  ==  null  ||  annotation.value().isEmpty())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  If(annotation  ==  null  ||  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().isEmpty())    {    If(annotation  ==  null  ||  annotation.value().isEmpty())  {	  	non-compiled	[CE]  ';'  expected	50	None	add
88	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  ==  null  ||  annot.value().isEmpty())  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  ==  null  ||  annot.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().isEmpty())    {    if(annotation  ==  null  ||  annot.value().isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  type	50	None	add
89	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  >=  null  ||  annotation.value().isEmpty())  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  >=  null  ||  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().isEmpty())    {    if(annotation  >=  null  ||  annotation.value().isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  type	50	None	add
90	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  >>  null  ||  annotation.value().isEmpty())  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  >>  null  ||  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().isEmpty())    {    if(annotation  >>  null  ||  annotation.value().isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  type	50	None	add
91	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  	non-compiled	[CE]  illegal  start  of  type	47	None	add
92	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation!=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation!=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    if(annotation!=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  	non-compiled	[CE]  illegal  start  of  type	47	None	add
93	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  If(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  If(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    If(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  	non-compiled	[CE]  ';'  expected	47	None	add
94	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation  >=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation  >=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    if(annotation  >=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  	non-compiled	[CE]  illegal  start  of  type	47	None	add
95	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation  ==  null  ||  annotation.equals(F.getAnnotation(SerializedName.class)))  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation  ==  null  ||  annotation.equals(F.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    if(annotation  ==  null  ||  annotation.equals(F.getAnnotation(SerializedName.class)))  {	  	non-compiled	[CE]  illegal  start  of  type	47	None	add
96	[BUG]  [BUGGY]  if(annotation  >=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  >=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  >=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    >=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	34	None	replace
97	[BUG]  [BUGGY]  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    >=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	34	None	replace
98	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
99	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
100	[BUG]  [BUGGY]  if(annotation!=  null  ||  serializedName.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serializedName.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serializedName.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
101	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialized.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialized.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialized.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
102	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
103	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
104	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class,  serializedName);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class,  serializedName);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class,  serializedName);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(Annotation.class);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
105	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getAnnotation(Annotation.class);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getAnnotation(Annotation.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  annotation.getAnnotation(Annotation.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(Annotation.class);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
106	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class,  SerializedName.class);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class,  SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class,  SerializedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(Annotation.class);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
107	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedField.class);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedField.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedField.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(Annotation.class);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
108	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedFunction.class);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedFunction.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedFunction.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(Annotation.class);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
109	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(f.value()))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(f.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(f.value()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
110	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  f.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	compilable	  [FE]  ComparisonFailure  	77	1	replace
111	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(annotation.value()))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	compilable	  [FE]  ComparisonFailure  	77	1	replace
112	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.value().equals(annotation.value()))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.value().equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.value().equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
113	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(f.value()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(f.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(f.value()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
114	[BUG]  [BUGGY]  if(annotation!=  null  ||  serializedName.equals(f.value()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serializedName.equals(f.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serializedName.equals(f.value()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
115	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  f.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  f.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	compilable	  [FE]  NullPointerException  	77	9	replace
116	[BUG]  [BUGGY]  if(annotation!=  null  ||  f.equals(annotation.value()))  {  [FE]  NullPointerException  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  f.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  f.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	compilable	  [FE]  NullPointerException  	77	9	replace
117	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
118	[BUG]  [BUGGY]  if(annotation  ==  null)  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null)  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null)  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
119	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
120	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
121	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.isConstructor())  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.isConstructor())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.isConstructor())  {	  if(annotation    ==    null    ||    annotation.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
122	[BUG]  [BUGGY]  if(annotation  ==  null  ||  constructor.isConstructor())  {  [CE]  cannot  find  symbol  constructor  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  constructor.isConstructor())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  constructor.isConstructor())  {	  if(annotation    ==    null    ||    annotation.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol  constructor	54	None	replace
123	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.isConstructor())  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.isConstructor())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.isConstructor())  {	  if(annotation    ==    null    ||    annotation.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
124	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.isConstructor())  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.isConstructor())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.isConstructor())  {	  if(annotation    ==    null    ||    annotation.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
125	[BUG]  [BUGGY]  if(annotation!=  null  ||  f.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  f.isConstructor())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  f.isConstructor())  {	  if(annotation    ==    null    ||    annotation.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
126	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  <  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.value().length()  <  0)  {	  if(annotation!=    null    ||    annotation.value()    <    0)    {    	compilable	  [FE]  NullPointerException  	98	9	replace
127	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  <  0)  {  [FE]  NullPointerException  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  <  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value().length()  <  0)  {	  if(annotation!=    null    ||    annotation.value()    <    0)    {    	compilable	  [FE]  NullPointerException  	98	9	replace
128	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value()  <  0)  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value()  <  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value()  <  0)  {	  if(annotation!=    null    ||    annotation.value()    <    0)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	98	None	replace
129	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    ==    null)    {    	compilable	  [FE]  NullPointerException  	19	9	replace
130	[BUG]  [BUGGY]  if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    ==    null)    {    	compilable	  [FE]  NullPointerException  	19	9	replace
131	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    ==    null)    {    	compilable	  [FE]  NullPointerException  	19	9	replace
132	[BUG]  [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {  [FE]  NullPointerException  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    ==    null)    {    	compilable	  [FE]  NullPointerException  	19	9	replace
133	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.translateName(f)  ==  null)  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
134	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName);	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
135	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serialize);	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
136	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName.class);	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
137	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  annotation.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  annotation.getAnnotation(SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  annotation.getAnnotation(SerializedName.class);	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
138	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
139	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName.value());  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName.value());  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName.value());	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
140	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  annotation.value().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	37	9	replace
141	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value().length()  ==  0)  {  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	37	9	replace
142	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  annotation.value().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	37	9	replace
143	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.value().length()  ==  0)  {  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.value().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	37	9	replace
144	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name().length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.name().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
145	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.name().length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.name().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.name().length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
146	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.size()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.size()  ==  0)  {	  if(annotation!=    null    ||    annotation.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
147	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.size()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.size()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.size()  ==  0)  {	  if(annotation!=    null    ||    annotation.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
148	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||   " ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||   " ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  NullPointerException  	87	9	replace
149	[BUG]  [BUGGY]  if(annotation!=  null  ||   " ".equals(annotation.getClass()))  {  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||   " ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||   " ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  NullPointerException  	87	9	replace
150	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||   " ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||   " ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
151	[BUG]  [BUGGY]  if(annotation  ==  null  ||   " ".equals(annotation.getClass()))  {  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||   " ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||   " ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
152	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||   "null ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||   "null ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  NullPointerException  	87	9	replace
153	[BUG]  [BUGGY]  if(annotation!=  null  ||   "null ".equals(annotation.getClass()))  {  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||   "null ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||   "null ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  NullPointerException  	87	9	replace
154	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||   "null ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||   "null ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
155	[BUG]  [BUGGY]  if(annotation  ==  null  ||   "null ".equals(annotation.getClass()))  {  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||   "null ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||   "null ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
156	[BUG]  [BUGGY]  if(annotation!=  null  ||  serializedName.equals(annotation.getClass()))  {  [CE]  cannot  find  symbol  serializedName  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serializedName.equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serializedName.equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	87	None	replace
157	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(annotation.getClass()))  {  [CE]  cannot  find  symbol  serializedName  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	87	None	replace
158	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||   ". ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||   ". ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  NullPointerException  	87	9	replace
159	[BUG]  [BUGGY]  if(annotation!=  null  ||   ". ".equals(annotation.getClass()))  {  [FE]  NullPointerException  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||   ". ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||   ". ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  NullPointerException  	87	9	replace
160	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    if(annotation!=  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  type	36	None	add
161	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  type	36	None	add
162	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  If(annotation!=  null  ||  annotation.value().length()  ==  0)  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  If(annotation!=  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    If(annotation!=  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
163	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation  >=  null  ||  annotation.value().length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation  >=  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    if(annotation  >=  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  type	36	None	add
164	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation!=  null  ||  annotation.value().length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]            NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation!=  null  ||  annotation.value().length()  >=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    if(annotation!=  null  ||  annotation.value().length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  type	36	None	add
165	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [CE]  illegal  start  of  type  [FE]              NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    if(annotation  ==  null  ||  annotation.value().length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  type	36	None	add
166	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  If(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [CE]  ';'  expected  [FE]                NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  If(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    If(annotation  ==  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	36	None	add
167	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  NullPointerException  	48	9	replace
168	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  NullPointerException  	48	9	replace
169	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  NullPointerException  	48	9	replace
170	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  NullPointerException  	48	9	replace
171	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  NullPointerException  	48	9	replace
172	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  NullPointerException  	48	9	replace
173	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(f.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  serializedName  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	48	None	replace
174	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(f.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  serialize  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol  serialize	48	None	replace
175	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.class.isAssignableFrom(annotation.class))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.class.isAssignableFrom(annotation.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.class.isAssignableFrom(annotation.class))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.class))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
176	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.class.equals(annotation.class))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.class.equals(annotation.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.class.equals(annotation.class))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.class))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
177	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isAssignableFrom(annotation.class))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isAssignableFrom(annotation.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().isAssignableFrom(annotation.class))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.class))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
178	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.isAssignableFrom(annotation.class))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.isAssignableFrom(annotation.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.isAssignableFrom(annotation.class))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.class))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
179	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
180	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation!=  null)  {  [FE]  ComparisonFailure  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
181	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  NullPointerException  	74	9	replace
182	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation!=  null)  {  [FE]  NullPointerException  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  NullPointerException  	74	9	replace
183	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
184	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation  ==  null)  {  [FE]  ComparisonFailure  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
185	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
186	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation  ==  null)  {  [FE]  ComparisonFailure  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  ComparisonFailure  	74	1	replace
187	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  annotation!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  NullPointerException  	74	9	replace
188	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation!=  null)  {  [FE]  NullPointerException  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  NullPointerException  	74	9	replace
189	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
190	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.getReturnType().equals(annotation.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.getReturnType().equals(annotation.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.getReturnType().equals(annotation.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
191	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
192	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
193	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
194	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.isReturnType()  &&  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.isReturnType()  &&  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.isReturnType()  &&  annotation.equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
195	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
196	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {	  	non-compiled	[CE]  illegal  start  of  type	69	None	add
197	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation!=  null  ||  annotation.equals(annotation.value()))  {  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation!=  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    if(annotation!=  null  ||  annotation.equals(annotation.value()))  {	  	non-compiled	[CE]  illegal  start  of  type	69	None	add
198	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  If(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  If(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    If(annotation  ==  null  ||  annotation.equals(annotation.value()))  {	  	non-compiled	[CE]  ';'  expected	69	None	add
199	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  >=  null  ||  annotation.equals(annotation.value()))  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  >=  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    if(annotation  >=  null  ||  annotation.equals(annotation.value()))  {	  	non-compiled	[CE]  illegal  start  of  type	69	None	add
200	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  >>  null  ||  annotation.equals(annotation.value()))  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  >>  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    if(annotation  >>  null  ||  annotation.equals(annotation.value()))  {	  	non-compiled	[CE]  illegal  start  of  type	69	None	add
201	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  [BUGGY]  null  ||  annotation.equals(annotation.value()))  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  [BUGGY]  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    if(annotation  [BUGGY]  null  ||  annotation.equals(annotation.value()))  {	  	non-compiled	[CE]  ')'  expected	69	None	add
202	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
203	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    if(annotation!=  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
204	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    if(annotation  ==  null  ||  annotation.value().length()!=  0)  {	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
205	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  If(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  If(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    If(annotation  ==  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  ';'  expected	38	None	add
206	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
207	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  >=  null  ||  annotation.value().length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  >=  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    if(annotation  >=  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  type	38	None	add
208	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.hasChildren())  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.hasChildren())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.hasChildren())  {	  if(annotation!=    null)    {    if(annotation    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
209	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(annotation.value()))  {  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(name))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	59	None	replace
210	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.length()!=  0)  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.length()!=  0)  {	  if(annotation    ==    null    ||    annotation.length()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
211	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.class.isAssignableFrom(annotation.getClass()))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.class.isAssignableFrom(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.class.isAssignableFrom(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
212	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.class.equals(annotation.getClass()))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.class.equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.class.equals(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
213	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialized.class.isAssignableFrom(annotation.getClass()))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialized.class.isAssignableFrom(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialized.class.isAssignableFrom(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
214	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.isAssignableFrom(annotation.getClass()))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.isAssignableFrom(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.isAssignableFrom(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
215	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isAssignableFrom(annotation.getClass()))  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isAssignableFrom(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().isAssignableFrom(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
216	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	compilable	  [FE]  ComparisonFailure  	56	1	replace
217	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.value()))  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	compilable	  [FE]  ComparisonFailure  	56	1	replace
218	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.value()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.value()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
219	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	compilable	  [FE]  NullPointerException  	56	9	replace
220	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.value()))  {  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	compilable	  [FE]  NullPointerException  	56	9	replace
221	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.value().equals(annotation.value()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.value().equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.value().equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
222	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.value()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.value()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
223	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.value()))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.value()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
224	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	30	9	replace
225	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	30	9	replace
226	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	30	9	replace
227	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	30	9	replace
228	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	30	9	replace
229	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  NullPointerException  	30	9	replace
230	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
231	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name().equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.name().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
232	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getName()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getName()))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
233	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value()  ==  -1)  {  [CE]  incomparable  types:  String  and  int  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value()  ==  -1)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value()  ==  -1)  {	  if(annotation!=    null    ||    annotation.value()    ==    -1)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	76	None	replace
234	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()!=  -1)  {  [CE]  incomparable  types:  String  and  int  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()!=  -1)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()!=  -1)  {	  if(annotation!=    null    ||    annotation.value()    ==    -1)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	76	None	replace
235	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
236	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getName()))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getName()))  {	  if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
237	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
238	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
239	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
240	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
241	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  >=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
242	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  serializedName);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  serializedName);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  serializedName);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(AnnotatedName.class);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
243	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getAnnotation(AnnotatedName.class);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getAnnotation(AnnotatedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  annotation.getAnnotation(AnnotatedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(AnnotatedName.class);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
244	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Serializable.class);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Serializable.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Serializable.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(AnnotatedName.class);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
245	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  SerializedName.class);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  SerializedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(AnnotatedName.class);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
246	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotations.getAnnotation(AnnotatedName.class);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotations.getAnnotation(AnnotatedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  annotations.getAnnotation(AnnotatedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(AnnotatedName.class);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
247	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation!=    null    ||    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
248	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation!=  fieldNamingPolicy.translateName(f))  {  [CE]  incomparable  types:  SerializedName  and  String  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation!=  fieldNamingPolicy.translateName(f))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation!=  fieldNamingPolicy.translateName(f))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    fieldNamingPolicy.translateName(f))    {    	non-compiled	[CE]  incomparable  types:  SerializedName  and  String	88	None	replace
249	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation!=  fieldNamingPolicy.translateName(f))  {  [CE]  incomparable  types:  SerializedName  and  String  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation!=  fieldNamingPolicy.translateName(f))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation!=  fieldNamingPolicy.translateName(f))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    fieldNamingPolicy.translateName(f))    {    	non-compiled	[CE]  incomparable  types:  SerializedName  and  String	88	None	replace
250	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation!=  fieldNamingPolicy.translateName(f))  {  [CE]  incomparable  types:  SerializedName  and  String  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation!=  fieldNamingPolicy.translateName(f))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation!=  fieldNamingPolicy.translateName(f))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    fieldNamingPolicy.translateName(f))    {    	non-compiled	[CE]  incomparable  types:  SerializedName  and  String	88	None	replace
251	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation!=  fieldNamingPolicy.translateName(f))  {  [CE]  incomparable  types:  SerializedName  and  String  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation!=  fieldNamingPolicy.translateName(f))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation!=  fieldNamingPolicy.translateName(f))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    fieldNamingPolicy.translateName(f))    {    	non-compiled	[CE]  incomparable  types:  SerializedName  and  String	88	None	replace
252	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation  ==  fieldNamingPolicy.translateName(f))  {  [CE]  incomparable  types:  SerializedName  and  String  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation  ==  fieldNamingPolicy.translateName(f))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation  ==  fieldNamingPolicy.translateName(f))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    fieldNamingPolicy.translateName(f))    {    	non-compiled	[CE]  incomparable  types:  SerializedName  and  String	88	None	replace
253	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {	  if(annotation    ==    null    ||    annotation.value()    >=    0)    {    	compilable	  [FE]  ComparisonFailure  	28	1	replace
254	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().length()  >=  0)  {	  if(annotation    ==    null    ||    annotation.value()    >=    0)    {    	compilable	  [FE]  ComparisonFailure  	28	1	replace
255	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(serializedName))  {  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(serializedName))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().equals(serializedName))  {	  if(annotation    ==    null    ||    annotation.value()    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	28	None	replace
256	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(f.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(f.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(f.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
257	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(f.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(f.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(f.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
258	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialized.equals(f.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialized.equals(f.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialized.equals(f.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
259	[BUG]  [BUGGY]  if(annotation!=  null  ||  serializedName.equals(f.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serializedName.equals(f.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serializedName.equals(f.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
260	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(f.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(f.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(f.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
261	[BUG]  [BUGGY]  if(annotation!=  null  ||  serialize.equals(f.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serialize.equals(f.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serialize.equals(f.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
262	[BUG]  [BUGGY]  if(annotation  ==  null  ||  SerializedName.equals(f.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  SerializedName.equals(f.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  SerializedName.equals(f.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
263	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.name()!=  null)  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.name()!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.name()!=  null)  {	  if(annotation    ==    null    ||    annotation.name()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
264	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.name()!=  null)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.name()!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.name()!=  null)  {	  if(annotation    ==    null    ||    annotation.name()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
265	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.value()!=  null)  {	  if(annotation    ==    null    ||    annotation.name()!=    null)    {    	compilable	  [FE]  ComparisonFailure  	64	1	replace
266	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()!=  null)  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()!=  null)  {	  if(annotation    ==    null    ||    annotation.name()!=    null)    {    	compilable	  [FE]  ComparisonFailure  	64	1	replace
267	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.name()!=  null)  {  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.name()!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.name()!=  null)  {	  if(annotation    ==    null    ||    annotation.name()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	64	None	replace
268	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.name()!=  null)  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.name()!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.name()!=  null)  {	  if(annotation    ==    null    ||    annotation.name()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
269	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
270	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getName(f)))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
271	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
272	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getName(f)))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
273	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
274	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
275	[BUG]  [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.equals(annotation.getName(f)))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.equals(annotation.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  fieldNamingPolicy.equals(annotation.getName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
276	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.name()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.name()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.name()  ==  0)  {	  if(annotation    ==    null    ||    annotation.name()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
277	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.name()  ==  0)  {  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.name()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.name()  ==  0)  {	  if(annotation    ==    null    ||    annotation.name()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	45	None	replace
278	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  fieldNamingPolicy!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	24	1	replace
279	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy!=  null)  {  [FE]  ComparisonFailure  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	24	1	replace
280	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  fieldNamingPolicy!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	24	1	replace
281	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy!=  null)  {  [FE]  ComparisonFailure  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	24	1	replace
282	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  fieldNamingPolicy  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  NullPointerException  	24	9	replace
283	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy  ==  null)  {  [FE]  NullPointerException  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  NullPointerException  	24	9	replace
284	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  fieldNamingPolicy  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	24	1	replace
285	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy  ==  null)  {  [FE]  ComparisonFailure  [FE]                            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	24	1	replace
286	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  fieldNamingPolicy!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	24	1	replace
287	[BUG]  [BUGGY]  if(annotation  ==  null  &&  fieldNamingPolicy!=  null)  {  [FE]  ComparisonFailure  [FE]                              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  fieldNamingPolicy!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	24	1	replace
288	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  fieldNamingPolicy!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  NullPointerException  	24	9	replace
289	[BUG]  [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy!=  null)  {  [FE]  NullPointerException  [FE]                                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  fieldNamingPolicy!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  NullPointerException  	24	9	replace
290	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getName()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
291	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getName()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
292	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getName()))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
293	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getName()))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
294	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getName()))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
295	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.getName().equals(annotation.getName()))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.getName().equals(annotation.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.getName().equals(annotation.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
296	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
297	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
298	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
299	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  >=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
300	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]            NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	1	None	add
301	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  serializedName);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
302	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  serializedName.length);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  serializedName.length);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  serializedName.length);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
303	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  serialize);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
304	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  null);  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  null);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
305	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  serializedName.class);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
306	[BUG]  [BUGGY]  String[]  alternates  =  annotation.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  annotation.getAnnotation(SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  annotation.getAnnotation(SerializedName.class);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
307	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  annot  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    ==    null    ||    annot.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol  annot	35	None	replace
308	[BUG]  [BUGGY]  if(annotation!=  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  annot  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    ==    null    ||    annot.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol  annot	35	None	replace
309	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.name()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.name()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.name()  ==  0)  {	  if(annotation!=    null    ||    annotation.name()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
310	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.class))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.class))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.class))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
311	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.class))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.class))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.class))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
312	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.class))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.class))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.class))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
313	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.class))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.class))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.class))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
314	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.type);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.type);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.type);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
315	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  null);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  null);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
316	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.name);  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.name);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.name);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
317	[BUG]  [BUGGY]  SerializedName  serializedName  =  serialize.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  SerializedName  serializedName  =  serialize.getAnnotation(SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  serialize.getAnnotation(SerializedName.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
318	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  false);  [CE]  illegal  start  of  type  [FE]                                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  false);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  false);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
319	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.value());  [CE]  illegal  start  of  type  [FE]                                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.value());  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.value());	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
320	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.getClass()!=  getClass())  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.getClass()!=  getClass())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.getClass()!=  getClass())  {	  if(annotation!=    null    &&    annotation.getClass()!=    getClass())    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>	85	None	replace
321	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.getClass()!=  getClass())  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.getClass()!=  getClass())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.getClass()!=  getClass())  {	  if(annotation!=    null    &&    annotation.getClass()!=    getClass())    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>	85	None	replace
322	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.getClass()  ==  getClass())  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.getClass()  ==  getClass())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.getClass()  ==  getClass())  {	  if(annotation!=    null    &&    annotation.getClass()!=    getClass())    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>	85	None	replace
323	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.getClass()!=  getClass())  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.getClass()!=  getClass())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.getClass()!=  getClass())  {	  if(annotation!=    null    &&    annotation.getClass()!=    getClass())    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>	85	None	replace
324	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.getClass()  >=  getClass())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.getClass()  >=  getClass())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.getClass()  >=  getClass())  {	  if(annotation!=    null    &&    annotation.getClass()!=    getClass())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	85	None	replace
325	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.getClass()!=  getClass()  ||  annotation.getClass()!=  getClass())  {  [CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.getClass()!=  getClass()  ||  annotation.getClass()!=  getClass())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.getClass()!=  getClass()  ||  annotation.getClass()!=  getClass())  {	  if(annotation!=    null    &&    annotation.getClass()!=    getClass())    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Class<CAP#2>	85	None	replace
326	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getFieldNamingPolicy();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getFieldNamingPolicy();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  annotation.getFieldNamingPolicy();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
327	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(serializedName);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(serializedName);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(serializedName);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
328	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(annotations);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(annotations);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(annotations);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
329	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(null);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(null);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getFieldNamingPolicy(null);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
330	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFunctionNamingPolicy();  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFunctionNamingPolicy();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getFunctionNamingPolicy();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
331	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.name))  {  [CE]  cannot  find  symbol  name  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.name))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.name))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	78	None	replace
332	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.name))  {  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.name))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.name))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	78	None	replace
333	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.name.equals(annotation.name))  {  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.name.equals(annotation.name))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.name.equals(annotation.name))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	78	None	replace
334	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.name))  {  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.name))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.name))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	78	None	replace
335	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(annotation);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	ObjectConstructor  constructor  =  f.getConstructor(annotation);	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
336	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  annotation.getConstructor();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  ObjectConstructor  constructor  =  annotation.getConstructor();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	ObjectConstructor  constructor  =  annotation.getConstructor();	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
337	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructorInstance(annotation);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructorInstance(annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	ObjectConstructor  constructor  =  f.getConstructorInstance(annotation);	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
338	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(annotations);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(annotations);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	ObjectConstructor  constructor  =  f.getConstructor(annotations);	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
339	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructorInstance();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructorInstance();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	ObjectConstructor  constructor  =  f.getConstructorInstance();	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
340	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getType()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
341	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getType()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
342	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getType()))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
343	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getType()))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
344	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.getType().equals(annotation.getType()))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.getType().equals(annotation.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.getType().equals(annotation.getType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
345	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getType()))  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
346	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.TranslateName(f)))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.TranslateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.TranslateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.TranslateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
347	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.TranslateName(f)))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.TranslateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.TranslateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.TranslateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
348	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serializers))  {  [CE]  cannot  find  symbol  serializers  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serializers))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(serializers))  {	  if(annotation    ==    null    ||    annotation.equals(serialize))    {    	non-compiled	[CE]  cannot  find  symbol  serializers	92	None	replace
349	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(excluder))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(excluder))  {	  if(annotation    ==    null    ||    annotation.equals(serialize))    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
350	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(excluder))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(excluder))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(excluder))  {	  if(annotation    ==    null    ||    annotation.equals(serialize))    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
351	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
352	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
353	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
354	[BUG]  [BUGGY]  if(annotation!=  null  ||  serializedName.equals(fieldNamingPolicy.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serializedName.equals(fieldNamingPolicy.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serializedName.equals(fieldNamingPolicy.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
355	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
356	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialized.equals(fieldNamingPolicy.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialized.equals(fieldNamingPolicy.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialized.equals(fieldNamingPolicy.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
357	[BUG]  [BUGGY]  if(annotation!=  null  ||  serialize.equals(fieldNamingPolicy.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serialize.equals(fieldNamingPolicy.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serialize.equals(fieldNamingPolicy.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
358	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  annotation.equals(SerializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  NullPointerException  	94	9	replace
359	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(SerializedName.class))  {  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(SerializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  NullPointerException  	94	9	replace
360	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.equals(SerializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  NullPointerException  	94	9	replace
361	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(SerializedName.class))  {  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(SerializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  NullPointerException  	94	9	replace
362	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  annotation.equals(SerializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  NullPointerException  	94	9	replace
363	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(SerializedName.class))  {  [FE]  NullPointerException  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(SerializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  NullPointerException  	94	9	replace
364	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serializedName.class))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(serializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
365	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(serializedName.class))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(serializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(serializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
366	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class)&&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(SerializedName.class)&&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  ComparisonFailure  	94	1	replace
367	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class)&&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class)&&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(SerializedName.class)&&  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  ComparisonFailure  	94	1	replace
368	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.length()  ==  0)  {	  if(annotation!=    null    ||    annotation.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
369	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  serialize  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol  serialize	4	None	replace
370	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
371	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
372	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]        NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  If(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  ';'  expected	5	None	add
373	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]          NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  >=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
374	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >>  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]            NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >>  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  >>  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	5	None	add
375	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy().getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy().getAnnotation(SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy().getAnnotation(SerializedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
376	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotation.getAnnotation(SerializedName.class));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotation.getAnnotation(SerializedName.class));  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(annotation.getAnnotation(SerializedName.class));	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
377	[BUG]  [BUGGY]  if(annotation  ==  null  ||  arrayNamingPolicy.translateName(f)  ==  null)  {  [CE]  cannot  find  symbol  arrayNamingPolicy  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  arrayNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  arrayNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    arrayNamingPolicy.translateName(f)    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  arrayNamingPolicy	23	None	replace
378	[BUG]  [BUGGY]  if(annotation  ==  null  ||  arrayNamingPolicy.translateName(f)!=  null)  {  [CE]  cannot  find  symbol  arrayNamingPolicy  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  arrayNamingPolicy.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  arrayNamingPolicy.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    arrayNamingPolicy.translateName(f)    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  arrayNamingPolicy	23	None	replace
379	[BUG]  [BUGGY]  if(annotation!=  null  ||  arrayNamingPolicy.translateName(f)  ==  null)  {  [CE]  cannot  find  symbol  arrayNamingPolicy  [FE]                        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  arrayNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  arrayNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    arrayNamingPolicy.translateName(f)    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  arrayNamingPolicy	23	None	replace
380	[BUG]  [BUGGY]  if(annotation  ==  null  &&  arrayNamingPolicy.translateName(f)  ==  null)  {  [CE]  cannot  find  symbol  arrayNamingPolicy  [FE]                          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  arrayNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  arrayNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    arrayNamingPolicy.translateName(f)    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  arrayNamingPolicy	23	None	replace
381	[BUG]  [BUGGY]  if(annotation!=  null  &&  arrayNamingPolicy.translateName(f)  ==  null)  {  [CE]  cannot  find  symbol  arrayNamingPolicy  [FE]                            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  arrayNamingPolicy.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  arrayNamingPolicy.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    arrayNamingPolicy.translateName(f)    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  arrayNamingPolicy	23	None	replace
382	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.size()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.size()  >  0)  {	  if(annotation!=    null    &&    annotation.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
383	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.size()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.size()  >  0)  {	  if(annotation!=    null    &&    annotation.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
384	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.name()  >  0)  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.name()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.name()  >  0)  {	  if(annotation!=    null    &&    annotation.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
385	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy(annotation);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy(annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy(annotation);	  FieldNamingStrategy    fieldNamingPolicy    =    getFunctionNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
386	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy().getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy().getAnnotation(SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy().getAnnotation(SerializedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    getFunctionNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
387	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy(annotations);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy(annotations);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy(annotations);	  FieldNamingStrategy    fieldNamingPolicy    =    getFunctionNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
388	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy().getFieldNames();  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy().getFieldNames();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy().getFieldNames();	  FieldNamingStrategy    fieldNamingPolicy    =    getFunctionNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
389	[BUG]  [BUGGY]  If(annotation  ==  null)  {  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  If(annotation  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	If(annotation  ==  null)  {	  if(annotation!=    null)    {    If(annotation!=    null)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
390	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy))  {  If(annotation  ==  null)  {  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy))  {  If(annotation  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy))  {  If(annotation  ==  null)  {	  if(annotation!=    null)    {    If(annotation!=    null)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
391	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.value()  ==  null)  {	  if(annotation!=    null)    {    If(annotation!=    null)    {    	compilable	  [FE]  ComparisonFailure  	73	1	replace
392	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  null)  {  [FE]  ComparisonFailure  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()  ==  null)  {	  if(annotation!=    null)    {    If(annotation!=    null)    {    	compilable	  [FE]  ComparisonFailure  	73	1	replace
393	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name().length()!=  0)  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.name().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name().length()!=  0)  {	  if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
394	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  &&  annotation.value().length()!=  0)  {	  if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    	compilable	  [FE]  NullPointerException  	26	9	replace
395	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.value().length()!=  0)  {  [FE]  NullPointerException  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.value().length()!=  0)  {	  if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    	compilable	  [FE]  NullPointerException  	26	9	replace
396	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.name()!=  0)  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.name()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.name()!=  0)  {	  if(annotation    ==    null    ||    annotation.name()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
397	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.name()!=  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.name()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.name()!=  0)  {	  if(annotation    ==    null    ||    annotation.name()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
398	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.name()!=  0)  {  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.name()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.name()!=  0)  {	  if(annotation    ==    null    ||    annotation.name()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	80	None	replace
399	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
400	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
401	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(annotation.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
402	[BUG]  [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  &&  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
403	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.isDeclaringClass()  &&  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.isDeclaringClass()  &&  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.isDeclaringClass()  &&  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
404	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serializedName.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
405	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.equals(annotation.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
406	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
407	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.size()!=  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.size()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.size()!=  0)  {	  if(annotation    ==    null    ||    annotation.size()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
408	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.size()  >=  0)  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.size()  >=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.size()  >=  0)  {	  if(annotation    ==    null    ||    annotation.size()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
409	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    serializedName.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  ComparisonFailure  	7	1	replace
410	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.translateName(f)))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    serializedName.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  ComparisonFailure  	7	1	replace
411	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    serializedName.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  ComparisonFailure  	7	1	replace
412	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateName(f)))  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    serializedName.equals(fieldNamingPolicy.translateName(f)))    {    	compilable	  [FE]  ComparisonFailure  	7	1	replace
413	[BUG]  [BUGGY]  if(annotation  ==  null  ||  method.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  method  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  method.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  method.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    serializedName.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol  method	7	None	replace
414	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  name  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    serializedName.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol  name	7	None	replace
415	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getConstructor();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getConstructor();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  annotation.getConstructor();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
416	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructor(annotation);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructor(annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructor(annotation);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
417	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  constructor.getConstructor();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  constructor.getConstructor();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  constructor.getConstructor();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
418	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  constructorConstructor.getConstructor();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  constructorConstructor.getConstructor();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  constructorConstructor.getConstructor();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
419	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructor(annotations);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructor(annotations);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructor(annotations);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
420	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  constructorConstructor;  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  constructorConstructor;  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  constructorConstructor;	  FieldNamingStrategy    fieldNamingPolicy    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
421	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
422	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serialize);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serialize);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serialize);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
423	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  SerializedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
424	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  serializedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
425	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  null);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  null);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
426	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  serializedName.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  serializedName.getAnnotation(SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  serializedName.getAnnotation(SerializedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
427	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getRawClass();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getRawClass();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  annotation.getRawClass();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
428	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass(annotation);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass(annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass(annotation);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
429	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass(annotations);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass(annotations);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getRawClass(annotations);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
430	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {	  	non-compiled	[CE]  illegal  start  of  type	93	None	add
431	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation!=  null  ||  annotation.equals(SerializedName.class))  {  [CE]  illegal  start  of  type  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation!=  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    if(annotation!=  null  ||  annotation.equals(SerializedName.class))  {	  	non-compiled	[CE]  illegal  start  of  type	93	None	add
432	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  If(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  If(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    If(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {	  	non-compiled	[CE]  ';'  expected	93	None	add
433	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation  >=  null  ||  annotation.equals(SerializedName.class))  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation  >=  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    if(annotation  >=  null  ||  annotation.equals(SerializedName.class))  {	  	non-compiled	[CE]  illegal  start  of  type	93	None	add
434	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation  >>  null  ||  annotation.equals(SerializedName.class))  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation  >>  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    if(annotation  >>  null  ||  annotation.equals(SerializedName.class))  {	  	non-compiled	[CE]  illegal  start  of  type	93	None	add
435	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.translateName(f)!=  null)  {  [CE]  cannot  find  symbol  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.translateName(f)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.translateName(f)!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
436	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	29	None	add
437	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  If(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  If(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    If(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  ';'  expected	29	None	add
438	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]        ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	29	None	add
439	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annot.value().equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annot.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  ||  annot.value().equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	29	None	add
440	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  >=  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	29	None	add
441	[BUG]  [BUGGY]  FieldNamingPolicy  fieldNamingPolicy  =  getFieldNamingPolicy(annotation);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingPolicy  fieldNamingPolicy  =  getFieldNamingPolicy(annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingPolicy  fieldNamingPolicy  =  getFieldNamingPolicy(annotation);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
442	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(null);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(null);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(null);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
443	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.value()  ==  null)  {	  if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	39	9	replace
444	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  null)  {  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  ==  null)  {	  if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    	compilable	  [FE]  NullPointerException  	39	9	replace
445	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annot.name()!=  0)  {  [CE]  cannot  find  symbol  annot  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annot.name()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annot.name()!=  0)  {	  if(annotation    ==    null    ||    annotation.name()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  annot	80	None	replace
446	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serializedName.getClass()))  {  [CE]  cannot  find  symbol  serializedName  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serializedName.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(serializedName.getClass()))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	94	None	replace
447	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class)||  annotation.equals(serializedName.class))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class)||  annotation.equals(serializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(SerializedName.class)||  annotation.equals(serializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
448	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.name()))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.name()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.name()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
449	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getValue()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getValue()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getValue()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.value()))    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
450	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.equals(annotation.value()))  {	  if(annotation!=    null    ||    annotation.isEmpty())    {    	compilable	  [FE]  NullPointerException  	46	9	replace
451	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(annotation.value()))  {  [FE]  NullPointerException  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(annotation.value()))  {	  if(annotation!=    null    ||    annotation.isEmpty())    {    	compilable	  [FE]  NullPointerException  	46	9	replace
452	[BUG]  [BUGGY]  if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  array  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    serializedName.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol  array	7	None	replace
453	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annot.name()!=  null)  {  [CE]  cannot  find  symbol  annot  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annot.name()!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annot.name()!=  null)  {	  if(annotation    ==    null    ||    annotation.name()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  annot	64	None	replace
454	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.TranslateName(f)))  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.TranslateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.TranslateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	29	None	add
455	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(FieldNamingPolicy.class);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(FieldNamingPolicy.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(FieldNamingPolicy.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
456	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(RawClass.class);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(RawClass.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(RawClass.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
457	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation  >>  null  ||  annotation.value().length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annotation  >>  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    if(annotation  >>  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  type	36	None	add
458	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(annotation.getValue()))  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(annotation.getValue()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(annotation.getValue()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
459	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.getName()))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(annotation.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
460	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getTypeDesc()))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getTypeDesc()))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getTypeDesc()))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
461	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getTypeDesc()))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getTypeDesc()))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getTypeDesc()))  {  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
462	[BUG]  [BUGGY]  if(annotation!=  null  ||  f.equals(fieldNamingPolicy.getName(annotation)))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  f.equals(fieldNamingPolicy.getName(annotation)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  f.equals(fieldNamingPolicy.getName(annotation)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
463	[BUG]  [BUGGY]  if(annotation!=  null  ||  serialize.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serialize.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serialize.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
464	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  -1  ||  annotation.length()  ==  0)  {  [CE]  incomparable  types:  String  and  int  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  -1  ||  annotation.length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  ==  -1  ||  annotation.length()  ==  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    -1)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	76	None	replace
465	[BUG]  [BUGGY]  if(annotation!=  null  ||  serialize.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serialize.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serialize.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
466	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialization.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialization.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialization.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
467	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f)||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
468	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f))  ||  annotation.value()  ==  0)  {  [CE]  incomparable  types:  String  and  int  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f))  ||  annotation.value()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.translateName(f))  ||  annotation.value()  ==  0)  {	  if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  incomparable  types:  String  and  int	6	None	replace
469	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  &&  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  &&  fieldNamingPolicy!=  null)  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  ComparisonFailure  	48	1	replace
470	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  &&  fieldNamingPolicy!=  null)  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  &&  fieldNamingPolicy!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  &&  fieldNamingPolicy!=  null)  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  ComparisonFailure  	48	1	replace
471	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.type);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.type);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.type);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
472	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.value());  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.value());  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.value());	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
473	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  false);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  false);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  false);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
474	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  for(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  for(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    for(annotation  ==  null  ||  annotation.equals(annotation.value()))  {	  	non-compiled	[CE]  not  a  statement	69	None	add
475	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.isConstructor())  {  [CE]  cannot  find  symbol  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.isConstructor())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.isConstructor())  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
476	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class))  {  [CE]  ')'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class))  {	  if(annotation    ==    null    ||    annotation.equals(value))    {    	non-compiled	[CE]  ')'  expected	58	None	replace
477	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.class,  f))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.class,  f))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.class,  f))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.class))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
478	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.class))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.class))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.class))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
479	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  >=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.translateName(f)  >=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	21	None	replace
480	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.value))  {  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.value))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.value))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.name))    {    	non-compiled	[CE]  cannot  find  symbol  value	78	None	replace
481	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.name,  f))  {  [CE]  cannot  find  symbol  name  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.name,  f))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.name,  f))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	78	None	replace
482	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name.equals(fieldNamingPolicy.name))  {  [CE]  cannot  find  symbol  name  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.name.equals(fieldNamingPolicy.name))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name.equals(fieldNamingPolicy.name))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.name))    {    	non-compiled	[CE]  cannot  find  symbol  name	78	None	replace
483	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [CE]  cannot  find  symbol  Feature  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.isEnabled(Feature.QUOTE_FIELD_NAMES))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.isEnabled(Feature.QUOTE_FIELD_NAMES))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  Feature	20	None	replace
484	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f.getName());  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f.getName());  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f.getName());	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
485	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  findFieldNamingPolicy(f);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  findFieldNamingPolicy(f);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  findFieldNamingPolicy(f);	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
486	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.type.isAssignableFrom(annotation.class))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.type.isAssignableFrom(annotation.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.type.isAssignableFrom(annotation.class))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.class))    {    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
487	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  for(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  for(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    for(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {	  	non-compiled	[CE]  not  a  statement	93	None	add
488	[BUG]  [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.size()  >  0)  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.size()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  fieldNamingPolicy.size()  >  0)  {	  if(annotation!=    null    &&    annotation.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
489	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotations.size()  >  0)  {  [CE]  cannot  find  symbol  annotations  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotations.size()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotations.size()  >  0)  {	  if(annotation!=    null    &&    annotation.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  annotations	84	None	replace
490	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructorParameters();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructorParameters();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructorParameters();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
491	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructorInstance();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructorInstance();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getConstructorInstance();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
492	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	ObjectConstructor  constructor  =  fieldNamingPolicy.getConstructor();	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
493	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.hasAnnotation(serializedName))  {  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.hasAnnotation(serializedName))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.hasAnnotation(serializedName))  {	  if(annotation    ==    null    ||    annotations.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	44	None	replace
494	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  for(annotation  ==  null  ||  annotation.value().isEmpty())  {  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  for(annotation  ==  null  ||  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().isEmpty())    {    for(annotation  ==  null  ||  annotation.value().isEmpty())  {	  	non-compiled	[CE]  not  a  statement	50	None	add
495	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(annotation.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(annotation.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(annotation.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
496	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  -1  ||  annotation.length()  ==  0)  {  [CE]  incomparable  types:  String  and  int  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  -1  ||  annotation.length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()  ==  -1  ||  annotation.length()  ==  0)  {	  if(annotation    ==    null    ||    annotation.value()    ==    -1)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	75	None	replace
497	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation!=  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation!=  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
498	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
499	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getLocalName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getLocalName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getLocalName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
500	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
501	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  ||  annotation.value().equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  NullPointerException  	51	9	replace
502	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().equals(annotation.value()))  {  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value().equals(annotation.value()))  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	compilable	  [FE]  NullPointerException  	51	9	replace
503	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.length);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.length);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.length);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
504	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.value());  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.value());  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.value());	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
505	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.type);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.type);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.type);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
506	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReferenceName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReferenceName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReferenceName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    >=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
507	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    >=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
508	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  Token  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  Token.NAME)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()  ==  Token.NAME)  {	  if(annotation    ==    null    ||    annotation.type()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  Token	55	None	replace
509	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value()  <  =  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value()  <  =  0)  {	  if(annotation!=    null    &&    annotation.value()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
510	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotations.size()  ==  0)  {  [CE]  cannot  find  symbol  annotations  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotations.size()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotations.size()  ==  0)  {	  if(annotation!=    null    ||    annotation.size()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  annotations	42	None	replace
511	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getName(annotation)))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getName(annotation)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getName(annotation)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
512	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
513	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotations.size()!=  0)  {  [CE]  cannot  find  symbol  annotations  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotations.size()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotations.size()!=  0)  {	  if(annotation    ==    null    ||    annotation.size()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  annotations	43	None	replace
514	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getName()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
515	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.isConstructor())  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.isConstructor())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.isConstructor())  {	  if(annotation    ==    null    ||    annotation.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
516	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.value());  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.value());  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.value());	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
517	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.type);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.type);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  f.type);	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
518	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  null);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  null);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  null);	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
519	[BUG]  [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.name()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  fieldNamingPolicy.name()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  fieldNamingPolicy.name()  ==  0)  {	  if(annotation!=    null    ||    annotation.name()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
520	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.name());  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.name());  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f.name());	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
521	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getTypeDesc()))  {  if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getTypeDesc()))  {  if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getTypeDesc()))  {  if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    ==    null    ||    annot.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
522	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
523	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialize.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
524	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotations.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotations.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotations.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
525	[BUG]  [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  name.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getDeclaringClass()))    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
526	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  <  =  0)  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value()  <  =  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  <  =  0)  {	  if(annotation!=    null    ||    annotation.value()    >    0)    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
527	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
528	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value().equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
529	[BUG]  [BUGGY]  FieldNamingPolicy  fieldNamingPolicy  =  f.getFieldNamingPolicy();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingPolicy  fieldNamingPolicy  =  f.getFieldNamingPolicy();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingPolicy  fieldNamingPolicy  =  f.getFieldNamingPolicy();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
530	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class,  null);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class,  null);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Annotation.class,  null);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(Annotation.class);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
531	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.isAssignableFrom(annotation.getClass()))  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.isAssignableFrom(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.isAssignableFrom(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
532	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.class.isAssignableFrom(fieldNamingPolicy.getClass()))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.class.isAssignableFrom(fieldNamingPolicy.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.class.isAssignableFrom(fieldNamingPolicy.getClass()))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol	101	None	replace
533	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
534	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
535	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getValue(annotation)))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getValue(annotation)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getValue(annotation)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
536	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotations.name()  ==  0)  {  [CE]  cannot  find  symbol  annotations  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotations.name()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotations.name()  ==  0)  {	  if(annotation    ==    null    ||    annotation.name()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  annotations	45	None	replace
537	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  [Delete]  0)  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value()  [Delete]  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  [Delete]  0)  {	  if(annotation!=    null    ||    annotation.value()!=    0)    {    	non-compiled	[CE]  ')'  expected	27	None	replace
538	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name()  ==  null)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.name()  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name()  ==  null)  {	  if(annotation    ==    null    ||    annotation.value()    [Delete]    0)    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
539	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getType()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
540	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotations.equals(fieldNamingPolicy.getType()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotations.equals(fieldNamingPolicy.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotations.equals(fieldNamingPolicy.getType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
541	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
542	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name()  >  0)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.name()  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name()  >  0)  {	  if(annotation    ==    null    ||    annotation.length()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
543	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy))  {	  if(annotation    ==    null    ||    annotation.equals(serialize))    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
544	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy))  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy))  {	  if(annotation    ==    null    ||    annotation.equals(serialize))    {    	compilable	  [FE]  ComparisonFailure  	92	1	replace
545	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||   ". ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||   ". ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
546	[BUG]  [BUGGY]  if(annotation  ==  null  ||   ". ".equals(annotation.getClass()))  {  [FE]  ComparisonFailure  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||   ". ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||   ". ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  ComparisonFailure  	87	1	replace
547	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  null);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  null);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  null);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(AnnotatedName.class);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
548	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  serialize);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  serialize);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  serialize);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(AnnotatedName.class);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
549	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)!=  null)  {  [CE]  ')'  expected  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(SerializedName.class)!=  null)  {	  if(annotation!=    null)    {    If(annotation!=    null)    {    	non-compiled	[CE]  ')'  expected	73	None	replace
550	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateValue(annotation)))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateValue(annotation)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateValue(annotation)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
551	[BUG]  [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  f.equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
552	[BUG]  [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateValue(f)).equals(annotation.value())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  fieldNamingPolicy.translateValue(f)).equals(annotation.value())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  fieldNamingPolicy.translateValue(f)).equals(annotation.value())  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
553	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.type.isAssignableFrom(annotation.getClass()))  {  [CE]  cannot  find  symbol  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.type.isAssignableFrom(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.type.isAssignableFrom(annotation.getClass()))  {	  if(annotation    ==    null    ||    annotation.class.isAssignableFrom(annotation.getClass()))    {    	non-compiled	[CE]  cannot  find  symbol  type	101	None	replace
554	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.hasChildren())  {  [CE]  cannot  find  symbol  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.hasChildren())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.hasChildren())  {	  if(annotation!=    null)    {    if(annotation!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
555	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.isSerialized())  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.isSerialized())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.isSerialized())  {	  if(annotation!=    null)    {    if(annotation!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
556	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.serialize())  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.serialize())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.serialize())  {	  if(annotation!=    null    &&    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
557	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class)||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(SerializedName.class)||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  ComparisonFailure  	94	1	replace
558	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class)||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class)||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(SerializedName.class)||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	compilable	  [FE]  ComparisonFailure  	94	1	replace
559	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class,  serializedName))  {  [CE]  cannot  find  symbol  serializedName  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class,  serializedName))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(SerializedName.class,  serializedName))  {	  if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	94	None	replace
560	[BUG]  [BUGGY]  if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
561	[BUG]  [BUGGY]  if(annotation  ==  null  ||  methodNamingPolicy.equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  methodNamingPolicy.equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  methodNamingPolicy.equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
562	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getReturnType()))    {    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
563	[BUG]  [BUGGY]  SerializedName  serializedName  =  annotation.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  SerializedName  serializedName  =  annotation.getAnnotation(SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  annotation.getAnnotation(SerializedName.class);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
564	[BUG]  [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	SerializedName  serializedName  =  f.getAnnotation(SerializedName.class,  f);	  SerializedName    serializedName    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
565	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
566	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getReturnType()))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getReturnType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().equals(fieldNamingPolicy.getReturnType()))  {	  if(annotation    ==    null    ||    annotation.value().equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
567	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.isValue())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.isValue())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.isValue())  {	  if(annotation    ==    null    ||    annotation.value()    [Delete]    0)    {    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
568	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getDeclaringClass()))  {	  if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
569	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getReferenceName(f)))  {  [CE]  cannot  find  symbol  [FE]      NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getReferenceName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getReferenceName(f)))  {	  if(annotation!=    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
570	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getDeclaredFieldNamingPolicy();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getDeclaredFieldNamingPolicy();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getDeclaredFieldNamingPolicy();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
571	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.class.isAssignableFrom(annotation.class))  {  [CE]  cannot  find  symbol  [FE]              NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.class.isAssignableFrom(annotation.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.class.isAssignableFrom(annotation.class))  {	  if(annotation!=    null    &&    annotation.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
572	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.length  >  0)  {  [CE]  cannot  find  symbol  length  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.length  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.length  >  0)  {	  if(annotation!=    null    &&    annotation.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	84	None	replace
573	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.size()  >  1)  {  [CE]  cannot  find  symbol  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.size()  >  1)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.size()  >  1)  {	  if(annotation!=    null    &&    annotation.size()    >    0)    {    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
574	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawParameterType(0);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getRawParameterType(0);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getRawParameterType(0);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
575	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getCollection();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getCollection();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getCollection();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getRawClass();    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
576	[BUG]  [BUGGY]  if(annotation  ==  null  ||  serialization.equals(f.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  serialization.equals(f.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  serialization.equals(f.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
577	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(field.getSerializedName()))  {  [CE]  cannot  find  symbol  field  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(field.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(field.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(f.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol  field	60	None	replace
578	[BUG]  [BUGGY]  if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.getValue(f)))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.getValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.getValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
579	[BUG]  [BUGGY]  if(annotation  ==  null)  {  If(annotation!=  null)  {  [CE]  ';'  expected  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null)  {  If(annotation!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null)  {  If(annotation!=  null)  {	  if(annotation!=    null)    {    If(annotation!=    null)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
580	[BUG]  [BUGGY]  if(annotation  ==  null)  {  If(annotation  ==  null)  {  [CE]  ';'  expected  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null)  {  If(annotation  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null)  {  If(annotation  ==  null)  {	  if(annotation!=    null)    {    If(annotation!=    null)    {    	non-compiled	[CE]  ';'  expected	73	None	replace
581	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  ComparisonFailure  	48	1	replace
582	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class))  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	compilable	  [FE]  ComparisonFailure  	48	1	replace
583	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(Factory.getAnnotation(SerializedName.class)))  {  [CE]  cannot  find  symbol  Factory  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(Factory.getAnnotation(SerializedName.class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(Factory.getAnnotation(SerializedName.class)))  {	  if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    	non-compiled	[CE]  cannot  find  symbol  Factory	48	None	replace
584	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getType()))  {  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.equals(fieldNamingPolicy.getType()))  {	  if(annotation    ==    null    &&    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
585	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation  {  null  ||  annotation.equals(SerializedName.class))  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(SerializedName.class))  {  if(annotation  {  null  ||  annotation.equals(SerializedName.class))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(SerializedName.class))    {    if(annotation  {  null  ||  annotation.equals(SerializedName.class))  {	  	non-compiled	[CE]  ')'  expected	93	None	add
586	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  -1  ||  annotation.value()  ==  -1)  {  [CE]  incomparable  types:  String  and  int  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  -1  ||  annotation.value()  ==  -1)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  ==  -1  ||  annotation.value()  ==  -1)  {	  if(annotation!=    null    ||    annotation.value()    ==    -1)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	76	None	replace
587	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  -1  ||  annotation.value()  ==  0)  {  [CE]  incomparable  types:  String  and  int  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value()  ==  -1  ||  annotation.value()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value()  ==  -1  ||  annotation.value()  ==  0)  {	  if(annotation!=    null    ||    annotation.value()    ==    -1)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	76	None	replace
588	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.Class)))  {  [CE]  illegal  start  of  type  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.class)))  {  if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.Class)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(f.getAnnotation(SerializedName.class)))    {    if(annotation  ==  null  ||  annotation.equals(f.getAnnotation(SerializedName.Class)))  {	  	non-compiled	[CE]  illegal  start  of  type	47	None	add
589	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value()!=  getClass())  {  [CE]  incomparable  types:  String  and  Class<CAP#1>  [FE]                NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value()!=  getClass())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value()!=  getClass())  {	  if(annotation!=    null    &&    annotation.getClass()!=    getClass())    {    	non-compiled	[CE]  incomparable  types:  String  and  Class<CAP#1>	85	None	replace
590	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReferenceName(f)))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReferenceName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReferenceName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.TranslateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	72	None	replace
591	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(f)))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getAnnotation(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
592	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getRawClass()))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getRawClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getRawClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
593	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.name().isEmpty())  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.name().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.name().isEmpty())  {	  if(annotation    ==    null    ||    annotation.value().isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
594	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  {  null  ||  annotation.value().isEmpty())  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().isEmpty())  {  if(annotation  {  null  ||  annotation.value().isEmpty())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().isEmpty())    {    if(annotation  {  null  ||  annotation.value().isEmpty())  {	  	non-compiled	[CE]  ')'  expected	50	None	add
595	[BUG]  [BUGGY]  if(annotation!=  null,  fieldNamingPolicy.size()  ==  0)  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null,  fieldNamingPolicy.size()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null,  fieldNamingPolicy.size()  ==  0)  {	  if(annotation!=    null    ||    annotation.size()    ==    0)    {    	non-compiled	[CE]  ')'  expected	42	None	replace
596	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length  >  0)  {  [CE]  cannot  find  symbol  length  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length  >  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value().length  >  0)  {	  if(annotation    ==    null    ||    annotation.value()    >=    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	28	None	replace
597	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy().getFieldNames(f);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy().getFieldNames(f);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFunctionNamingPolicy().getFieldNames(f);	  FieldNamingStrategy    fieldNamingPolicy    =    getFunctionNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
598	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotations.isConstructor())  {  [CE]  cannot  find  symbol  annotations  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotations.isConstructor())  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotations.isConstructor())  {	  if(annotation    ==    null    ||    annotation.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol  annotations	54	None	replace
599	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.getConstructor()))  {  [CE]  cannot  find  symbol  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.getConstructor()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(annotation.getConstructor()))  {	  if(annotation    ==    null    ||    annotation.isConstructor())    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
600	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f.getAnnotation(SerializedName.class));  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f.getAnnotation(SerializedName.class));  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  getFieldNamingPolicy(f.getAnnotation(SerializedName.class));	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy(f);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
601	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getSerializedName()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getSerializedName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getSerializedName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getSerializedName()))    {    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
602	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  annotation);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(AnnotatedName.class,  annotation);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(AnnotatedName.class);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
603	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.type))  {  [CE]  cannot  find  symbol  type  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.type))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.type))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.name))    {    	non-compiled	[CE]  cannot  find  symbol  type	78	None	replace
604	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.localName))  {  [CE]  cannot  find  symbol  localName  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.localName))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.localName))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.name))    {    	non-compiled	[CE]  cannot  find  symbol  localName	78	None	replace
605	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getAnnotation(SerializedName.class);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  annotation.getAnnotation(SerializedName.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  annotation.getAnnotation(SerializedName.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
606	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class)+  1;  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class)+  1;  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class)+  1;	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
607	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  {  null  ||  annotation.equals(annotation.value()))  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(annotation.value()))  {  if(annotation  {  null  ||  annotation.equals(annotation.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.equals(annotation.value()))    {    if(annotation  {  null  ||  annotation.equals(annotation.value()))  {	  	non-compiled	[CE]  ')'  expected	69	None	add
608	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Serializers.class);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Serializers.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getAnnotation(Serializers.class);	  FieldNamingStrategy    fieldNamingPolicy    =    f.getAnnotation(Annotation.class);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
609	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getType()))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getType()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.getType()))  {	  if(annotation!=    null    ||    annotation.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
610	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.fieldNamingPolicy.value()))  {  [CE]  cannot  find  symbol  fieldNamingPolicy  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.fieldNamingPolicy.value()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(f.fieldNamingPolicy.value()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	non-compiled	[CE]  cannot  find  symbol  fieldNamingPolicy	77	None	replace
611	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.name()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.name()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(f.name()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
612	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.fieldNamingPolicy()))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(f.fieldNamingPolicy()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(f.fieldNamingPolicy()))  {	  if(annotation    ==    null    ||    annotation.equals(f.value()))    {    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
613	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.serializedName()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.serializedName()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.serializedName()  ==  0)  {	  if(annotation    ==    null    ||    annotation.name()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
614	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  annotation);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(SerializedName.class,  annotation);	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
615	[BUG]  [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(Serializers.class);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(Serializers.class);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	Constructor  <  String>  fieldNamingPolicy  =  f.getAnnotation(Serializers.class);	  Constructor    <    String>    fieldNamingPolicy    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
616	[BUG]  [BUGGY]  if(annotation!=  null  ||  serializedName.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  serializedName.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  serializedName.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.getName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
617	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(serializedName);  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructor(serializedName);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	ObjectConstructor  constructor  =  f.getConstructor(serializedName);	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
618	[BUG]  [BUGGY]  ObjectConstructor  constructor  =  f.getConstructorFor(annotation);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  ObjectConstructor  constructor  =  f.getConstructorFor(annotation);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	ObjectConstructor  constructor  =  f.getConstructorFor(annotation);	  ObjectConstructor    constructor    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
619	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&   " ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&   " ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  NullPointerException  	87	9	replace
620	[BUG]  [BUGGY]  if(annotation!=  null  &&   " ".equals(annotation.getClass()))  {  [FE]  NullPointerException  [FE]        NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&   " ".equals(annotation.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&   " ".equals(annotation.getClass()))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||       "   ".equals(annotation.getClass()))    {    	compilable	  [FE]  NullPointerException  	87	9	replace
621	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.serialized().length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.serialized().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.serialized().length()  ==  0)  {	  if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
622	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.getClass().length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.getClass().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.getClass().length()  ==  0)  {	  if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
623	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  {  null  ||  annotation.value().length()  ==  0)  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value().length()  ==  0)  {  if(annotation  {  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation    ==    null    ||    annotation.value().length()    ==    0)    {    if(annotation  {  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  ')'  expected	38	None	add
624	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >>  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  if(annotation  >>  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation  >>  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  	non-compiled	[CE]  illegal  start  of  type	3	None	add
625	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotations.name()!=  null)  {  [CE]  cannot  find  symbol  annotations  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotations.name()!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotations.name()!=  null)  {	  if(annotation    ==    null    ||    annotation.name()!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  annotations	64	None	replace
626	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotations.name()  ==  0)  {  [CE]  cannot  find  symbol  annotations  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotations.name()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotations.name()  ==  0)  {	  if(annotation!=    null    ||    annotation.name()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol  annotations	99	None	replace
627	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation  ==  fieldNamingPolicy.translateName(f))  {  [CE]  incomparable  types:  SerializedName  and  String  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation  ==  fieldNamingPolicy.translateName(f))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation  ==  fieldNamingPolicy.translateName(f))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    fieldNamingPolicy.translateName(f))    {    	non-compiled	[CE]  incomparable  types:  SerializedName  and  String	88	None	replace
628	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation!=  fieldNamingPolicy.translateType(f))  {  [CE]  cannot  find  symbol  [FE]            NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation!=  fieldNamingPolicy.translateType(f))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation!=  fieldNamingPolicy.translateType(f))  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    fieldNamingPolicy.translateName(f))    {    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
629	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serializedName))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(serializedName))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(serializedName))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
630	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getType()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getType()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getType()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
631	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
632	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getSerializedName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getSerializedName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getSerializedName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
633	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getReturnType()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
634	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  [CE]  ';'  expected  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {  If(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getName()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    If(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  ';'  expected	33	None	replace
635	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  -1  ||  annotation.value()  ==  -1)  {  [CE]  incomparable  types:  String  and  int  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.value()  ==  -1  ||  annotation.value()  ==  -1)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.value()  ==  -1  ||  annotation.value()  ==  -1)  {	  if(annotation    ==    null    ||    annotation.value()    ==    -1)    {    	non-compiled	[CE]  incomparable  types:  String  and  int	75	None	replace
636	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.translateName(f)  ==  null)  {  [CE]  cannot  find  symbol  [FE]                    NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.translateName(f)  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.translateName(f)  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    arrayNamingPolicy.translateName(f)    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
637	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =(FieldNamingPolicy)annotation.clone();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =(FieldNamingPolicy)annotation.clone();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =(FieldNamingPolicy)annotation.clone();	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
638	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  new  FieldNamingPolicy(annotation.getAnnotation(SerializedName.class));  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  new  FieldNamingPolicy(annotation.getAnnotation(SerializedName.class));  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  new  FieldNamingPolicy(annotation.getAnnotation(SerializedName.class));	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
639	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  findFieldNamingPolicy();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  findFieldNamingPolicy();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  findFieldNamingPolicy();	  FieldNamingStrategy    fieldNamingPolicy    =    getFieldNamingPolicy();    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
640	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.getName(f)))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.getName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annot.equals(fieldNamingPolicy.getName(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateName(f)))    {    if(annotation    ==    null    ||    annot.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
641	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotations.name()!=  0)  {  [CE]  cannot  find  symbol  annotations  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotations.name()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotations.name()!=  0)  {	  if(annotation    ==    null    ||    annotation.name()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  annotations	80	None	replace
642	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.serializedName()!=  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.serializedName()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.serializedName()!=  0)  {	  if(annotation    ==    null    ||    annotation.name()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
643	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.name);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.name);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  f.name);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
644	[BUG]  [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  0);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  String[]  alternates  =  f.getAnnotation(SerializedName.class,  0);  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	String[]  alternates  =  f.getAnnotation(SerializedName.class,  0);	  String[]    alternates    =    f.getAnnotation(SerializedName.class);    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
645	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.type()  ==  Token.NAME,  fieldNamingPolicy)  {  [CE]  ')'  expected  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.type()  ==  Token.NAME,  fieldNamingPolicy)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.type()  ==  Token.NAME,  fieldNamingPolicy)  {	  if(annotation    ==    null    ||    annotation.type()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	55	None	replace
646	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  annotation.value().length()!=  0)  {	  if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    	compilable	  [FE]  NullPointerException  	26	9	replace
647	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation.value().length()!=  0)  {  [FE]  NullPointerException  [FE]    ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation.value().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation.value().length()!=  0)  {	  if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    	compilable	  [FE]  NullPointerException  	26	9	replace
648	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.serialized().length()!=  0)  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.serialized().length()!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.serialized().length()!=  0)  {	  if(annotation    ==    null    ||    annotation.value().length()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
649	[BUG]  [BUGGY]  if(annotation  ==  null  ||  alternates.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  cannot  find  symbol  alternates  [FE]              ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  alternates.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  alternates.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    serializedName.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  cannot  find  symbol  alternates	7	None	replace
650	[BUG]  [BUGGY]  if(annotation  ==  null  ||  alternates.length.equals(fieldNamingPolicy.translateName(f)))  {  [CE]  package  alternates  does  not  exist  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  alternates.length.equals(fieldNamingPolicy.translateName(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  alternates.length.equals(fieldNamingPolicy.translateName(f)))  {	  if(annotation    ==    null    ||    serializedName.equals(fieldNamingPolicy.translateName(f)))    {    	non-compiled	[CE]  package  alternates  does  not  exist	7	None	replace
651	[BUG]  [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                  NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)  >=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  fieldNamingPolicy.translateName(f)  >=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy.translateName(f)    >=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
652	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length  <  0)  {  [CE]  cannot  find  symbol  length  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length  <  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.value().length  <  0)  {	  if(annotation!=    null    ||    annotation.value()    <    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	98	None	replace
653	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.type()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.type()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  ||  annotation.type()  ==  0)  {	  if(annotation!=    null    ||    annotation.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
654	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.length!=  0)  {  [CE]  cannot  find  symbol  length  [FE]                    ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.length!=  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.length!=  0)  {	  if(annotation    ==    null    ||    annotation.size()!=    0)    {    	non-compiled	[CE]  cannot  find  symbol  length	43	None	replace
655	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  fieldNamingPolicy  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  NullPointerException  	24	9	replace
656	[BUG]  [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy  ==  null)  {  [FE]  NullPointerException  [FE]                      NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  fieldNamingPolicy  ==  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  fieldNamingPolicy  ==  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    fieldNamingPolicy    ==    null)    {    	compilable	  [FE]  NullPointerException  	24	9	replace
657	[BUG]  [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFunction();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  FieldNamingStrategy  fieldNamingPolicy  =  f.getFunction();  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	FieldNamingStrategy  fieldNamingPolicy  =  f.getFunction();	  FieldNamingStrategy    fieldNamingPolicy    =    f.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
658	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation!=  null  &&  annotation!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  NullPointerException  	74	9	replace
659	[BUG]  [BUGGY]  if(annotation!=  null  &&  annotation!=  null)  {  [FE]  NullPointerException  [FE]          NullPointerException      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  &&  annotation!=  null)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=  null  &&  annotation!=  null)  {	  if(annotation!=    null)    {    if(annotation!=    null    ||    annotation!=    null)    {    	compilable	  [FE]  NullPointerException  	74	9	replace
660	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	add	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	compilable	  [FE]  ComparisonFailure  	71	1	replace
661	[BUG]  [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getClass()))  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getClass()))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  annotation.equals(fieldNamingPolicy.getClass()))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.getType()))    {    	compilable	  [FE]  ComparisonFailure  	71	1	replace
662	[BUG]  [BUGGY]  if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.translateValue(f)))  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.translateValue(f)))  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation  ==  null  ||  array.equals(fieldNamingPolicy.translateValue(f)))  {	  if(annotation    ==    null    ||    annotation.equals(fieldNamingPolicy.translateValue(f)))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
663	[BUG]  [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annoation!=  null  ||  annotation.value().length()  ==  0)  {  [CE]  illegal  start  of  type  [FE]    NullPointerException    [CONTEXT]      private  List<String>  getFieldNames(Field  f)  {  SerializedName  annotation  =  f.getAnnotation(SerializedName.class);      [BUGGY]  if(annotation!=  null  ||  annotation.value().length()  ==  0)  {  if(annoation!=  null  ||  annotation.value().length()  ==  0)  {  [BUGGY]      String  name  =  fieldNamingPolicy.translateName(f);  return  Collections.singletonList(name);  }  String  serializedName  =  annotation.value();  String[]  alternates  =  annotation.alternate();  if  (alternates.length  ==  0)  {  return  Collections.singletonList(serializedName);  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getFieldNames  [RETURN_TYPE]  List  Field  f  [VARIABLES]  ConstructorConstructor  constructorConstructor  Field  f  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  SerializedName  annotation  ObjectConstructor  constructor  List  fieldNames  String  $anonymous0  alternate  name  serializedName  String[]  alternates  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	73	73	1	replace	if(annotation!=    null    ||    annotation.value().length()    ==    0)    {    if(annoation!=  null  ||  annotation.value().length()  ==  0)  {	  	non-compiled	[CE]  illegal  start  of  type	36	None	add
