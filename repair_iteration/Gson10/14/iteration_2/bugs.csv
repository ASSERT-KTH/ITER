bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
2	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
3	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw!=  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
4	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
5	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
6	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
7	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type)))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type)))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type)))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
8	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
9	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
10	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw  ==  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
11	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
12	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
13	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  getBoundFields(gson,  type,  raw));	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
14	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
15	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
16	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type)  ==  null)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type)  ==  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  getBoundFields(gson,  type)  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
17	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
18	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
19	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
20	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	17	None	add
21	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
22	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
23	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
24	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
25	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
26	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
27	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
28	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
29	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
30	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
31	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
32	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
33	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	21	1	replace
34	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]              IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	21	1	replace
35	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
36	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
37	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
38	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	20	None	add
39	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	20	None	add
40	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
41	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
42	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	18	9	replace
43	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	18	9	replace
44	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	18	9	replace
45	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	18	9	replace
46	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  object  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  object	18	None	replace
47	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	18	9	replace
48	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	18	9	replace
49	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
50	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
51	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive())  {	  if(raw    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	9	1	replace
52	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {	  if(raw    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	9	1	replace
53	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isInterface())  {	  if(raw    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	9	1	replace
54	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isInterface())  {	  if(raw    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	9	1	replace
55	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isArray())  {	  if(raw    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	9	1	replace
56	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {	  if(raw    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	9	1	replace
57	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {	  if(raw    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	9	9	replace
58	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {	  if(raw    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	9	9	replace
59	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw.isPrimitive())  {	  if(raw    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	9	9	replace
60	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {	  if(raw    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	9	9	replace
61	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isEmpty())  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isEmpty())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isEmpty())  {	  if(raw    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
62	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
63	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
64	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
65	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	15	None	add
66	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  >>  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
67	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
68	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  [Delete]  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  [Delete]  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  [Delete]  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	15	None	add
69	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
70	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  ';'  expected	11	None	add
71	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignedFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignedFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignedFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
72	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
73	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
74	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  [CE]  [FE]              IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));	  	non-compiled	[CE]  	11	None	add
75	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type))  {	  if(raw    >=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	19	None	replace
76	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type))  {	  if(raw    >=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	19	None	replace
77	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	4	9	replace
78	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	4	9	replace
79	[BUG]  [BUGGY]  if(raw  ==  null  ||!Array.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Array.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Array.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
80	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
81	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
82	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
83	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
84	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(type))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	12	None	replace
85	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
86	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
87	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	12	None	replace
88	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
89	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
90	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
91	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
92	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
93	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
94	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
95	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	3	None	add
96	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  >>  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
97	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
98	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  [Delete]  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]                IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  [Delete]  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  [Delete]  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	3	None	add
99	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	6	1	replace
100	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	6	1	replace
101	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	6	9	replace
102	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	6	9	replace
103	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	6	None	replace
104	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	6	9	replace
105	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	6	9	replace
106	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	6	9	replace
107	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	6	9	replace
108	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
109	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
110	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	1	None	add
111	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
112	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
113	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	1	None	add
114	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
115	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  TypeToken  <  T>  raw  =  type.getRawType();  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.getRawType();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
116	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getRawType();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
117	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawType();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawType();  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  Class  <?  super  T>  raw  =  type.getRawType();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
118	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor();  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  gson.getConstructor();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
119	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.getRawType();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  TypeToken  <?>  raw  =  type.getRawType();  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.getRawType();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
120	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawType();  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.getRawType();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
121	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  raw.getConstructor();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  Constructor  <  T>  constructor  =  raw.getConstructor();  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  raw.getConstructor();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
122	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	16	1	replace
123	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	16	1	replace
124	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
125	[BUG]  [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
126	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
127	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
128	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	7	1	replace
129	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	7	1	replace
130	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
131	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
132	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	5	None	add
133	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
134	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
135	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	5	None	add
136	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
137	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	2	1	replace
138	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	2	1	replace
139	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	2	9	replace
140	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	2	9	replace
141	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	2	1	replace
142	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	2	1	replace
143	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||! "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||! "Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||! "Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	3	None	add
144	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.equals(raw))  {	  if(raw    >=    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	19	9	replace
145	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.equals(raw))  {	  if(raw    >=    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	19	9	replace
146	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
147	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	2	9	replace
148	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	2	9	replace
149	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	2	None	replace
150	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.equals(type))  {	  if(raw    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	9	1	replace
151	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.equals(type))  {	  if(raw    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	9	1	replace
152	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||  raw.length()  ==  0)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.length()  ==  0)  {	  if(raw    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
153	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  not  a  statement	17	None	add
154	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	6	1	replace
155	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	6	1	replace
156	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
157	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {	  	non-compiled	[CE]  ')'  expected	8	None	add
158	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
159	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
160	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
161	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
162	[BUG]  [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	7	None	replace
163	[BUG]  [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	7	None	replace
164	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw  {  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	1	None	add
165	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  not  a  statement	20	None	add
166	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
167	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))  ==  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
168	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
169	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
170	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  not  a  statement	11	None	add
171	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.Class))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.Class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
172	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.equals(Object.class))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.equals(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    if(!raw.equals(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
173	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&! "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&! "Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&! "Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	15	None	add
174	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawType();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawType();  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawType();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
175	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
176	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
177	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
178	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
179	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
180	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	12	None	replace
181	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
182	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
183	[BUG]  [BUGGY]  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	18	None	replace
184	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
185	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	18	1	replace
186	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	18	None	replace
187	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
188	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	16	1	replace
189	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	16	1	replace
190	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	15	None	add
191	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	6	1	replace
192	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	6	1	replace
193	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
194	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	17	None	add
195	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))  <  return  null;	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
196	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;	  	non-compiled	[CE]  illegal  start  of  type	11	None	add
197	[BUG]  [BUGGY]  if(raw!=  null)  {  If(raw!=  null)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  If(raw!=  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    If(raw!=  null)  {	  	non-compiled	[CE]  ';'  expected	13	None	add
198	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw  >=  null)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw  >=  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
199	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw  >>  null)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw  >>  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	13	None	add
200	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw  [Delete]  null)  {  [CE]  ')'  expected  [FE]          IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  if(raw  [Delete]  null)  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null)    {    if(raw  [Delete]  null)  {	  	non-compiled	[CE]  ')'  expected	13	None	add
201	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
202	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawClass()))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawClass()))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawClass()))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
203	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  raw.isPrimitive()))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  raw.isPrimitive()))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  (raw  ==  null  &&  raw.isPrimitive()))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
204	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  raw.equals(type)))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  raw.equals(type)))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  (raw  ==  null  &&  raw.equals(type)))  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
205	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null)    {    if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
206	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
207	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	12	9	replace
208	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(object.class)||!raw.isAssignableFrom(Object.class))  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!raw.isAssignableFrom(object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(object.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
209	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
210	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&  raw.isPrimitive())  {	  if(raw!=    null)    {    	compilable	  [FE]  ComparisonFailure  	14	1	replace
211	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&  raw.isPrimitive())  {	  if(raw!=    null)    {    	compilable	  [FE]  ComparisonFailure  	14	1	replace
212	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw.equals(type))  {	  if(raw!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	14	9	replace
213	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.equals(type))  {	  if(raw!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	14	9	replace
214	[BUG]  [BUGGY]  if(raw  >=  null  ||  raw.isPrimitive())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  >=  null  ||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null  ||  raw.isPrimitive())  {	  if(raw!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	14	None	replace
215	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
216	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
217	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
218	[BUG]  [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
219	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
220	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	21	9	replace
221	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.getConstructor();  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  Constructor  <  T>  factory  =  gson.getConstructor();  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.getConstructor();	      	non-compiled	[CE]  illegal  start  of  type	10	None	replace
222	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternate;  }	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
223	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternate;  }  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternate;  }	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
224	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }	      	non-compiled	[CE]  cannot  find  symbol	10	None	replace
225	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
226	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	2	1	replace
227	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	2	1	replace
228	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]    @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();    [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]    return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
