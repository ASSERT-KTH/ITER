bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {	  if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	102	None	replace
2	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {	  if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	102	None	replace
3	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	102	9	replace
4	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	102	9	replace
5	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	38	None	replace
6	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	38	None	replace
7	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
8	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
9	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
10	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
11	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
12	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	97	None	replace
13	[BUG]  [BUGGY]  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  illegal  start  of  type	176	None	replace
14	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternate!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  incompatible  types	176	None	replace
15	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternative;  }  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternative;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternative;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
16	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  alternate;  }  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  illegal  start  of  type	176	None	replace
17	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	8	None	replace
18	[BUG]  [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	8	None	replace
19	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  this))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  this))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  this))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
20	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  source))  {  [CE]  cannot  find  symbol  source  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  source))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  source))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  cannot  find  symbol  source	8	None	replace
21	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  this.raw))  {  [CE]  cannot  find  symbol  raw  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  this.raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  this.raw))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  cannot  find  symbol  raw	8	None	replace
22	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.getAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
23	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
24	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
25	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	190	None	replace
26	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||  type.isPrimitive())  {	  if(raw    >=    null    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	214	None	replace
27	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitiveType())  {	  if(raw    >=    null    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	214	None	replace
28	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||  type.isPrimitive())  {	  if(raw    >=    null    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	214	None	replace
29	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isAssignableFrom(type))  {	  if(raw    >=    null    ||    raw.isPrimitive())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	214	None	replace
30	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isArray())  {	  if(raw    >=    null    ||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	214	1	replace
31	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isArray())  {  [FE]  ComparisonFailure  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isArray())  {	  if(raw    >=    null    ||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	214	1	replace
32	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Type.class))  {	  if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	83	9	replace
33	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Type.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Type.class))  {	  if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	83	9	replace
34	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {	  if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
35	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.equals(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.equals(Object.class))  {	  if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	83	9	replace
36	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.equals(Object.class))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.equals(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.equals(Object.class))  {	  if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	83	9	replace
37	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isAssignableFrom(Object.class))  {	  if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	83	1	replace
38	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(Object.class))  {  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(Object.class))  {	  if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	83	1	replace
39	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)&&  raw.isPrimitive())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	225	None	replace
40	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)&&  type.isPrimitive())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type)&&  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	225	None	replace
41	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
42	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	155	1	replace
43	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	155	1	replace
44	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isEmpty())  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isEmpty())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
45	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	155	1	replace
46	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	155	1	replace
47	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isUnknownClass())  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isUnknownClass())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isUnknownClass())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
48	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	155	9	replace
49	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [FE]  IllegalArgumentException  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	155	9	replace
50	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
51	[BUG]  [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
52	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	35	9	replace
53	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	35	9	replace
54	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	213	None	replace
55	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.getName().equals(type.getName()))  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.getName().equals(type.getName()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.getName().equals(type.getName()))  {	  if(raw!=    null    ||    raw.equals(type))    {    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
56	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.equals(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	compilable	  [FE]  ComparisonFailure  	213	1	replace
57	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.equals(type))  {  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.equals(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	compilable	  [FE]  ComparisonFailure  	213	1	replace
58	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.getClass().equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.getClass().equals(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	compilable	  [FE]  ComparisonFailure  	213	1	replace
59	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.getClass().equals(type))  {  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.getClass().equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.getClass().equals(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	compilable	  [FE]  ComparisonFailure  	213	1	replace
60	[BUG]  [BUGGY]  if(raw  ==  null  ||!RawToken.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!RawToken.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!RawToken.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
61	[BUG]  [BUGGY]  if(raw  ==  null  ||!RawType.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!RawType.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!RawType.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
62	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	209	None	replace
63	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
64	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
65	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
66	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
67	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	28	None	replace
68	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
69	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
70	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
71	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
72	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Type.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
73	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
74	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)&&  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
75	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)&&  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
76	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	159	9	replace
77	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [FE]  IllegalArgumentException  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	159	9	replace
78	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	159	9	replace
79	[BUG]  [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [FE]  IllegalArgumentException  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	159	9	replace
80	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type)!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	159	None	replace
81	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  this)!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  this)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  this)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	159	None	replace
82	[BUG]  [BUGGY]  if(raw  >=  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	159	None	replace
83	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
84	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
85	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isArray())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isArray())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isArray())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
86	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
87	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
88	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
89	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  If(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  If(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    If(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	27	None	add
90	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.class)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.class)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(Object.class)||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
91	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignedFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignedFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignedFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
92	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.Class)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.Class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(Object.Class)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
93	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
94	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
95	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
96	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	101	None	add
97	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  >>  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
98	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  [Delete]  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  [Delete]  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  [Delete]  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	101	None	add
99	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||  raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
100	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)&&  type.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
101	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  type.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  type.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&  type.isPrimitive()  ||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
102	[BUG]  [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.class.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
103	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	127	1	replace
104	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	127	1	replace
105	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  type.isPrimitive()  ||  raw.isArray())  {  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  type.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&  type.isPrimitive()  ||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	127	None	replace
106	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  gson.getRawType();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  gson.getRawType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  gson.getRawType();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
107	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawClass();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawClass();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
108	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getSuperType();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getSuperType();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
109	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawParameterType(0);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawParameterType(0);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawParameterType(0);	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
110	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawSuperType();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawSuperType();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
111	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getReturnType();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getReturnType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getReturnType();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
112	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw.isArray())  {	  if(raw    ==    null    ||    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	56	9	replace
113	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isArray())  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isArray())  {	  if(raw    ==    null    ||    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	56	9	replace
114	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isSubtype(type))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isSubtype(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isSubtype(type))  {	  if(raw    ==    null    ||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
115	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  type.isArray())  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  type.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  type.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
116	[BUG]  [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
117	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  &&  raw.isArray())  {  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  &&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  &&  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
118	[BUG]  [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	130	None	replace
119	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	130	1	replace
120	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isArray())  {  [FE]  ComparisonFailure  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	130	1	replace
121	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive()  ||  raw.isArray())  {  [CE]  cannot  find  symbol  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive()  ||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
122	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  ==  null  ||  raw.equals(type))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  ==  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.equals(type))    {    if(raw  ==  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	150	None	add
123	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw!=  null  ||  raw.equals(type))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw!=  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.equals(type))    {    if(raw!=  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	150	None	add
124	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  If(raw  ==  null  ||  raw.equals(type))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  If(raw  ==  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.equals(type))    {    If(raw  ==  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  ';'  expected	150	None	add
125	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  >=  null  ||  raw.equals(type))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  >=  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.equals(type))    {    if(raw  >=  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	150	None	add
126	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  >>  null  ||  raw.equals(type))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  >>  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.equals(type))    {    if(raw  >>  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	150	None	add
127	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignedFrom(Object.class))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
128	[BUG]  [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignedFrom(Object.class))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
129	[BUG]  [BUGGY]  if(type.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignedFrom(Object.class))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
130	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignedFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignedFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isAssignedFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignedFrom(Object.class))    {    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
131	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
132	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(this))  {  if(raw  ==  null  ||!raw.isAssignableFrom(this))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(this))  {  if(raw  ==  null  ||!raw.isAssignableFrom(this))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(this))  {  if(raw  ==  null  ||!raw.isAssignableFrom(this))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
133	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object))  {  if(raw  ==  null  ||!raw.isAssignableFrom(object))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object))  {  if(raw  ==  null  ||!raw.isAssignableFrom(object))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(object))  {  if(raw  ==  null  ||!raw.isAssignableFrom(object))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
134	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isArray())  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
135	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||!raw.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||!raw.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||!raw.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
136	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
137	[BUG]  [BUGGY]  if(raw  ==  null)  {  If(raw  ==  null)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  If(raw  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  If(raw  ==  null)  {	  if(raw!=    null)    {    If(raw!=    null)    {    	non-compiled	[CE]  ';'  expected	197	None	replace
138	[BUG]  [BUGGY]  if(raw!=  null)  {  If(raw  ==  null)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  If(raw  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  If(raw  ==  null)  {	  if(raw!=    null)    {    If(raw!=    null)    {    	non-compiled	[CE]  ';'  expected	197	None	replace
139	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw  ==  null)  {  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw  ==  null)  {	  if(raw!=    null)    {    If(raw!=    null)    {    	non-compiled	[CE]  ';'  expected	197	None	replace
140	[BUG]  [BUGGY]  if(raw  ==  null)  {  If(raw  ==  null  ||  raw.isInterface())  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  If(raw  ==  null  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  If(raw  ==  null  ||  raw.isInterface())  {	  if(raw!=    null)    {    If(raw!=    null)    {    	non-compiled	[CE]  ';'  expected	197	None	replace
141	[BUG]  [BUGGY]  if(raw  ==  null)  {  If(raw  ==  null  ||  raw.isPrimitive())  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  If(raw  ==  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  If(raw  ==  null  ||  raw.isPrimitive())  {	  if(raw!=    null)    {    If(raw!=    null)    {    	non-compiled	[CE]  ';'  expected	197	None	replace
142	[BUG]  [BUGGY]  if(raw  ==  null)  {  If(raw!=  null)  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  If(raw!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  If(raw!=  null)  {	  if(raw!=    null)    {    If(raw!=    null)    {    	non-compiled	[CE]  ';'  expected	197	None	replace
143	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  If(raw  ==  null)  {  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  If(raw  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  If(raw  ==  null)  {	  if(raw!=    null)    {    If(raw!=    null)    {    	non-compiled	[CE]  ';'  expected	197	None	replace
144	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive())    {    if(raw!=  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
145	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive())    {    if(raw  ==  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
146	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  >=  null  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  >=  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive())    {    if(raw  >=  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
147	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  If(raw!=  null  ||  raw.isPrimitive())  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  If(raw!=  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive())    {    If(raw!=  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  ';'  expected	59	None	add
148	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  >>  null  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  >>  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive())    {    if(raw  >>  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
149	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  [Delete]  null  ||  raw.isPrimitive())  {  [CE]  ')'  expected  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  [Delete]  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive())    {    if(raw  [Delete]  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  ')'  expected	59	None	add
150	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  [BUGGY]  null  ||  raw.isPrimitive())  {  [CE]  ')'  expected  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw  [BUGGY]  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive())    {    if(raw  [BUGGY]  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  ')'  expected	59	None	add
151	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  gson.getRawType();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  gson.getRawType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  gson.getRawType();	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
152	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.getRawClass();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  type.getRawClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.getRawClass();	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
153	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.getRawQualifiedName();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  type.getRawQualifiedName();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.getRawQualifiedName();	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
154	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.getRawParameterType(0);  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  type.getRawParameterType(0);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.getRawParameterType(0);	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
155	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.getRawSuperType();  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  type.getRawSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.getRawSuperType();	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
156	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.getReturnType();  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  type.getReturnType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.getReturnType();	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
157	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
158	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
160	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
161	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
162	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
163	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
164	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
165	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
166	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  If(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  If(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    If(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	44	None	add
167	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.class)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.class)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(Object.class)||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
168	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignedFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignedFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignedFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
169	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.Class)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(Object.Class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(Object.Class)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
170	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.equals(Object.class)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  if(!raw.equals(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    if(!raw.equals(Object.class)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
171	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
172	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
173	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  throw  new  IllegalArgumentException( " ");  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
174	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)));  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)));  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
175	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	6	None	replace
176	[BUG]  [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  this))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  this))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  getBoundFields(gson,  type,  this))  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
177	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
178	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
179	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	49	None	add
180	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
181	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
182	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw));  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw));	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
183	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
184	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  ';'  expected	191	None	add
185	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
186	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
187	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
188	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
189	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
190	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
191	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
192	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  &&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
193	[BUG]  [BUGGY]  if(!raw.isPrimitive()  &&!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  &&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
194	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
195	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
196	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
197	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
198	[BUG]  [BUGGY]  if(type.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
199	[BUG]  [BUGGY]  for(!raw.isAssignableFrom(Object.class))  {  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  for(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	for(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  not  a  statement	170	None	replace
200	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  not  a  statement	170	None	replace
201	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  not  a  statement	170	None	replace
202	[BUG]  [BUGGY]  For(!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  For(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	For(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ';'  expected	170	None	replace
203	[BUG]  [BUGGY]  if(raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isAssignableFrom(Object.class))  {  for(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  not  a  statement	170	None	replace
204	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type))  {  for(!raw.isAssignableFrom(Object.class))  {  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type))  {  for(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type))  {  for(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  not  a  statement	170	None	replace
205	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  type.isPrimitive())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	228	None	replace
206	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  raw.isPrimitive())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  raw.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	228	None	replace
207	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	228	None	replace
208	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type.class)||!raw.isAssignableFrom(Object.class))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(object.class)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
209	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(object.class)&&!raw.isAssignableFrom(Object.class))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(object.class)&&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(object.class)&&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(object.class)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
210	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(this.object.class)||!raw.isAssignableFrom(Object.class))  {  [CE]  <identifier>  expected  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(this.object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(this.object.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(object.class)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  <identifier>  expected	208	None	replace
211	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type,  type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type,  type))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	84	None	replace
212	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type,  serializedName))  {  [CE]  cannot  find  symbol  serializedName  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type,  serializedName))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type,  serializedName))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	84	None	replace
213	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type,  raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type,  raw))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	84	None	replace
214	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type,  null))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type,  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type,  null))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	84	None	replace
215	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type),  serializedName)  {  [CE]  ')'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type),  serializedName)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type),  serializedName)  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  ')'  expected	84	None	replace
216	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(type.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(type))    {    	compilable	  [FE]  IllegalArgumentException  	84	9	replace
217	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(type))    {    	compilable	  [FE]  IllegalArgumentException  	84	9	replace
218	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||  type.isAssignableFrom(raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||  type.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	84	None	replace
219	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
220	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
221	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	185	9	replace
222	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	185	9	replace
223	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	185	9	replace
224	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	185	9	replace
225	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
226	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
227	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isArray()  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
228	[BUG]  [BUGGY]  if(!raw.isArray()  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
229	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
230	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
231	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
232	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
233	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
234	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
235	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	non-compiled	[CE]  illegal  start  of  type	136	None	replace
236	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	compilable	  [FE]  IllegalArgumentException  	136	9	replace
237	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  [FE]  IllegalArgumentException  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	compilable	  [FE]  IllegalArgumentException  	136	9	replace
238	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	compilable	  [FE]  ComparisonFailure  	136	1	replace
239	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  [FE]  ComparisonFailure  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	compilable	  [FE]  ComparisonFailure  	136	1	replace
240	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
241	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
242	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    If(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	77	None	add
243	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
244	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
245	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
246	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	132	None	replace
247	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	132	None	replace
248	[BUG]  [BUGGY]  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	132	None	replace
249	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	132	None	replace
250	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
251	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
252	[BUG]  [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
253	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
254	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
255	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
256	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
257	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
258	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||!Object.class.isAssignableFrom(raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	41	None	replace
259	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [CE]  incompatible  types  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternate!=  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  incompatible  types	224	None	replace
260	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	189	9	replace
261	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	189	9	replace
262	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	189	1	replace
263	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	189	1	replace
264	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
265	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
266	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
267	[BUG]  [BUGGY]  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
268	[BUG]  [BUGGY]  if(raw  ==  null)  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
269	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	129	1	replace
270	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	129	1	replace
271	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitiveType())  {	  if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	129	None	replace
272	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  &&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  &&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    if(raw!=  null  &&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	210	None	add
273	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw  ==  null  &&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw  ==  null  &&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    if(raw  ==  null  &&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	210	None	add
274	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw  >=  null  &&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw  >=  null  &&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    if(raw  >=  null  &&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	210	None	add
275	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  If(raw!=  null  &&  raw.isPrimitive())  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  If(raw!=  null  &&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    If(raw!=  null  &&  raw.isPrimitive())  {	  	non-compiled	[CE]  ';'  expected	210	None	add
276	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw  >>  null  &&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw  >>  null  &&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    if(raw  >>  null  &&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	210	None	add
277	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw  [Delete]  null  &&  raw.isPrimitive())  {  [CE]  ')'  expected  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw  [Delete]  null  &&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    if(raw  [Delete]  null  &&  raw.isPrimitive())  {	  	non-compiled	[CE]  ')'  expected	210	None	add
278	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    if(raw!=  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	210	None	add
279	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
280	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
281	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	33	None	add
282	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
283	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&&  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
284	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
285	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
286	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
287	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
288	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
289	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
290	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
291	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
292	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
293	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
294	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(object)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  object  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(object)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(object)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  object	220	None	replace
295	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
296	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
297	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
298	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
299	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	17	1	replace
300	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	17	1	replace
301	[BUG]  [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
302	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
303	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  type.isPrimitive())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	156	None	replace
304	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  raw.isPrimitive())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	156	None	replace
305	[BUG]  [BUGGY]  if(type.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
306	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
307	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	45	9	replace
308	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	45	9	replace
309	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	45	9	replace
310	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	45	9	replace
311	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!Object.class.isAssignableFrom(raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	45	None	replace
312	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	45	9	replace
313	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	45	9	replace
314	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(this.raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  raw  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(this.raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(this.raw)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  raw	45	None	replace
315	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	45	9	replace
316	[BUG]  [BUGGY]  if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	45	9	replace
317	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(object.class))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.equals(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	172	None	replace
318	[BUG]  [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(!ObjectUtilities.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	163	None	replace
319	[BUG]  [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(!ObjectUtilities.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	163	None	replace
320	[BUG]  [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {	  if(!ObjectUtilities.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	163	None	replace
321	[BUG]  [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {	  if(!ObjectUtilities.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	163	None	replace
322	[BUG]  [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(!ObjectUtilities.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	163	None	replace
323	[BUG]  [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {	  if(!ObjectUtilities.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	163	None	replace
324	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(raw))    {    	compilable	  [FE]  ComparisonFailure  	160	1	replace
325	[BUG]  [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(raw))    {    	compilable	  [FE]  ComparisonFailure  	160	1	replace
326	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||   "java.util.ArrayList ".equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||   "java.util.ArrayList ".equals(raw))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(raw))    {    	compilable	  [FE]  IllegalArgumentException  	160	9	replace
327	[BUG]  [BUGGY]  if(raw!=  null  ||   "java.util.ArrayList ".equals(raw))  {  [FE]  IllegalArgumentException  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||   "java.util.ArrayList ".equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||   "java.util.ArrayList ".equals(raw))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(raw))    {    	compilable	  [FE]  IllegalArgumentException  	160	9	replace
328	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw.getClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw.getClass()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(raw))    {    	compilable	  [FE]  ComparisonFailure  	160	1	replace
329	[BUG]  [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw.getClass()))  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw.getClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||   "java.util.ArrayList ".equals(raw.getClass()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(raw))    {    	compilable	  [FE]  ComparisonFailure  	160	1	replace
330	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
331	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  &&!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    if(raw  ==  null  &&!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
332	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  If(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  If(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    If(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  ';'  expected	85	None	add
333	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw  >=  null  &&!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw  >=  null  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    if(raw  >=  null  &&!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
334	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  &&!raw.isAssignedFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  &&!raw.isAssignedFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    if(raw!=  null  &&!raw.isAssignedFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
335	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw  >>  null  &&!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw  >>  null  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    if(raw  >>  null  &&!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	85	None	add
336	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  &&!raw.isAssignableFrom(Object.class))  {	  if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	86	1	replace
337	[BUG]  [BUGGY]  if(raw  ==  null  &&!raw.isAssignableFrom(Object.class))  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  &&!raw.isAssignableFrom(Object.class))  {	  if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	86	1	replace
338	[BUG]  [BUGGY]  if(raw  >=  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null  ||!raw.isAssignableFrom(Object.class))  {	  if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	86	None	replace
339	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw    >=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
340	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
341	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    If(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	106	None	add
342	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  type.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
343	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isIsAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isIsAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  type.isIsAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
344	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  types.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  types.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  types.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
345	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	147	None	add
346	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	147	None	add
347	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    If(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	147	None	add
348	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!ObjectConstructor.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!ObjectConstructor.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!ObjectConstructor.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	147	None	add
349	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	147	None	add
350	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "ObjectConstructor.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||! "ObjectConstructor.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	147	None	add
351	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
352	[BUG]  [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
353	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
354	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
355	[BUG]  [BUGGY]  if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
356	[BUG]  [BUGGY]  if(raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
357	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type))  throw  new  IllegalArgumentException( " ");  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type))  throw  new  IllegalArgumentException( " ");  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type))  throw  new  IllegalArgumentException( " ");	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
358	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	65	None	replace
359	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	65	None	replace
360	[BUG]  [BUGGY]  if(raw  ==  null)  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	65	None	replace
361	[BUG]  [BUGGY]  if(raw  ==  null)  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	65	None	replace
362	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	168	None	replace
363	[BUG]  [BUGGY]  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	168	None	replace
364	[BUG]  [BUGGY]  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	168	None	replace
365	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null  &&  getBoundFields(gson,  type,  raw))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null  &&  getBoundFields(gson,  type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null  &&  getBoundFields(gson,  type,  raw))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	168	None	replace
366	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	4	None	replace
367	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	4	None	replace
368	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	4	None	replace
369	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.equals(type))  {	  if(raw    ==    null    ||!Object.class.equals(raw))    {    	compilable	  [FE]  IllegalArgumentException  	145	9	replace
370	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(type))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.equals(type))  {	  if(raw    ==    null    ||!Object.class.equals(raw))    {    	compilable	  [FE]  IllegalArgumentException  	145	9	replace
371	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Object.class.equals(raw))  {	  if(raw    ==    null    ||!Object.class.equals(raw))    {    	compilable	  [FE]  IllegalArgumentException  	145	9	replace
372	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.equals(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.equals(raw))  {	  if(raw    ==    null    ||!Object.class.equals(raw))    {    	compilable	  [FE]  IllegalArgumentException  	145	9	replace
373	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isArray())  {	  if(raw    ==    null    ||!Object.class.equals(raw))    {    	compilable	  [FE]  IllegalArgumentException  	145	9	replace
374	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isArray())  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isArray())  {	  if(raw    ==    null    ||!Object.class.equals(raw))    {    	compilable	  [FE]  IllegalArgumentException  	145	9	replace
375	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	131	9	replace
376	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	131	9	replace
377	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getRawClass();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
378	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(0);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawParameterType(0);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getRawParameterType(0);	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
379	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperType();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
380	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperClass();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSuperClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getRawSuperClass();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
381	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperClass();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getSuperClass();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
382	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
383	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
384	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&&!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
385	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	184	None	add
386	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
387	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	184	None	add
388	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw!=  null  ||  raw.isPrimitive())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.isPrimitive()))    {    	compilable	  [FE]  IllegalArgumentException  	203	9	replace
389	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null  ||  raw.isPrimitive())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.isPrimitive()))    {    	compilable	  [FE]  IllegalArgumentException  	203	9	replace
390	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  raw.isPrimitive()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  (raw  ==  null  &&  raw.isPrimitive()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.isPrimitive()))    {    	compilable	  [FE]  ComparisonFailure  	203	1	replace
391	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  raw.isPrimitive()))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  raw.isPrimitive()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  raw.isPrimitive()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.isPrimitive()))    {    	compilable	  [FE]  ComparisonFailure  	203	1	replace
392	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  raw.isPrimitive()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  (raw!=  null  &&  raw.isPrimitive()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.isPrimitive()))    {    	compilable	  [FE]  ComparisonFailure  	203	1	replace
393	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  raw.isPrimitive()))  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  raw.isPrimitive()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  raw.isPrimitive()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.isPrimitive()))    {    	compilable	  [FE]  ComparisonFailure  	203	1	replace
394	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw  ==  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw  ==  null  ||  raw.isPrimitive())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.isPrimitive()))    {    	compilable	  [FE]  IllegalArgumentException  	203	9	replace
395	[BUG]  [BUGGY]  if(raw!=  null  ||  raw  ==  null  ||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw  ==  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw  ==  null  ||  raw.isPrimitive())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.isPrimitive()))    {    	compilable	  [FE]  IllegalArgumentException  	203	9	replace
396	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
397	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
398	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  ';'  expected	226	None	add
399	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
400	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
401	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
402	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	226	None	add
403	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	179	9	replace
404	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	179	9	replace
405	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	179	9	replace
406	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	179	9	replace
407	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	179	9	replace
408	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	179	9	replace
409	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	179	9	replace
410	[BUG]  [BUGGY]  if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	179	9	replace
411	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	179	1	replace
412	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {  [FE]  ComparisonFailure  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	179	1	replace
413	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||  raw.isAssignableFrom(Object.class))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	179	None	replace
414	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	178	None	add
415	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  ';'  expected	178	None	add
416	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignedFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignedFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignedFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	178	None	add
417	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.Class)||  raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.Class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class)||  raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	178	None	add
418	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignedFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)||  raw.isAssignedFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class)||  raw.isAssignedFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	178	None	add
419	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	182	1	replace
420	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	182	1	replace
421	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
422	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	47	None	add
423	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
424	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
425	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
426	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw,  isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw,  isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(!raw,  isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	47	None	add
427	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.length()  ==  0)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.length()  ==  0)  {	  if(raw    ==    null    ||    raw.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
428	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.length()!=  0)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.length()!=  0)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.length()!=  0)  {	  if(raw    ==    null    ||    raw.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
429	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.class.isAssignableFrom(type))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.class.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.class.isAssignableFrom(type))  {	  if(raw    ==    null    ||    raw.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
430	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.length()  ==  0)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.length()  ==  0)  {	  if(raw    ==    null    ||    raw.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
431	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.getClass().length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.getClass().length()  ==  0)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.getClass().length()  ==  0)  {	  if(raw    ==    null    ||    raw.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
432	[BUG]  [BUGGY]  if(raw  ==  null  ||  type.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  type.isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  type.isEmpty())  {	  if(raw    ==    null    ||    raw.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
433	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isEmpty())  {	  if(raw    ==    null    ||    raw.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
434	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getRawType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.equals(type.getRawType()))  {	  if(raw    ==    null    ||    raw.isEmpty())    {    	compilable	  [FE]  IllegalArgumentException  	61	9	replace
435	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getRawType()))  {  [FE]  IllegalArgumentException  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getRawType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.equals(type.getRawType()))  {	  if(raw    ==    null    ||    raw.isEmpty())    {    	compilable	  [FE]  IllegalArgumentException  	61	9	replace
436	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getRawClass()))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getRawClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.equals(type.getRawClass()))  {	  if(raw    ==    null    ||    raw.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
437	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type))    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	167	None	replace
438	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))!=  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type))    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	167	None	replace
439	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type))!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type))!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type))!=  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type))    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	167	None	replace
440	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type))  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type))  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type))  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type))    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	167	None	replace
441	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  getBoundFields(gson,  type))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  getBoundFields(gson,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null  ||  getBoundFields(gson,  type))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type))    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	167	None	replace
442	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawClass();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.getRawClass();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
443	[BUG]  [BUGGY]  final  TypeToken  <  T>  raw  =  type.getRawType();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  TypeToken  <  T>  raw  =  type.getRawType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  TypeToken  <  T>  raw  =  type.getRawType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
444	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawQualifiedName();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawQualifiedName();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.getRawQualifiedName();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
445	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawParameterType(0);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawParameterType(0);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.getRawParameterType(0);	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
446	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawName();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawName();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.getRawName();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
447	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	78	9	replace
448	[BUG]  [BUGGY]  if(raw!=  null  ||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	78	9	replace
449	[BUG]  [BUGGY]  if(raw  ==  null  ||  gson.isArray()  ||  Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  gson.isArray()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  gson.isArray()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
450	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Object.class.isAssignableFrom(type))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	78	None	replace
451	[BUG]  [BUGGY]  if(raw  ==  null  ||  Raw.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Raw.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Raw.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
452	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
453	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
454	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
455	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
456	[BUG]  [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
457	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
458	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
459	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
460	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  If(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    If(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	104	None	add
461	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
462	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
463	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw,  isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw,  isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    if(raw,  isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	104	None	add
464	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||   "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||   "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||   "Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	104	None	add
465	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	76	None	replace
466	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)&&  raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)&&  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type)&&  raw.isAssignableFrom(type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	76	None	replace
467	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isAssignableFrom(type))    {    	compilable	  [FE]  ComparisonFailure  	76	1	replace
468	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isAssignableFrom(type))    {    	compilable	  [FE]  ComparisonFailure  	76	1	replace
469	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  serializedName))  {  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  serializedName))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  serializedName))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	76	None	replace
470	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||  type.isPrimitiveType())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
471	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class)||  type.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
472	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive()  ||  raw.isInterface())  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive()  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive()  ||  raw.isInterface())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
473	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	148	9	replace
474	[BUG]  [BUGGY]  if(raw!=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	148	9	replace
475	[BUG]  [BUGGY]  if(raw  >=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	148	None	replace
476	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  ObjectConstructor.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	148	1	replace
477	[BUG]  [BUGGY]  if(raw  ==  null  ||  ObjectConstructor.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  ObjectConstructor.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	148	1	replace
478	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectConstructor.Class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	148	None	replace
479	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {  [CE]  ')'  expected  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null)    {    	non-compiled	[CE]  ')'  expected	157	None	replace
480	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {  [CE]  ')'  expected  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null)    {    	non-compiled	[CE]  ')'  expected	157	None	replace
481	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	157	None	replace
482	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type.getRawType())!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type.getRawType())!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type.getRawType())!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	157	None	replace
483	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  getBoundFields(gson,  type.getRawType())!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  getBoundFields(gson,  type.getRawType())!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null  ||  getBoundFields(gson,  type.getRawType())!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	157	None	replace
484	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type.getRawType())!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type.getRawType())!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type.getRawType())!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	157	None	replace
485	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
486	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
487	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  If(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  If(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    If(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  ';'  expected	128	None	add
488	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
489	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
490	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(!Object.class.isAssignableFrom(raw)||  Raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
491	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
492	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isArray()  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
493	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	31	None	add
494	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
495	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isObject()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isObject()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isObject()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
496	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isArray()  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	31	None	add
497	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isArray()  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isArray()  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	31	None	add
498	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class,  type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class,  type))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	87	None	replace
499	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)&&!raw.isAssignableFrom(Object.class))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)&&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)&&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	87	None	replace
500	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type,  serializedName)||!raw.isAssignableFrom(Object.class))  {  [CE]  cannot  find  symbol  serializedName  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type,  serializedName)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type,  serializedName)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	87	None	replace
501	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isAssignableFrom(raw)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(type.isAssignableFrom(raw)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	87	9	replace
502	[BUG]  [BUGGY]  if(type.isAssignableFrom(raw)||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isAssignableFrom(raw)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type.isAssignableFrom(raw)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	87	9	replace
503	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Type.class,  type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Type.class,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Type.class,  type))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	87	None	replace
504	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type,  type)||!raw.isAssignableFrom(Object.class))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type,  type)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type,  type)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	87	None	replace
505	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  type.getConstructor();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  type.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  type.getConstructor();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
506	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  raw  ==  null?  null  :  raw.getConstructor();  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  raw  ==  null?  null  :  raw.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  raw  ==  null?  null  :  raw.getConstructor();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
507	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  raw!=  null?  null  :  raw.getConstructor();  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  raw!=  null?  null  :  raw.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  raw!=  null?  null  :  raw.getConstructor();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
508	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  raw.getConstructor(type);  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  raw.getConstructor(type);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  raw.getConstructor(type);	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
509	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  source.getConstructor();  [CE]  illegal  start  of  type  [FE]                                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  source.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  source.getConstructor();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
510	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!   "Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	135	1	replace
511	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!type.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!   "Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	135	1	replace
512	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Serializable.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Serializable.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Serializable.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	135	None	replace
513	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!   "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!   "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!   "Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  unclosed  string  literal	135	None	replace
514	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!type.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
515	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!StringUtils.isNotEmpty(raw))  {  [CE]  cannot  find  symbol  StringUtils  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!StringUtils.isNotEmpty(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!StringUtils.isNotEmpty(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  StringUtils	135	None	replace
516	[BUG]  [BUGGY]  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  illegal  start  of  type	222	None	replace
517	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
518	[BUG]  [BUGGY]  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  illegal  start  of  type	222	None	replace
519	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  alternative  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternative  ==  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol  alternative	222	None	replace
520	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  raw;  }  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  raw;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getRawType();  if(raw!=  null)  {  return  raw;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  illegal  start  of  type	222	None	replace
521	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  }	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
522	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  }	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
523	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  }	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
524	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
525	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  }	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
526	[BUG]  [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  [CE]  illegal  start  of  type  [FE]                          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  getBoundFields(gson,  type,  raw));	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
527	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw));	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
528	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  }	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
529	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
530	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
531	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
532	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
533	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
534	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	42	None	add
535	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||.Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||.Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||.Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
536	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  >>  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
537	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
538	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    if(raw!=  null  ||  raw.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
539	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  If(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  If(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    If(raw  ==  null  ||  raw.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	57	None	add
540	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
541	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  >=  null  ||  raw.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  >=  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    if(raw  >=  null  ||  raw.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
542	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.getAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.getAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.getAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
543	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.hasAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.hasAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.hasAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
544	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	26	1	replace
545	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	26	1	replace
546	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	26	9	replace
547	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	26	9	replace
548	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	26	None	replace
549	[BUG]  [BUGGY]  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	165	None	replace
550	[BUG]  [BUGGY]  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	165	None	replace
551	[BUG]  [BUGGY]  Object.class,!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Object.class,!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Object.class,!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	165	None	replace
552	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(raw)||  Constructor.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor.class.isAssignableFrom(raw)||  Constructor.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor.class.isAssignableFrom(raw)||  Constructor.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	165	None	replace
553	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(raw)||  Constructor.class.isAssignableFrom(raw)||  Constructor.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor.class.isAssignableFrom(raw)||  Constructor.class.isAssignableFrom(raw)||  Constructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor.class.isAssignableFrom(raw)||  Constructor.class.isAssignableFrom(raw)||  Constructor.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	165	None	replace
554	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	165	None	replace
555	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
556	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
557	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
558	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
559	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	215	None	add
560	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
561	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
562	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
563	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
564	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  If(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  If(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    If(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  ';'  expected	206	None	add
565	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.isAssignedFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.isAssignedFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    if(!raw.isPrimitive()  ||!raw.isAssignedFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
566	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.isIsAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.isIsAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    if(!raw.isPrimitive()  ||!raw.isIsAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
567	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||! "raw.isAssignableFrom(Object.class))  {  [CE]  unclosed  string  literal  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||! "raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    if(!raw.isPrimitive()  ||! "raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  unclosed  string  literal	206	None	add
568	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
569	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())  >=  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())  >=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())  >=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
570	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
571	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
572	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    If(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  ';'  expected	188	None	add
573	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  >=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
574	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw!=  null  &&!Object.Class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
575	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  >>  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  >>  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  >>  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
576	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	compilable	  [FE]  ComparisonFailure  	196	1	replace
577	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [FE]  ComparisonFailure  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	compilable	  [FE]  ComparisonFailure  	196	1	replace
578	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	compilable	  [FE]  IllegalArgumentException  	196	9	replace
579	[BUG]  [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	compilable	  [FE]  IllegalArgumentException  	196	9	replace
580	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	196	None	replace
581	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	compilable	  [FE]  IllegalArgumentException  	196	9	replace
582	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	compilable	  [FE]  IllegalArgumentException  	196	9	replace
583	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	196	None	replace
584	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
585	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
586	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw  ==  null  ||  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
587	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  ||  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw!=  null  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw!=  null  ||  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
588	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  If(raw  ==  null  ||  raw.isArray())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  If(raw  ==  null  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    If(raw  ==  null  ||  raw.isArray())  {	  	non-compiled	[CE]  ';'  expected	55	None	add
589	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw  ==  null  ||  raw.isAssignableFrom(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
590	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isObject())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isObject())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw  ==  null  ||  raw.isObject())  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
591	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isEnum())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isEnum())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw  ==  null  ||  raw.isEnum())  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
592	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  >=  null  ||  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  >=  null  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw  >=  null  ||  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
593	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    	compilable	  [FE]  IllegalArgumentException  	195	9	replace
594	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    	compilable	  [FE]  IllegalArgumentException  	195	9	replace
595	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	195	None	replace
596	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
597	[BUG]  [BUGGY]  if(raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	195	None	replace
598	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	34	9	replace
599	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	34	9	replace
600	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	34	1	replace
601	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	34	1	replace
602	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	34	9	replace
603	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	34	9	replace
604	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	34	1	replace
605	[BUG]  [BUGGY]  if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	34	1	replace
606	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
607	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
608	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
609	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
610	[BUG]  [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
611	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
612	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
613	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Type.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
614	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
615	[BUG]  [BUGGY]  if(raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
616	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
617	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Type.class))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
618	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(type.getRawClass()))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(type.getRawClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(type.getRawClass()))  {	  if(!raw.isAssignableFrom(Type.class))    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
619	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class)||  raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Type.class)||  raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
620	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class)||  raw.isAssignableFrom(Type.class))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class)||  raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class)||  raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
621	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	216	9	replace
622	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	216	9	replace
623	[BUG]  [BUGGY]  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	216	None	replace
624	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  &&  raw.isPrimitive())  {	  if(raw!=    null    &&    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	211	1	replace
625	[BUG]  [BUGGY]  if(raw  ==  null  &&  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  &&  raw.isPrimitive())  {	  if(raw!=    null    &&    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	211	1	replace
626	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {	  if(raw!=    null    &&    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	211	1	replace
627	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {	  if(raw!=    null    &&    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	211	1	replace
628	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {	  if(raw!=    null    &&    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	211	1	replace
629	[BUG]  [BUGGY]  if(raw  ==  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {	  if(raw!=    null    &&    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	211	1	replace
630	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
631	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
632	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  If(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
633	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type))  {  If(!raw.isAssignableFrom(type))  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type))  {  If(!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type))  {  If(!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
634	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  If(!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  If(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  If(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
635	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
636	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
637	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  	non-compiled	[CE]  ';'  expected	141	None	add
638	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)&&  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)&&  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
639	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
640	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
641	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)&&  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)&&  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
642	[BUG]  [BUGGY]  if(raw!=  null  ||!ObjectUtil.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!ObjectUtil.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!ObjectUtil.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!ObjectUtil.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	149	None	replace
643	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isExpressionNode(raw))  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isExpressionNode(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.isExpressionNode(raw))  {	  if(raw    ==    null    ||!ObjectUtil.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	149	None	replace
644	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isFunctionAnonymous(raw))  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isFunctionAnonymous(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.isFunctionAnonymous(raw))  {	  if(raw    ==    null    ||!ObjectUtil.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	149	None	replace
645	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!ObjectUtil.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	149	None	replace
646	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)&&  getBoundFields(gson,  type,  raw))  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)&&  getBoundFields(gson,  type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)&&  getBoundFields(gson,  type,  raw))  {	  if(raw    ==    null    ||!ObjectUtil.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	149	None	replace
647	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(raw!=  null  ||!raw.isAssignableFrom(type))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
648	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(raw!=  null  ||!raw.isAssignableFrom(type))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
649	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
650	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(this))  {  if(raw!=  null  ||!raw.isAssignableFrom(this))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(this))  {  if(raw!=  null  ||!raw.isAssignableFrom(this))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(this))  {  if(raw!=  null  ||!raw.isAssignableFrom(this))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
651	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(raw!=  null  ||!raw.isAssignableFrom(type))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
652	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
653	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Type.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Type.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
654	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Type.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Type.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Type.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
655	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    If(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	139	None	add
656	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "Type.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||! "Type.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	139	None	add
657	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Type.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||!Type.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
658	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class))    {    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
659	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class))    {    	non-compiled	[CE]  illegal  start  of  expression	171	None	replace
660	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw    [Delete]    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
661	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(raw!=  null  &&!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(raw!=  null  &&!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(type))  {  if(raw!=  null  &&!raw.isAssignableFrom(type))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
662	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!   "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!   "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!   "Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  unclosed  string  literal	173	None	replace
663	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!   "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!   "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!   "Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  unclosed  string  literal	173	None	replace
664	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  &&!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(raw!=  null  &&!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(raw!=  null  &&!raw.isAssignableFrom(type))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
665	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  type.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
666	[BUG]  [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
667	[BUG]  [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	126	None	replace
668	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  serializedName.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  serializedName.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  serializedName.isPrimitive()  ||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	126	None	replace
669	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||  type.isPrimitive()  ||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
670	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  &&  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  &&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  type.isPrimitive()  &&  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
671	[BUG]  [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(!ObjectUtil.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
672	[BUG]  [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {	  if(!ObjectUtil.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
673	[BUG]  [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(!ObjectUtil.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
674	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  raw.isAssignableFrom(Object.class))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	105	1	replace
675	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isAssignableFrom(Object.class))  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isAssignableFrom(Object.class))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	105	1	replace
676	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	105	9	replace
677	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	105	9	replace
678	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isArray()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  raw.isArray()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	105	9	replace
679	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isArray()  ||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isArray()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isArray()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	105	9	replace
680	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(type))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	105	None	replace
681	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    {    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
682	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    {    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
683	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    {    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	164	None	replace
684	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
685	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
686	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	99	None	add
687	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
688	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
689	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	99	None	add
690	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.getPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.getPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.getPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
691	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  ==  null  ||!Object.class.equals(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  ==  null  ||!Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.equals(raw))    {    if(raw  ==  null  ||!Object.class.equals(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
692	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw!=  null  ||!Object.class.equals(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw!=  null  ||!Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.equals(raw))    {    if(raw!=  null  ||!Object.class.equals(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
693	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  If(raw  ==  null  ||!Object.class.equals(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  If(raw  ==  null  ||!Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.equals(raw))    {    If(raw  ==  null  ||!Object.class.equals(raw))  {	  	non-compiled	[CE]  ';'  expected	144	None	add
694	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  ==  null  ||!Object.Class.equals(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  ==  null  ||!Object.Class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.equals(raw))    {    if(raw  ==  null  ||!Object.Class.equals(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
695	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  >=  null  ||!Object.class.equals(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  >=  null  ||!Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.equals(raw))    {    if(raw  >=  null  ||!Object.class.equals(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
696	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  ==  null  ||! "Object.class.equals(raw))  {  [CE]  unclosed  string  literal  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  ==  null  ||! "Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.equals(raw))    {    if(raw  ==  null  ||! "Object.class.equals(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	144	None	add
697	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
698	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type,  raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type,  raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	75	None	replace
699	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type,  type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type,  type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	75	None	replace
700	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type),  raw)  {  [CE]  ')'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type),  raw)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type),  raw)  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
701	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  raw.isArray())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||  raw.isArray())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	75	None	replace
702	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type),  type)  {  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type),  type)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type),  type)  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  ')'  expected	75	None	replace
703	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isAssignableFrom(type))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	107	None	replace
704	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
705	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
706	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
707	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
708	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isUnknownType()  ||  type.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isUnknownType()  ||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isUnknownType()  ||  type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
709	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isSubtype(type.getRawType()))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isSubtype(type.getRawType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isSubtype(type.getRawType()))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
710	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isArray())  {  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  type.isArray())  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
711	[BUG]  [BUGGY]  if(raw  ==  null  ||  Array.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Array.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Array.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Array.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
712	[BUG]  [BUGGY]  if(raw  ==  null  ||!Arrays.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Arrays.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Arrays.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Array.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
713	[BUG]  [BUGGY]  if(raw  ==  null  ||!ArrayUtils.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  ArrayUtils  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ArrayUtils.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ArrayUtils.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Array.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ArrayUtils	79	None	replace
714	[BUG]  [BUGGY]  if(raw  ==  null  ||!ArrayUtil.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  ArrayUtil  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ArrayUtil.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ArrayUtil.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Array.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ArrayUtil	79	None	replace
715	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	48	9	replace
716	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	48	9	replace
717	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	48	9	replace
718	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	48	9	replace
719	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	48	1	replace
720	[BUG]  [BUGGY]  if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	48	1	replace
721	[BUG]  [BUGGY]  if(raw  >=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	48	None	replace
722	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(type))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	48	None	replace
723	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	138	9	replace
724	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	138	9	replace
725	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isInterface())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	138	1	replace
726	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isInterface())  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isInterface())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	138	1	replace
727	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isSubtype(type))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isSubtype(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isSubtype(type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	138	None	replace
728	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	24	9	replace
729	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	24	9	replace
730	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(type.getRawType()))    {    	compilable	  [FE]  ComparisonFailure  	201	1	replace
731	[BUG]  [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(type.getRawType()))    {    	compilable	  [FE]  ComparisonFailure  	201	1	replace
732	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(type.getRawType()))    {    	compilable	  [FE]  IllegalArgumentException  	201	9	replace
733	[BUG]  [BUGGY]  if(raw!=  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {  [FE]  IllegalArgumentException  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||   "java.util.ArrayList ".equals(type.getRawType()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(type.getRawType()))    {    	compilable	  [FE]  IllegalArgumentException  	201	9	replace
734	[BUG]  [BUGGY]  if(raw  ==  null  ||  serializedName.equals(type.getRawType()))  {  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  serializedName.equals(type.getRawType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  serializedName.equals(type.getRawType()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(type.getRawType()))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	201	None	replace
735	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
736	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
737	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
738	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
739	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	219	None	add
740	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
741	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
742	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
743	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
744	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
745	[BUG]  [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
746	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  ComparisonFailure  	158	1	replace
747	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  ComparisonFailure  	158	1	replace
748	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  ComparisonFailure  	158	1	replace
749	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [FE]  ComparisonFailure  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  ComparisonFailure  	158	1	replace
750	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  IllegalArgumentException  	158	9	replace
751	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [FE]  IllegalArgumentException  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  IllegalArgumentException  	158	9	replace
752	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  IllegalArgumentException  	158	9	replace
753	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [FE]  IllegalArgumentException  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  IllegalArgumentException  	158	9	replace
754	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  IllegalArgumentException  	158	9	replace
755	[BUG]  [BUGGY]  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  IllegalArgumentException  	158	9	replace
756	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
757	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	20	None	replace
758	[BUG]  [BUGGY]  if(raw!=  null)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
759	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	20	None	replace
760	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
761	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
762	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Gradient.class))  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Gradient.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Gradient.class))  {	  if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
763	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  raw.getConstructor();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  raw.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  raw.getConstructor();	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
764	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  type.getConstructor();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  type.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  type.getConstructor();	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
765	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.getConstructor(raw);  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  gson.getConstructor(raw);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.getConstructor(raw);	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
766	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.getConstructor(type);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  gson.getConstructor(type);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.getConstructor(type);	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
767	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.getFactory();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  gson.getFactory();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.getFactory();	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
768	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.getConstructorInstance();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  gson.getConstructorInstance();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.getConstructorInstance();	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
769	[BUG]  [BUGGY]  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())!=    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	166	None	replace
770	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())!=    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	166	None	replace
771	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  >=  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  >=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  >=  null))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())!=    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	166	None	replace
772	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	192	1	replace
773	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	192	1	replace
774	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isSubtype(type))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isSubtype(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isSubtype(type))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	192	None	replace
775	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	192	9	replace
776	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	192	9	replace
777	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type)))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
778	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type)))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
779	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
780	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	180	None	replace
781	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	180	None	replace
782	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class)||!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	180	None	replace
783	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type,  type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type,  type))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	180	None	replace
784	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type,  serializedName))  {  [CE]  cannot  find  symbol  serializedName  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type,  serializedName))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type,  serializedName))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	180	None	replace
785	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type,  Object.class)||!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type,  Object.class)||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type,  Object.class)||!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	180	None	replace
786	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(TypeToken.class)||!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(TypeToken.class)||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(TypeToken.class)||!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	180	None	replace
787	[BUG]  [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawClass()))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||   "java.util.ArrayList ".equals(type.getRawClass()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(type.getRawClass()))    {    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
788	[BUG]  [BUGGY]  if(raw!=  null  ||   "java.util.ArrayList ".equals(type.getRawClass()))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||   "java.util.ArrayList ".equals(type.getRawClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||   "java.util.ArrayList ".equals(type.getRawClass()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(type.getRawClass()))    {    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
789	[BUG]  [BUGGY]  if(raw  ==  null  ||  serializedName.equals(type.getRawClass()))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  serializedName.equals(type.getRawClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  serializedName.equals(type.getRawClass()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(type.getRawClass()))    {    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
790	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive!    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
791	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(type))  {  return  null;  }  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(type))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type))  {  if(!raw.isAssignableFrom(type))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive!    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	73	None	replace
792	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
793	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
794	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
795	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	40	None	add
796	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
797	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
798	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
799	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
800	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
801	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	29	None	add
802	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
803	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
804	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	29	None	add
805	[BUG]  [BUGGY]  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternate;  }  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  illegal  start  of  type	223	None	replace
806	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	223	None	replace
807	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternate  ==  null)  {  return  alternate;  }  [CE]  incompatible  types  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternate  ==  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternate  ==  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  incompatible  types	223	None	replace
808	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
809	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
810	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    If(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	122	None	add
811	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  &&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
812	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  &&!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
813	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&! "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&! "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  &&! "Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	122	None	add
814	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
815	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw.isInterface())  {	  if(raw    ==    null    ||    raw.isInterface())    {    	compilable	  [FE]  IllegalArgumentException  	54	9	replace
816	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isInterface())  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isInterface())  {	  if(raw    ==    null    ||    raw.isInterface())    {    	compilable	  [FE]  IllegalArgumentException  	54	9	replace
817	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAbstract())  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAbstract())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAbstract())  {	  if(raw    ==    null    ||    raw.isInterface())    {    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
818	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
819	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [CE]  ';'  expected  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  	non-compiled	[CE]  ';'  expected	154	None	add
820	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw)||  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw)||  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
821	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw)||  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw)||  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
822	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
823	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  alternative  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternative!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol  alternative	175	None	replace
824	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternative;  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternative;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternative;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
825	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
826	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
827	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
828	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
829	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
830	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
831	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
832	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
833	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
834	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
835	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.isInterface())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isInterface())    {    if(raw  ==  null  ||  raw.isInterface())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
836	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw!=  null  ||  raw.isInterface())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw!=  null  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isInterface())    {    if(raw!=  null  ||  raw.isInterface())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
837	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  If(raw  ==  null  ||  raw.isInterface())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  If(raw  ==  null  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isInterface())    {    If(raw  ==  null  ||  raw.isInterface())  {	  	non-compiled	[CE]  ';'  expected	53	None	add
838	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  >=  null  ||  raw.isInterface())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  >=  null  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isInterface())    {    if(raw  >=  null  ||  raw.isInterface())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
839	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.getInterface())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.getInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isInterface())    {    if(raw  ==  null  ||  raw.getInterface())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
840	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.isinterface())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.isinterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isInterface())    {    if(raw  ==  null  ||  raw.isinterface())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
841	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.hasInterface())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.hasInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isInterface())    {    if(raw  ==  null  ||  raw.hasInterface())  {	  	non-compiled	[CE]  illegal  start  of  expression	53	None	add
842	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	100	9	replace
843	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Type.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	100	9	replace
844	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!TypeUtil.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!TypeUtil.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!TypeUtil.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	100	None	replace
845	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type,  type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type,  type))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	103	None	replace
846	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type,  raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type,  raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	103	None	replace
847	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  type.isAssignableFrom(Object.class))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(type))    {    	compilable	  [FE]  ComparisonFailure  	103	1	replace
848	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(Object.class))  {  [FE]  ComparisonFailure  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  type.isAssignableFrom(Object.class))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(type))    {    	compilable	  [FE]  ComparisonFailure  	103	1	replace
849	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type,  serializedName))  {  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type,  serializedName))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type,  serializedName))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  serializedName	103	None	replace
850	[BUG]  [BUGGY]  if(type.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol	103	None	replace
851	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive())    {    if(raw  ==  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
852	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive())    {    if(raw!=  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
853	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw  ==  null  ||  raw.isPrimitive())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw  ==  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive())    {    If(raw  ==  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  ';'  expected	51	None	add
854	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  >=  null  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  >=  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive())    {    if(raw  >=  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
855	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  raw.hasPrimitive())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  raw.hasPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive())    {    if(raw  ==  null  ||  raw.hasPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
856	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  >>  null  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  >>  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive())    {    if(raw  >>  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
857	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  raw.getPrimitive())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  raw.getPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive())    {    if(raw  ==  null  ||  raw.getPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
858	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isEmpty())  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isEmpty())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
859	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	142	9	replace
860	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	142	9	replace
861	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isUnknownType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isUnknownType())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
862	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(type))  {	  if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	218	None	replace
863	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	218	9	replace
864	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	218	9	replace
865	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||?!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
866	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||?!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
867	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||?Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||?!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
868	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	43	9	replace
869	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	43	9	replace
870	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw)    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	14	1	replace
871	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {  [FE]  ComparisonFailure  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw)    ==    null)    {    	compilable	  [FE]  ComparisonFailure  	14	1	replace
872	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw)    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	14	9	replace
873	[BUG]  [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  getBoundFields(gson,  type,  raw)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw)    ==    null)    {    	compilable	  [FE]  IllegalArgumentException  	14	9	replace
874	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type)  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw)    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
875	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	133	None	replace
876	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
877	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
878	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	23	None	add
879	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
880	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
881	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
882	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
883	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	227	1	replace
884	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	227	1	replace
885	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	227	1	replace
886	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isInterface())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	227	1	replace
887	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isSubtype(type))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isSubtype(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isSubtype(type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
888	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	50	9	replace
889	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	50	9	replace
890	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	50	9	replace
891	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	50	9	replace
892	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	50	9	replace
893	[BUG]  [BUGGY]  if(raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	50	9	replace
894	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!Type.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	140	9	replace
895	[BUG]  [BUGGY]  if(raw!=  null  ||!Type.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Type.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	140	9	replace
896	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	140	1	replace
897	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	140	1	replace
898	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Type.Class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	140	None	replace
899	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isArray())  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	140	1	replace
900	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isArray())  {  [FE]  ComparisonFailure  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Type.class.isAssignableFrom(raw)&&  raw.isArray())  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	140	1	replace
901	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawClass();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  gson.getRawClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.getRawClass();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
902	[BUG]  [BUGGY]  final  TypeToken  <  T>  raw  =  gson.getRawType();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  TypeToken  <  T>  raw  =  gson.getRawType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  TypeToken  <  T>  raw  =  gson.getRawType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
903	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getType();  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  gson.getType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.getType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
904	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getConstructorType();  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  gson.getConstructorType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.getConstructorType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
905	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getConstructor();  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  gson.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.getConstructor();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
906	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw!=  null  ||  raw.equals(type))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw!=  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.equals(type))    {    if(raw!=  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	212	None	add
907	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw  ==  null  ||  raw.equals(type))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw  ==  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.equals(type))    {    if(raw  ==  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	212	None	add
908	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  If(raw!=  null  ||  raw.equals(type))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  If(raw!=  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.equals(type))    {    If(raw!=  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  ';'  expected	212	None	add
909	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw  >=  null  ||  raw.equals(type))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw  >=  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.equals(type))    {    if(raw  >=  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	212	None	add
910	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw  >>  null  ||  raw.equals(type))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw  >>  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.equals(type))    {    if(raw  >>  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	212	None	add
911	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw  [Delete]  null  ||  raw.equals(type))  {  [CE]  ')'  expected  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.equals(type))  {  if(raw  [Delete]  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.equals(type))    {    if(raw  [Delete]  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  ')'  expected	212	None	add
912	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())    ==    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	169	None	replace
913	[BUG]  [BUGGY]  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())    ==    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	169	None	replace
914	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type.getRawType())  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type.getRawType())  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type.getRawType())  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())    ==    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	169	None	replace
915	[BUG]  [BUGGY]  Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	153	None	replace
916	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	153	None	replace
917	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(raw)||!Constructor.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor.class.isAssignableFrom(raw)||!Constructor.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor.class.isAssignableFrom(raw)||!Constructor.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	153	None	replace
918	[BUG]  [BUGGY]  Annotated.class.isAssignableFrom(raw)||!Annotation.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Annotated.class.isAssignableFrom(raw)||!Annotation.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Annotated.class.isAssignableFrom(raw)||!Annotation.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	153	None	replace
919	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  type.isPrimitiveType())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	193	None	replace
920	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  raw.isPrimitiveType())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  raw.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  raw.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	193	None	replace
921	[BUG]  [BUGGY]  if(type.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
922	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	193	None	replace
923	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
924	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
925	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isInterface())  {  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
926	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
927	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
928	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
929	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
930	[BUG]  [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()  ||!Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	32	None	replace
931	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
932	[BUG]  [BUGGY]  if(raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
933	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
934	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
935	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
936	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
937	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
938	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
939	[BUG]  [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type)  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  getBoundFields(gson,  type)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type)    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	16	None	replace
940	[BUG]  [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type)!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  getBoundFields(gson,  type)!=  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type)    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	16	None	replace
941	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type)  >=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type)  >=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type)  >=  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type)    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	16	None	replace
942	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(value)||!Object.class.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(value)||!Object.class.isAssignableFrom(value))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(value)||!Object.class.isAssignableFrom(value))  {	  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  value	46	None	replace
943	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(scope)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  scope  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(scope)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(scope)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  scope	46	None	replace
944	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(resource)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  resource  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(resource)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(resource)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  resource	46	None	replace
945	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(source)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  source  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(source)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(source)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  source	46	None	replace
946	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(collection)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  collection  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(collection)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(collection)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  collection	46	None	replace
947	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  throw  new  IllegalArgumentException( " ");  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
948	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  return  null;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  return  null;  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	205	None	replace
949	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  throw  new  IllegalStateException( " ");  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
950	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	5	None	replace
951	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw)).isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  raw)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
952	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)).isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  raw)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
953	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  getBoundFields(gson,  type,  raw)).isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  getBoundFields(gson,  type,  raw)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null  ||  getBoundFields(gson,  type,  raw)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
954	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
955	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  null)).isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  null)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type,  null)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
956	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignableFrom(Type.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class))    {    if(!raw.isAssignableFrom(Type.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
957	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  If(!raw.isAssignableFrom(Type.class))  {  [CE]  ';'  expected  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  If(!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class))    {    If(!raw.isAssignableFrom(Type.class))  {	  	non-compiled	[CE]  ';'  expected	90	None	add
958	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignedFrom(Type.class))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignedFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class))    {    if(!raw.isAssignedFrom(Type.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
959	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignableFrom(Type.Class))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignableFrom(Type.Class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class))    {    if(!raw.isAssignableFrom(Type.Class))  {	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
960	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  Class  <?  super  T>  raw  =  type.getRawType();  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  Class  <?  super  T>  raw  =  type.getRawType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class))    {    Class  <?  super  T>  raw  =  type.getRawType();	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
961	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isAssignableFrom(type))  {	  if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	58	None	replace
962	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(this))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(this))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(this))  {	  if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	58	None	replace
963	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(value))  {  [CE]  cannot  find  symbol  value  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(value))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(value))  {	  if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  value	58	None	replace
964	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||  raw.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	58	9	replace
965	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	58	9	replace
966	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(scope))  {  [CE]  cannot  find  symbol  scope  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(scope))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(scope))  {	  if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  scope	58	None	replace
967	[BUG]  [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	217	None	add
968	[BUG]  [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(type!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	217	None	add
969	[BUG]  [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	217	None	add
970	[BUG]  [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(type  ==  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	217	None	add
971	[BUG]  [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	217	None	add
972	[BUG]  [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(type  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	217	None	add
973	[BUG]  [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(!ObjectUtil.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	162	None	replace
974	[BUG]  [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(!ObjectUtil.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	162	None	replace
975	[BUG]  [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(!ObjectUtil.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	162	None	replace
976	[BUG]  [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isInterface())  {	  if(!ObjectUtil.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	162	None	replace
977	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
978	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
979	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
980	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
981	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
982	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	181	None	add
983	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  >>  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
984	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||!Object.Class.isAssignableFrom(raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(type)||!Object.Class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	186	None	replace
985	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	186	None	replace
986	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
987	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
988	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  If(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  If(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    If(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  ';'  expected	80	None	add
989	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  ==  null  ||!raw.isAssignedFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
990	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  >=  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  >=  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  >=  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
991	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||! "raw.isAssignableFrom(Object.class))  {  [CE]  unclosed  string  literal  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||! "raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  ==  null  ||! "raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  unclosed  string  literal	80	None	add
992	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawClass();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  Class  <?  super  T>  raw  =  type.getRawClass();	  final    Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
993	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawParameterType(0);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawParameterType(0);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  Class  <?  super  T>  raw  =  type.getRawParameterType(0);	  final    Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
994	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getSuperClass();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  Class  <?  super  T>  raw  =  type.getSuperClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  Class  <?  super  T>  raw  =  type.getSuperClass();	  final    Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
995	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawSuperType();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  Class  <?  super  T>  raw  =  type.getRawSuperType();	  final    Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
996	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawSuperClass();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawSuperClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  Class  <?  super  T>  raw  =  type.getRawSuperClass();	  final    Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
997	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor(raw);  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor(raw);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  gson.getConstructor(raw);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
998	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor(type);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructor(type);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  gson.getConstructor(type);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
999	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.createConstructor(raw);  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  gson.createConstructor(raw);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  gson.createConstructor(raw);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1000	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructorInstance();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  gson.getConstructorInstance();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  gson.getConstructorInstance();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1001	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1002	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1003	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
1004	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	36	None	replace
1005	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	36	None	replace
1006	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1007	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1008	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1009	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1010	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1011	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1012	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	30	None	replace
1013	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1014	[BUG]  [BUGGY]  if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1015	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1016	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1017	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [CE]  ';'  expected  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    If(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  	non-compiled	[CE]  ';'  expected	137	None	add
1018	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1019	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1020	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)&&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)&&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1021	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  Raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  Raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  Raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1022	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
1023	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
1024	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ';'  expected	25	None	add
1025	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
1026	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
1027	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  >>  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  >>  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
1028	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
1029	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
1030	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
1031	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  If(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  If(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    If(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  ';'  expected	82	None	add
1032	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  >=  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  >=  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  >=  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
1033	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  ||!raw.isAssignedFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  ||!raw.isAssignedFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw!=  null  ||!raw.isAssignedFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
1034	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  >>  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  >>  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  >>  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
1035	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  [Delete]  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  ')'  expected  [FE]                IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  [Delete]  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  [Delete]  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  ')'  expected	82	None	add
1036	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
1037	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignedFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignedFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignedFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
1038	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  ';'  expected	88	None	add
1039	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.Class)||!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.Class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class)||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
1040	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignedFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignedFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class)||!raw.isAssignedFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
1041	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)&|!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class)&|!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class)&|!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	88	None	add
1042	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  alternative  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  type.getRawType();  if(alternative!=  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol  alternative	177	None	replace
1043	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  	74	None	replace
1044	[BUG]  [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  	74	None	replace
1045	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  [CE]  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  	74	None	replace
1046	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  [CE]  [FE]                        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  	74	None	replace
1047	[BUG]  [BUGGY]  if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  	74	None	replace
1048	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  raw.equals(type)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  (raw  ==  null  &&  raw.equals(type)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.equals(type)))    {    	compilable	  [FE]  ComparisonFailure  	204	1	replace
1049	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  raw.equals(type)))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  raw.equals(type)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  raw.equals(type)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.equals(type)))    {    	compilable	  [FE]  ComparisonFailure  	204	1	replace
1050	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw!=  null  ||  raw.equals(type))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.equals(type)))    {    	compilable	  [FE]  IllegalArgumentException  	204	9	replace
1051	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  raw.equals(type))  {  [FE]  IllegalArgumentException  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null  ||  raw.equals(type))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.equals(type)))    {    	compilable	  [FE]  IllegalArgumentException  	204	9	replace
1052	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isArray()  ||  raw.equals(type))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.equals(type)))    {    	compilable	  [FE]  ComparisonFailure  	204	1	replace
1053	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||  raw.equals(type))  {  [FE]  ComparisonFailure  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray()  ||  raw.equals(type))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.equals(type)))    {    	compilable	  [FE]  ComparisonFailure  	204	1	replace
1054	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1055	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1056	[BUG]  [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  instanceof  Class  <?>)  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1057	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	194	9	replace
1058	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	194	9	replace
1059	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  raw.equals(type)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||(raw!=  null  &&  raw.equals(type)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.equals(type)))    {    	compilable	  [FE]  ComparisonFailure  	204	1	replace
1060	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  raw.equals(type)))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  raw.equals(type)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw!=  null  &&  raw.equals(type)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.equals(type)))    {    	compilable	  [FE]  ComparisonFailure  	204	1	replace
1061	[BUG]  [BUGGY]  if(!ObjectUtilities.class  ||  type.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class  ||  type.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class  ||  type.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1062	[BUG]  [BUGGY]  if(!ObjectUtilities.class.equals(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.equals(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.equals(raw)||  type.isPrimitive())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1063	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(type)||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(type)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(type)||  raw.isPrimitive())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1064	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	compilable	  [FE]  IllegalArgumentException  	136	9	replace
1065	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	compilable	  [FE]  IllegalArgumentException  	136	9	replace
1066	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	compilable	  [FE]  ComparisonFailure  	136	1	replace
1067	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw));  }	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw));    	compilable	  [FE]  ComparisonFailure  	136	1	replace
1068	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isUnknownType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isUnknownType())  {	  if(raw    ==    null    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
1069	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!ObjectConstructor.class.equals(raw))  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	148	9	replace
1070	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.equals(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectConstructor.class.equals(raw))  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	148	9	replace
1071	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperType();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  type.getSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getSuperType();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1072	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  gson.getRawType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  gson.getRawType();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1073	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.class.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
1074	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(type)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(type)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.equals(type)&&  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	225	None	replace
1075	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	225	None	replace
1076	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
1077	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
1078	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	39	9	replace
1079	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	39	9	replace
1080	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?  super  T>  alternate  =  parent.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [CE]  not  a  statement  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  parent  ==  null)  {  Class  <?  super  T>  alternate  =  parent.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	parent  ==  null)  {  Class  <?  super  T>  alternate  =  parent.getRawType();  if(alternate!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  not  a  statement	176	None	replace
1081	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&! "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&! "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&&! "Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	184	None	add
1082	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  not  a  statement	184	None	add
1083	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(value)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  value  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(value)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(value)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  value	46	None	replace
1084	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(restricted)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  restricted  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(restricted)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(restricted)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  restricted	46	None	replace
1085	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(primary)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  primary  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(primary)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(primary)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  primary	46	None	replace
1086	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  ==  null  ||.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
1087	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.getSuperType();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  type.getSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.getSuperType();	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1088	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.getConstructor();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  type.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.getConstructor();	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1089	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.getDeclaredType();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  type.getDeclaredType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.getDeclaredType();	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1090	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	48	9	replace
1091	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	48	9	replace
1092	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1093	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
1094	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
1095	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
1096	[BUG]  [BUGGY]  if(raw  ==  null)  {  for(!raw.isAssignableFrom(Object.class))  {  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  for(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  for(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  not  a  statement	170	None	replace
1097	[BUG]  [BUGGY]  if(raw!=  null)  {  for(!raw.isAssignableFrom(Object.class))  {  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  for(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  for(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  not  a  statement	170	None	replace
1098	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isEmpty())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isEmpty())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isEmpty())  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
1099	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  ||! "raw.isAssignableFrom(Object.class))  {  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  ||! "raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw!=  null  ||! "raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  unclosed  string  literal	82	None	add
1100	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type,  null)))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type,  null)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type,  null)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	4	None	replace
1101	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  Array.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  Array.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  Array.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
1102	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	104	None	add
1103	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	69	9	replace
1104	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	69	9	replace
1105	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1106	[BUG]  [BUGGY]  if(raw  >=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1107	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	23	None	add
1108	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw  {  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	23	None	add
1109	[BUG]  [BUGGY]  if(raw  ==  null)  {  If(!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  If(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  If(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
1110	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.class.isAssignedFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	209	None	replace
1111	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  return  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  return  null;  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  return  null;	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	205	None	replace
1112	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  return  null;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  return  null;  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	205	None	replace
1113	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  throw  new  IllegalArgumentException( " ");  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	205	None	replace
1114	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	40	None	add
1115	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1116	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }  [CE]  illegal  start  of  type  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1117	[BUG]  [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1118	[BUG]  [BUGGY]  if(raw  >=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null)  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	196	None	replace
1119	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(object.class))  {  return  null;  }  [CE]  cannot  find  symbol  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isAssignableFrom(object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
1120	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	137	None	add
1121	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  unclosed  string  literal	191	None	add
1122	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isprimitive())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isprimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isprimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1123	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  null))  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	11	None	replace
1124	[BUG]  [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  null))  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  getBoundFields(gson,  type,  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  getBoundFields(gson,  type,  null))  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	11	None	replace
1125	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternative;  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternative;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternative;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	224	None	replace
1126	[BUG]  [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(type  ==  null  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(type  ==  null  ||! "Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	217	None	add
1127	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(type  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
1128	[BUG]  [BUGGY]  if(type  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
1129	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw!=  null)  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	22	9	replace
1130	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null)  {  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null)  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	22	9	replace
1131	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw  ==  null)  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
1132	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null)  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null)  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&|!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	22	1	replace
1133	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  raw.getObjectConstructor();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  raw.getObjectConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  raw.getObjectConstructor();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1134	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  raw.getType();  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  raw.getType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  raw.getType();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1135	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!   "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!   "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!   "Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  unclosed  string  literal	143	None	replace
1136	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Factory.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Factory.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Factory.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1137	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1138	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1139	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isArray())  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  type.isArray())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1140	[BUG]  [BUGGY]  parent  ==  null)  {  Class  <?  super  T>  alternate  =  parent.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  not  a  statement  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  parent  ==  null)  {  Class  <?  super  T>  alternate  =  parent.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	parent  ==  null)  {  Class  <?  super  T>  alternate  =  parent.getRawType();  if(alternative!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative!=    null)    {    return    alternate;    }    	non-compiled	[CE]  not  a  statement	175	None	replace
1141	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternative  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternative  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternative  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
1142	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	38	None	replace
1143	[BUG]  [BUGGY]  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	If(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	38	None	replace
1144	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
1145	[BUG]  [BUGGY]  if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()  ||!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
1146	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
1147	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
1148	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
1149	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
1150	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.CLASS.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)||  Object.CLASS.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||  Object.CLASS.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	219	None	add
1151	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  }  [CE]  illegal  start  of  type  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
1152	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	6	None	replace
1153	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  throw  new  IllegalStateException( " ");  }  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  throw  new  IllegalStateException( " ");  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
1154	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw))));  }  [CE]  illegal  start  of  expression  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw))));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw))));  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
1155	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	20	None	replace
1156	[BUG]  [BUGGY]  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	20	None	replace
1157	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    If(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	20	None	replace
1158	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
1159	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    if(raw.isPrimitive()  ||! "Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  	non-compiled	[CE]  unclosed  string  literal	154	None	add
1160	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArgument())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArgument())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArgument())  {	  	non-compiled	[CE]  illegal  start  of  expression	154	None	add
1161	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive!    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
1162	[BUG]  [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive!    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
1163	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.equals(Object.class))  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.equals(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.equals(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.equals(Object.class))    {    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1164	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  if(!raw.equals(Object.class))  {  [CE]  illegal  start  of  expression  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  if(!raw.equals(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  if(!raw.equals(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.equals(Object.class))    {    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1165	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(target.class))  {  if(!raw.equals(target.class))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(target.class))  {  if(!raw.equals(target.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(target.class))  {  if(!raw.equals(target.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.equals(Object.class))    {    	non-compiled	[CE]  illegal  start  of  expression	172	None	replace
1166	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.getAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1167	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.getAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
1168	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isEmpty())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw  ==  null  ||  raw.isEmpty())  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
1169	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
1170	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  getBoundFields(gson,  type,  null)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	compilable	  [FE]  NullPointerException  	159	9	replace
1171	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null)!=  null)  {  [FE]  NullPointerException  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  null)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	compilable	  [FE]  NullPointerException  	159	9	replace
1172	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  false)!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  false)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  false)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	159	None	replace
1173	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  scope)!=  null)  {  [CE]  cannot  find  symbol  scope  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  scope)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  scope)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  scope	159	None	replace
1174	[BUG]  [BUGGY]  Object.class  =  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Object.class  =  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Object.class  =  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	165	None	replace
1175	[BUG]  [BUGGY]  Annotated.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Annotated.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Annotated.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	165	None	replace
1176	[BUG]  [BUGGY]  Object.class  =  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Object.class  =  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Object.class  =  raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	165	None	replace
1177	[BUG]  [BUGGY]  Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	165	None	replace
1178	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Factory.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Factory.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Factory.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1179	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!type.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!type.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1180	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!StringUtils.isNotEmpty(raw))  {  [CE]  illegal  start  of  expression  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!StringUtils.isNotEmpty(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!StringUtils.isNotEmpty(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1181	[BUG]  [BUGGY]  if(!ObjectUtil.class.equals(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.class.equals(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.class.equals(raw)||  type.isPrimitive())  {	  if(!ObjectUtil.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	125	None	replace
1182	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	84	None	replace
1183	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	84	None	replace
1184	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||  raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||  raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	84	None	replace
1185	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternative;  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternative;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate  ==  null)  {  return  alternative;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	223	None	replace
1186	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {  [CE]  illegal  start  of  expression  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
1187	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  throw  new  IllegalArgumentException( " ");  }	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1188	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  return  null;  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  return  null;  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  return  null;	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
1189	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {  return  null;  }  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  raw))  {  return  null;  }	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
1190	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	192	9	replace
1191	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	192	9	replace
1192	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getEmptyType()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getEmptyType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.equals(type.getEmptyType()))  {	  if(raw    ==    null    ||    raw.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1193	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getName()))  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getName()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.equals(type.getName()))  {	  if(raw    ==    null    ||    raw.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1194	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeAdapter  <  T>()))  {  [CE]  TypeAdapter  is  abstract;  cannot  be  instantiated  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeAdapter  <  T>()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeAdapter  <  T>()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  TypeAdapter  is  abstract;  cannot  be  instantiated	8	None	replace
1195	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeToken  <  T>()))  {  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeToken  <  T>()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeToken  <  T>()))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1196	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  false))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  false))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  false))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	8	None	replace
1197	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||   "java.util.ArrayList ".equals(type))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(raw))    {    	compilable	  [FE]  ComparisonFailure  	160	1	replace
1198	[BUG]  [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type))  {  [FE]  ComparisonFailure  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ".equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||   "java.util.ArrayList ".equals(type))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(raw))    {    	compilable	  [FE]  ComparisonFailure  	160	1	replace
1199	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Object.Class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	78	None	replace
1200	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  String.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  String.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	78	1	replace
1201	[BUG]  [BUGGY]  if(raw  ==  null  ||  String.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  String.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  String.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	78	1	replace
1202	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  Object.class.equals(raw))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	78	1	replace
1203	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.equals(raw))  {  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Object.class.equals(raw))  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	78	1	replace
1204	[BUG]  [BUGGY]  if(!ObjectConstructor.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectConstructor.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectConstructor.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isArray())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
1205	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1206	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1207	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.equals(type)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.equals(type)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.equals(type)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1208	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	156	None	replace
1209	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class,  type.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  ')'  expected  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class,  type.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class,  type.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  ')'  expected	156	None	replace
1210	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getSuperType();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  Class  <?  super  T>  raw  =  type.getSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  Class  <?  super  T>  raw  =  type.getSuperType();	  final    Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
1211	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  gson.getRawType();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  Class  <?  super  T>  raw  =  gson.getRawType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  Class  <?  super  T>  raw  =  gson.getRawType();	  final    Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
1212	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	5	None	replace
1213	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  null)).isEmpty())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  null)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  null)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	5	None	replace
1214	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null)).isEmpty())  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  null)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
1215	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  null)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  null)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  ComparisonFailure  	158	1	replace
1216	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  null)!=  null))  {  [FE]  ComparisonFailure  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  null)!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  null)!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)!=    null))    {    	compilable	  [FE]  ComparisonFailure  	158	1	replace
1217	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
1218	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	89	9	replace
1219	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||?!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1220	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||?!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1221	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||?!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	187	None	replace
1222	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  {  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  {  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  {  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	99	None	add
1223	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	179	1	replace
1224	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	179	1	replace
1225	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1226	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1227	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1228	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	30	9	replace
1229	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  not  a  statement	128	None	add
1230	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	194	None	replace
1231	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
1232	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&! "Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&! "Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&! "Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	181	None	add
1233	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw!=  null)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw!=  null)  {	  if(raw!=    null)    {    If(raw!=    null)    {    	non-compiled	[CE]  ';'  expected	197	None	replace
1234	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
1235	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object,  Class.class)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  Object  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object,  Class.class)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object,  Class.class)||  type.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  Object	124	None	replace
1236	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isAssignableFrom(Object.class)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(type.isAssignableFrom(Object.class)||  raw.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	124	1	replace
1237	[BUG]  [BUGGY]  if(type.isAssignableFrom(Object.class)||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type.isAssignableFrom(Object.class)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type.isAssignableFrom(Object.class)||  raw.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	124	1	replace
1238	[BUG]  [BUGGY]  if(!raw.equals(Object.class)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.equals(Object.class)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.equals(Object.class)||  type.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	124	None	replace
1239	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object,  type)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  Object  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object,  type)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object,  type)||  type.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  Object	124	None	replace
1240	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	100	1	replace
1241	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	100	1	replace
1242	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.getAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.getAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    if(!raw.isPrimitive()  ||!raw.getAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
1243	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.hasAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!raw.hasAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    if(!raw.isPrimitive()  ||!raw.hasAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
1244	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isFunction(raw))  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isFunction(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.isFunction(raw))  {	  if(raw    ==    null    ||!ObjectUtil.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	149	None	replace
1245	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	228	None	replace
1246	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	228	None	replace
1247	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(type)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(type)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.equals(type)||  type.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	228	None	replace
1248	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Type.class.equals(raw))  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	140	9	replace
1249	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.equals(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Type.class.equals(raw))  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	140	9	replace
1250	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!type.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	140	1	replace
1251	[BUG]  [BUGGY]  if(raw  ==  null  ||!type.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!type.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	140	1	replace
1252	[BUG]  [BUGGY]  if(raw  ==  null  ||!TypeUtil.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  TypeUtil  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!TypeUtil.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!TypeUtil.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  TypeUtil	140	None	replace
1253	[BUG]  [BUGGY]  Object.class,!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Object.class,!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Object.class,!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	153	None	replace
1254	[BUG]  [BUGGY]  Annotated.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Annotated.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Annotated.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	153	None	replace
1255	[BUG]  [BUGGY]  Constructor.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	153	None	replace
1256	[BUG]  [BUGGY]  Object.class  =  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Object.class  =  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Object.class  =  raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	153	None	replace
1257	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.getObjectConstructor();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  gson.getObjectConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  gson.getObjectConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1258	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.construct(raw);  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  gson.construct(raw);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  gson.construct(raw);	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1259	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(object.class))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	180	None	replace
1260	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	180	None	replace
1261	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isassignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isassignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  type.isassignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
1262	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  ==  null  ||.class.equals(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  ==  null  ||.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.equals(raw))    {    if(raw  ==  null  ||.class.equals(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	144	None	add
1263	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class,  raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class,  raw))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	87	None	replace
1264	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	87	None	replace
1265	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class,  name))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class,  name))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class,  name))  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	87	None	replace
1266	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  &&  raw.isPrimitive()  ||  getBoundFields(gson,  type,  raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  &&  raw.isPrimitive()  ||  getBoundFields(gson,  type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    if(raw!=  null  &&  raw.isPrimitive()  ||  getBoundFields(gson,  type,  raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	210	None	add
1267	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  &&  raw.isPrimitive()  ||  (raw!=  null  &&  raw.isPrimitive()))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  &&  raw.isPrimitive()  ||  (raw!=  null  &&  raw.isPrimitive()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    if(raw!=  null  &&  raw.isPrimitive()  ||  (raw!=  null  &&  raw.isPrimitive()))  {	  	non-compiled	[CE]  illegal  start  of  expression	210	None	add
1268	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive())  {  if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&    raw.isPrimitive())    {    if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	210	None	add
1269	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  not  a  statement	33	None	add
1270	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isArray())  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class))    {    	compilable	  [FE]  IllegalArgumentException  	171	9	replace
1271	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isArray())  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class))    {    	compilable	  [FE]  IllegalArgumentException  	171	9	replace
1272	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getSuperType();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  gson.getSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.getSuperType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1273	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getGenericType();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  gson.getGenericType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.getGenericType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1274	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getReturnType();  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  gson.getReturnType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.getReturnType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1275	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.equals(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.equals(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	57	None	add
1276	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
1277	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
1278	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
1279	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  Class  <?>  raw  =  type.getRawType();  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  Class  <?>  raw  =  type.getRawType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class))    {    Class  <?>  raw  =  type.getRawType();	  	non-compiled	[CE]  illegal  start  of  expression	90	None	add
1280	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtil.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	24	None	replace
1281	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  method))  {  [CE]  cannot  find  symbol  method  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  method))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  method))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  method	76	None	replace
1282	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  scope))  {  [CE]  cannot  find  symbol  scope  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  scope))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isAssignableFrom(type,  scope))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  scope	76	None	replace
1283	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternative;  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternative;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternative;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1284	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||.Type.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||.Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||.Type.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
1285	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getType())!=  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getType())!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type.getType())!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	157	None	replace
1286	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||  raw.hasPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||  raw.hasPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive())    {    if(raw!=  null  ||  raw.hasPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	59	None	add
1287	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  	74	None	replace
1288	[BUG]  [BUGGY]  if(raw  >=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null)  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  	74	None	replace
1289	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    	compilable	  [FE]  IllegalArgumentException  	195	9	replace
1290	[BUG]  [BUGGY]  if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    	compilable	  [FE]  IllegalArgumentException  	195	9	replace
1291	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw.getClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isAssignableFrom(raw.getClass()))  {	  if(raw    ==    null    ||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	56	1	replace
1292	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw.getClass()))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw.getClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(raw.getClass()))  {	  if(raw    ==    null    ||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	56	1	replace
1293	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
1294	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	41	1	replace
1295	[BUG]  [BUGGY]  if(raw  ==  null  ||  type.length()  ==  0)  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  type.length()  ==  0)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  type.length()  ==  0)  {	  if(raw    ==    null    ||    raw.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1296	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.name()  ==  0)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.name()  ==  0)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.name()  ==  0)  {	  if(raw    ==    null    ||    raw.length()    ==    0)    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
1297	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(!ObjectUtilities.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	163	None	replace
1298	[BUG]  [BUGGY]  if(raw  ==  null  ||!ArrayUtil.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ArrayUtil.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ArrayUtil.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Array.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
1299	[BUG]  [BUGGY]  if(!ObjectConstructor.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectConstructor.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectConstructor.class.isAssignableFrom(raw)||  type.isPrimitive()  ||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    type.isPrimitive()    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	126	None	replace
1300	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.equals(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(!raw.equals(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!raw.equals(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
1301	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.getObjectConstructor();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  gson.getObjectConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.getObjectConstructor();	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1302	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.getOwnConstructor();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  gson.getOwnConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.getOwnConstructor();	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1303	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  getBoundFields(gson,  type,  null)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw)    ==    null)    {    	compilable	  [FE]  NullPointerException  	14	9	replace
1304	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null)  ==  null)  {  [FE]  NullPointerException  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  null)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  null)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw)    ==    null)    {    	compilable	  [FE]  NullPointerException  	14	9	replace
1305	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&&  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1306	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1307	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1308	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!ObjectUtil.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1309	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.equals(type)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.equals(type)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.equals(type)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  cannot  find  symbol	193	None	replace
1310	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  Array.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  Array.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  Array.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	77	None	add
1311	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  ==  null  ||  Raw.equals(type))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  ==  null  ||  Raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.equals(type))    {    if(raw  ==  null  ||  Raw.equals(type))  {	  	non-compiled	[CE]  illegal  start  of  expression	150	None	add
1312	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&|  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&|  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)&|  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
1313	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||...Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||...Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||...Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	47	None	add
1314	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1315	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
1316	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
1317	[BUG]  [BUGGY]  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	129	None	replace
1318	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	50	9	replace
1319	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	50	9	replace
1320	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
1321	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	45	1	replace
1322	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(object.class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
1323	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type)))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
1324	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type)!=  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
1325	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type)))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
1326	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.equals(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	186	None	replace
1327	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1328	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1329	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.restrictByNotNullOrUndefined();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1330	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getSuperType();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.getSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.getSuperType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1331	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getConstructor();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.getConstructor();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1332	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getReturnType();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.getReturnType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.getReturnType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1333	[BUG]  [BUGGY]  if(!object.isAssignableFrom(raw)||!raw.isAssignableFrom(Object.class))  {  [CE]  cannot  find  symbol  object  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!object.isAssignableFrom(raw)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!object.isAssignableFrom(raw)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(object.class)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol  object	208	None	replace
1334	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(object,  type.class)||!raw.isAssignableFrom(Object.class))  {  [CE]  cannot  find  symbol  object  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(object,  type.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(object,  type.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(object.class)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol  object	208	None	replace
1335	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
1336	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
1337	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
1338	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isArray())  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
1339	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  type.equals(raw))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	107	1	replace
1340	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.equals(raw))  {  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  type.equals(raw))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	107	1	replace
1341	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getSuperClass();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getSuperClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getSuperClass();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
1342	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getConstructor();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getConstructor();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
1343	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  throw  new  IllegalArgumentException( " ");  }	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1344	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  illegal  start  of  expression  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1345	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  }  [CE]  illegal  start  of  type  [FE]                        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  }	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1346	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw))));  }  [CE]  illegal  start  of  expression  [FE]                          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw))));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw))));  }	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1347	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	15	None	replace
1348	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  return  null;	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	15	None	replace
1349	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw,  type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw,  type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw,  type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	75	None	replace
1350	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!   "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!   "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!   "Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  unclosed  string  literal	135	None	replace
1351	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!   "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!   "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!   "Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  unclosed  string  literal	135	None	replace
1352	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Factory.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Factory.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||!Factory.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
1353	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  &&! "raw.isAssignableFrom(Object.class))  {  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class))  {  if(raw!=  null  &&! "raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    if(raw!=  null  &&! "raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  unclosed  string  literal	85	None	add
1354	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw  ==  null  ||.Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
1355	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isUnknown())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isUnknown())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isUnknown())  {	  	non-compiled	[CE]  illegal  start  of  expression	141	None	add
1356	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
1357	[BUG]  [BUGGY]  if(!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
1358	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
1359	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isArray()  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
1360	[BUG]  [BUGGY]  if(raw  ==  null  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  type.isPrimitive())  {	  if(raw    >=    null    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	214	None	replace
1361	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1362	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isEmpty())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isEmpty())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isEmpty())  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1363	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
1364	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternative;  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternative;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative  ==  null)  {  return  alternative;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
1365	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isEmpty())  {  [CE]  cannot  find  symbol  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isEmpty())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
1366	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isUnknownType())  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isUnknownType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isUnknownType())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	227	None	replace
1367	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
1368	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
1369	[BUG]  [BUGGY]  if(raw  >=  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  >=  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  >=  null  ||  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	105	None	replace
1370	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  null)))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  null)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  null)))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	168	None	replace
1371	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  false)))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  false)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  false)))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	168	None	replace
1372	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1373	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(type))  {  if(raw!=  null  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
1374	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	132	None	replace
1375	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	132	None	replace
1376	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.equals(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	26	9	replace
1377	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.equals(raw)||  Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	26	9	replace
1378	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	36	None	replace
1379	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	36	None	replace
1380	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	155	9	replace
1381	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	155	9	replace
1382	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	155	9	replace
1383	[BUG]  [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [FE]  IllegalArgumentException  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  IllegalArgumentException  	155	9	replace
1384	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	155	1	replace
1385	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isArray())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isArray())    {    	compilable	  [FE]  ComparisonFailure  	155	1	replace
1386	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||  raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	101	None	add
1387	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1388	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " ");  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1389	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(!raw.isPrimitive())throw  new  IllegalArgumentException( " ");  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(!raw.isPrimitive())throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(!raw.isPrimitive())throw  new  IllegalArgumentException( " ");  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   ");    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
1390	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw!=  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	95	None	replace
1391	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  this.raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  raw  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  this.raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  this.raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol  raw	224	None	replace
1392	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw.getName()))  {  [CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw.getName()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(raw.getName()))  {	  if(raw    ==    null    ||    raw.isArray())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T>  cannot  be  applied  to  given  types;	56	None	replace
1393	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw.getRawClass()))  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw.getRawClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(raw.getRawClass()))  {	  if(raw    ==    null    ||    raw.isArray())    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
1394	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  If(!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  If(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isArray())  {  If(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
1395	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [CE]  ';'  expected  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignedFrom(Object.class))  {  If(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    If(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ';'  expected	70	None	replace
1396	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  {  null  ||!Object.class.equals(raw))  {  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.equals(raw))  {  if(raw  {  null  ||!Object.class.equals(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.equals(raw))    {    if(raw  {  null  ||!Object.class.equals(raw))  {	  	non-compiled	[CE]  ')'  expected	144	None	add
1397	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  type.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	107	None	replace
1398	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
1399	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	107	9	replace
1400	[BUG]  [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  &&!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  &&!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  &&!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	122	None	add
1401	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  {  null  ||  raw.equals(type))  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type))  {  if(raw  {  null  ||  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.equals(type))    {    if(raw  {  null  ||  raw.equals(type))  {	  	non-compiled	[CE]  ')'  expected	150	None	add
1402	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Type.class.isArray())  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	140	9	replace
1403	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isArray())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Type.class.isArray())  {	  if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	140	9	replace
1404	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	33	None	add
1405	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getPrimitiveType()))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getPrimitiveType()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.equals(type.getPrimitiveType()))  {	  if(raw    >=    null    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	214	None	replace
1406	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.Class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	133	None	replace
1407	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(type)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	220	None	replace
1408	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
1409	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
1410	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
1411	[BUG]  [BUGGY]  if(!Object.class.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
1412	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
1413	[BUG]  [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	220	9	replace
1414	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  {  null  ||!Type.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  {  null  ||!Type.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    if(raw  {  null  ||!Type.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	139	None	add
1415	[BUG]  [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Type.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Type.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!Type.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Type.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!Type.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	139	None	add
1416	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignedFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class))    {    	non-compiled	[CE]  cannot  find  symbol	171	None	replace
1417	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isInterface())  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class))    {    	compilable	  [FE]  IllegalArgumentException  	171	9	replace
1418	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isInterface())  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isInterface())  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.Class))    {    	compilable	  [FE]  IllegalArgumentException  	171	9	replace
1419	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  return  null;  }  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)))  {  return  null;  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	6	None	replace
1420	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignedFrom(Object.class)||  raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||    raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	179	None	replace
1421	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isExternableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  type.isAssignableFrom(raw))  {  if(raw.isPrimitive()  ||  type.isExternableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||    type.isAssignableFrom(raw))    {    if(raw.isPrimitive()  ||  type.isExternableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
1422	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
1423	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(type  ==  null  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.equals(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	172	9	replace
1424	[BUG]  [BUGGY]  if(type  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(type  ==  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(type  ==  null  ||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.equals(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	172	9	replace
1425	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isPrimitive())  {	  if(raw    ==    null    ||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	52	1	replace
1426	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||  raw.isPrimitive())  {	  if(raw    ==    null    ||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	52	1	replace
1427	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.equalsAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||!Object.class.equalsAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw.isPrimitive()  ||!Object.class.equalsAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1428	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw.isPrimitive()  ||?!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	191	None	add
1429	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignedFrom(raw))  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignedFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
1430	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  	74	None	replace
1431	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  throw  new  IllegalArgumentException( " "));  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    throw    new    IllegalArgumentException(   "   "));    	non-compiled	[CE]  	74	None	replace
1432	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw!=  null  &&  raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	168	None	replace
1433	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	168	None	replace
1434	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  new  TypeToken[]  {  type  }  )))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  new  TypeToken[]  {  type  }  )))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  new  TypeToken[]  {  type  }  )))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	168	None	replace
1435	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  new  TypeToken  <  T>(raw))))  {  [CE]  TypeToken(Type)  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  new  TypeToken  <  T>(raw))))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw!=  null  &&  getBoundFields(gson,  type,  new  TypeToken  <  T>(raw))))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  TypeToken(Type)  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package	168	None	replace
1436	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  gson.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  gson.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  gson.getRawType();  if(alternative!=  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	177	None	replace
1437	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	41	9	replace
1438	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	41	9	replace
1439	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.toString();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.toString();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.toString();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1440	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  type.getRawSuperType();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  type.getRawSuperType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  type.getRawSuperType();	  TypeToken    <    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
1441	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
1442	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	102	1	replace
1443	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  {  null  ||  raw.isPrimitive())  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  {  null  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive())    {    if(raw  {  null  ||  raw.isPrimitive())  {	  	non-compiled	[CE]  ')'  expected	51	None	add
1444	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  Raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||  Raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive())    {    if(raw  ==  null  ||  Raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	51	None	add
1445	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type))  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type))    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	167	None	replace
1446	[BUG]  [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  If(raw  ==  null)  {  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||  raw.isPrimitive())  {  If(raw  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  ||  raw.isPrimitive())  {  If(raw  ==  null)  {	  if(raw!=    null)    {    If(raw!=    null)    {    	non-compiled	[CE]  ';'  expected	197	None	replace
1447	[BUG]  [BUGGY]  if(raw  ==  null  ||  noClass.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  noClass  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  noClass.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  noClass.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  noClass	111	None	replace
1448	[BUG]  [BUGGY]  TypeToken  <?>  raw  =  type.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?>  raw  =  type.restrictByNotNullOrUndefined();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?>  raw  =  type.restrictByNotNullOrUndefined();	  TypeToken    <?>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	119	None	replace
1449	[BUG]  [BUGGY]  if(raw  ==  null  ||  type!=  getBoundFields(gson,  type)  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  type!=  getBoundFields(gson,  type)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  type!=  getBoundFields(gson,  type)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type)    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	16	None	replace
1450	[BUG]  [BUGGY]  if(raw  ==  null  ||  findBoundFields(gson,  type)  ==  null)  {  [CE]  cannot  find  symbol  [FE]                        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  findBoundFields(gson,  type)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  findBoundFields(gson,  type)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type)    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
1451	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&  raw.equals(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	compilable	  [FE]  ComparisonFailure  	213	1	replace
1452	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.equals(type))  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&  raw.equals(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	compilable	  [FE]  ComparisonFailure  	213	1	replace
1453	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.getName().equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.getName().equals(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	compilable	  [FE]  ComparisonFailure  	213	1	replace
1454	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.getName().equals(type))  {  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.getName().equals(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.getName().equals(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	compilable	  [FE]  ComparisonFailure  	213	1	replace
1455	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.contains(type))  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.contains(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.contains(type))  {	  if(raw!=    null    ||    raw.equals(type))    {    	non-compiled	[CE]  cannot  find  symbol	213	None	replace
1456	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  types.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  types.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(raw)||  types.isPrimitive())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1457	[BUG]  [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  parent.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.class.isAssignableFrom(raw)||  parent.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.class.isAssignableFrom(raw)||  parent.isPrimitive())  {	  if(!ObjectUtilities.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1458	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
1459	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
1460	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
1461	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	185	1	replace
1462	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw)));	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	15	None	replace
1463	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  this)));  }  [CE]  illegal  start  of  type  [FE]                      IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  this)));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  this)));  }	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
1464	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw))));  [CE]  illegal  start  of  expression  [FE]                        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw))));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  (raw  ==  null  &&  getBoundFields(gson,  type,  raw))));	  if(raw!=    null)    {    if(raw!=    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)));    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
1465	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  deserialized))  {  [CE]  cannot  find  symbol  deserialized  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  deserialized))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  deserialized))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  cannot  find  symbol  deserialized	8	None	replace
1466	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeToken  <  T>(raw)))  {  [CE]  TypeToken(Type)  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeToken  <  T>(raw)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeToken  <  T>(raw)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw))    {    	non-compiled	[CE]  TypeToken(Type)  is  not  public  in  TypeToken;  cannot  be  accessed  from  outside  package	8	None	replace
1467	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  method.isPrimitive())  {  [CE]  cannot  find  symbol  method  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  method.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  method.isPrimitive())  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  method	138	None	replace
1468	[BUG]  [BUGGY]  if(raw  ==  null  ||!RawClass.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  RawClass  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!RawClass.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!RawClass.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    [Delete]    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  RawClass	98	None	replace
1469	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw).class)  {  [CE]  <identifier>  expected  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw).class)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw).class)  {	  if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  <identifier>  expected	100	None	replace
1470	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())!=  null))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())!=    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	166	None	replace
1471	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	192	1	replace
1472	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	192	1	replace
1473	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
1474	[BUG]  [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  this.raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  raw  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  this.raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  Class  <?  super  T>  alternate  =  this.raw.getRawType();  if(alternative!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol  raw	175	None	replace
1475	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
1476	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
1477	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
1478	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignedFrom(Object.class))  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignedFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive()  ||!raw.isAssignedFrom(Object.class))  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	207	None	replace
1479	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!raw.isPrimitive())  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
1480	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class)||!raw.isPrimitive())  {	  if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	207	9	replace
1481	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	34	1	replace
1482	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!Object.class.isAssignableFrom(raw)&&  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)&&    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	34	1	replace
1483	[BUG]  [BUGGY]  if(raw!=  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw));	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	13	None	replace
1484	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  deserialized));  }  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  deserialized));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  deserialized));  }	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1485	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  this));  }  [CE]  illegal  start  of  type  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  this));  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw!=  null  ||  getBoundFields(gson,  type,  this));  }	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
1486	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	156	None	replace
1487	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!ObjectUtil.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	156	None	replace
1488	[BUG]  [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSerializedType();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Class  <?  super  T>  raw  =  type.getRawSerializedType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Class  <?  super  T>  raw  =  type.getRawSerializedType();	  Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
1489	[BUG]  [BUGGY]  if(raw  ==  null  ||!object.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!object.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!object.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1490	[BUG]  [BUGGY]  if(raw  ==  null  ||!object.isPrimitive())  {  if(raw!=  null  &&!object.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!object.isPrimitive())  {  if(raw!=  null  &&!object.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!object.isPrimitive())  {  if(raw!=  null  &&!object.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	173	None	replace
1491	[BUG]  [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  gson.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null)  {  Class  <?  super  T>  alternate  =  gson.getRawType();  if(alternative  ==  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null)  {  Class  <?  super  T>  alternate  =  gson.getRawType();  if(alternative  ==  null)  {  return  alternate;  }	  if(raw!=    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternative    ==    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	222	None	replace
1492	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type,  new  TypeToken[]  {  type  }  )))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type,  new  TypeToken[]  {  type  }  )))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type,  new  TypeToken[]  {  type  }  )))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
1493	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type,  this)))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type,  this)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type,  this)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
1494	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  {  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  {  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    if(raw  {  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	147	None	add
1495	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!ObjectConstructor.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||!ObjectConstructor.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||!ObjectConstructor.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	147	None	add
1496	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw  ==  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())    ==    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	169	None	replace
1497	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type.getRawType())  ==  null))  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())    ==    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	169	None	replace
1498	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type.getRawType())  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type.getRawType())  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type.getRawType())  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    (raw!=    null    &&    getBoundFields(gson,    type.getRawType())    ==    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	169	None	replace
1499	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  {  null  ||  raw.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(raw))  {  if(raw  {  null  ||  raw.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isAssignableFrom(raw))    {    if(raw  {  null  ||  raw.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	57	None	add
1500	[BUG]  [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawSerializedType();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  final  Class  <?  super  T>  raw  =  type.getRawSerializedType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	final  Class  <?  super  T>  raw  =  type.getRawSerializedType();	  final    Class    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
1501	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||!!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    if(!raw.isPrimitive()  ||!!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
1502	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||?!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Object.class))  {  if(!raw.isPrimitive()  ||?!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!raw.isAssignableFrom(Object.class))    {    if(!raw.isPrimitive()  ||?!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	206	None	add
1503	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!   "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!   "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!   "Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  unclosed  string  literal	113	None	replace
1504	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Rhino.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Rhino.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw  ==  null  ||!Rhino.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw    ==    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
1505	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	99	None	add
1506	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(class)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(class)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(class)||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(object)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1507	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  {  null  ||!raw.isAssignableFrom(Object.class))  {  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  {  null  ||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  {  null  ||!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  ')'  expected	80	None	add
1508	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||?!raw.isAssignableFrom(Object.class))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class))  {  if(raw  ==  null  ||?!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    if(raw  ==  null  ||?!raw.isAssignableFrom(Object.class))  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
1509	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [CE]  cannot  find  symbol  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive()  ||!Object.class.getAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.getAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	146	None	replace
1510	[BUG]  [BUGGY]  if(!ObjectUtil.isPrimitiveFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.isPrimitiveFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isPrimitiveFrom(raw)||  type.isPrimitive())  {	  if(!ObjectUtil.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	162	None	replace
1511	[BUG]  [BUGGY]  if(!ObjectUtil.isExpressionNode(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.isExpressionNode(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isExpressionNode(raw)||  type.isPrimitive())  {	  if(!ObjectUtil.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	162	None	replace
1512	[BUG]  [BUGGY]  if(!ObjectUtilities.isPrimitiveFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtilities.isPrimitiveFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtilities.isPrimitiveFrom(raw)||  type.isPrimitive())  {	  if(!ObjectUtilities.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	163	None	replace
1513	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type,  deserialized))  {  [CE]  cannot  find  symbol  deserialized  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type,  deserialized))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type,  deserialized))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  cannot  find  symbol  deserialized	84	None	replace
1514	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)&&!raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)&&!raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)&&!raw.isAssignableFrom(type))  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	84	None	replace
1515	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)&&  type.isPrimitive())  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)&&  type.isPrimitive())  {	  if(!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	84	None	replace
1516	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	65	None	replace
1517	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw!=  null)  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw!=  null)  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw!=  null)  {  If(raw!=  null  &&!Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    If(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	65	None	replace
1518	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(object.class))  {  [CE]  cannot  find  symbol  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignedFrom(object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignedFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1519	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  ObjectUtilities  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||!ObjectUtilities.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw)||    type.isPrimitiveType())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtilities	193	None	replace
1520	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	110	None	replace
1521	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isArray())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isArray())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isArray())  {  If(raw  ==  null  ||!Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    If(raw    ==    null    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	110	None	replace
1522	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive!    	compilable	  [FE]  IllegalArgumentException  	73	9	replace
1523	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive!    	compilable	  [FE]  IllegalArgumentException  	73	9	replace
1524	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [CE]  illegal  start  of  type  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive!	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive!    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
1525	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive!    	compilable	  [FE]  IllegalArgumentException  	73	9	replace
1526	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [FE]  IllegalArgumentException  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isArray())  {  if(!raw.isAssignableFrom(Object.class))  {  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive!    	compilable	  [FE]  IllegalArgumentException  	73	9	replace
1527	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
1528	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.getRawType()!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.getRawType()!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.getRawType()!=  null)  {  Class  <?  super  T>  alternate  =  raw.getRawType();  if(alternate!=  null)  {  return  alternate;  }	  if(raw    ==    null)    {    Class    <?    super    T>    alternate    =    raw.getRawType();    if(alternate!=    null)    {    return    alternate;    }    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
1529	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
1530	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	181	None	add
1531	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type,  raw))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type,  raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type,  raw))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	180	None	replace
1532	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [CE]  bad  operand  types  for  binary  operator  '&&'  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw!=  null  &&  getBoundFields(gson,  type,  raw)).isEmpty())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type,    raw)).isEmpty())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&&'	5	None	replace
1533	[BUG]  [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ",  type.getRawClass())  {  [CE]  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||   "java.util.ArrayList ",  type.getRawClass())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||   "java.util.ArrayList ",  type.getRawClass())  {	  if(raw    ==    null)    {    if(raw    ==    null    ||       "java.util.ArrayList   ".equals(type.getRawClass()))    {    	non-compiled	[CE]  	202	None	replace
1534	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(object.class)||!raw.equals(Object.class))  {  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(object.class)||!raw.equals(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(object.class)||!raw.equals(Object.class))  {	  if(!raw.isAssignableFrom(object.class)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	208	None	replace
1535	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.newConstructor();  [CE]  illegal  start  of  type  [FE]                            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  gson.newConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  gson.newConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1536	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  gson.createConstructor();  [CE]  illegal  start  of  type  [FE]                              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  gson.createConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  gson.createConstructor();	  Constructor    <    T>    constructor    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	118	None	replace
1537	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	48	9	replace
1538	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	48	9	replace
1539	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  this)  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  this)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  this)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw)    ==    null)    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
1540	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  deserialized)  ==  null)  {  [CE]  cannot  find  symbol  deserialized  [FE]                    IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  deserialized)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  deserialized)  ==  null)  {	  if(raw!=    null)    {    if(raw!=    null    ||    getBoundFields(gson,    type,    raw)    ==    null)    {    	non-compiled	[CE]  cannot  find  symbol  deserialized	14	None	replace
1541	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw.isPrimitive()  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	131	1	replace
1542	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [FE]  ComparisonFailure  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	131	1	replace
1543	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(Object.class)||!Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isAssignableFrom(Object.class)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isAssignableFrom(Object.class)||!Object.Class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	186	None	replace
1544	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw) ")  {  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw) ")  {  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw) ")  {  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  unclosed  string  literal	165	None	replace
1545	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  <  Object.class  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  <identifier>  expected  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  <  Object.class  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  <  Object.class  ||  Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  <identifier>  expected	165	None	replace
1546	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [CE]  ';'  expected  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  If(raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    If(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  ';'  expected	132	None	replace
1547	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  {  null  ||  raw.isArray())  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  {  null  ||  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw  {  null  ||  raw.isArray())  {	  	non-compiled	[CE]  ')'  expected	55	None	add
1548	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isAssignment())  {  [CE]  illegal  start  of  expression  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray())  {  if(raw  ==  null  ||  raw.isAssignment())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isArray())    {    if(raw  ==  null  ||  raw.isAssignment())  {	  	non-compiled	[CE]  illegal  start  of  expression	55	None	add
1549	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(source)||  Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  source  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(source)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(source)||  Object.class.isAssignableFrom(raw))  {	  if(type    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  source	218	None	replace
1550	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  type.isPrimitive())  {	  if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
1551	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	81	1	replace
1552	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(Object.class)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  ComparisonFailure  	81	1	replace
1553	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.restrictByNotNullOrUndefined();  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.restrictByNotNullOrUndefined();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.restrictByNotNullOrUndefined();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
1554	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawSuperClass();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawSuperClass();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawSuperClass();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
1555	[BUG]  [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawPrimitive();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <?  super  T>  raw  =  type.getRawPrimitive();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <?  super  T>  raw  =  type.getRawPrimitive();	  TypeToken    <?    super    T>    raw    =    type.getRawType();    	non-compiled	[CE]  illegal  start  of  type	174	None	replace
1556	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class),  gson)  {  [CE]  ')'  expected  [FE]                IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class),  gson)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class),  gson)  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ')'  expected	87	None	replace
1557	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class),  this)  {  [CE]  ')'  expected  [FE]                  IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class),  this)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class),  this)  {	  if(!raw.isAssignableFrom(type)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  ')'  expected	87	None	replace
1558	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	105	9	replace
1559	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&  raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	105	9	replace
1560	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1561	[BUG]  [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [CE]  cannot  find  symbol  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw.isPrimitive()  ||  Object.class.isAssignableFrom(raw)||  type.isPrimitiveType())  {	  if(raw.isPrimitive()    ||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	105	None	replace
1562	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.getValueType();  [CE]  illegal  start  of  type  [FE]                                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  gson.getValueType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.getValueType();	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1563	[BUG]  [BUGGY]  TypeToken  <  T>  raw  =  gson.constructType(type);  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  TypeToken  <  T>  raw  =  gson.constructType(type);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	TypeToken  <  T>  raw  =  gson.constructType(type);	  TypeToken    <    T>    raw    =    gson.getRawType();    	non-compiled	[CE]  illegal  start  of  type	120	None	replace
1564	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
1565	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Type.class))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()  ||!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	compilable	  [FE]  IllegalArgumentException  	91	9	replace
1566	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(type.class)||!raw.isAssignableFrom(Type.class))  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(type.class)||!raw.isAssignableFrom(Type.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(type.class)||!raw.isAssignableFrom(Type.class))  {	  if(!raw.isAssignableFrom(Type.class))    {    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1567	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)&&  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)&&  type.isPrimitive())  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1568	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	148	None	replace
1569	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	148	1	replace
1570	[BUG]  [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!ObjectConstructor.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  if(raw    ==    null    ||!ObjectConstructor.class.isAssignableFrom(raw))    {    	compilable	  [FE]  ComparisonFailure  	148	1	replace
1571	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
1572	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isArray()  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isArray()    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	32	9	replace
1573	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignableFrom(Type.class))  <  return  null;  //  it's  a  primitive!  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignableFrom(Type.class))  <  return  null;  //  it's  a  primitive!  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class))    {    if(!raw.isAssignableFrom(Type.class))  <  return  null;  //  it's  a  primitive!	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
1574	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignableFrom(Type.class))  <  return  null;  [CE]  illegal  start  of  type  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Type.class))  {  if(!raw.isAssignableFrom(Type.class))  <  return  null;  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Type.class))    {    if(!raw.isAssignableFrom(Type.class))  <  return  null;	  	non-compiled	[CE]  illegal  start  of  type	90	None	add
1575	[BUG]  [BUGGY]  if(raw  ==  null  ||(raw.isPrimitive()  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||(raw.isPrimitive()  &&  getBoundFields(gson,  type.getRawType())!=  null))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||(raw.isPrimitive()  &&  getBoundFields(gson,  type.getRawType())!=  null))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type.getRawType())!=    null))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
1576	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.Class.isAssignableFrom(raw))  {	  if(raw!=    null    &&!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    &&!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
1577	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type)  ==  null)  {  [CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type)  ==  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw  ==  null  ||  getBoundFields(gson,  type)  ==  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    getBoundFields(gson,    type)))    {    	non-compiled	[CE]  method  getBoundFields  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
1578	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [CE]  cannot  find  symbol  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive()  ||!Object.class.isAssignedFrom(raw))  {	  if(raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(raw.isPrimitive()    ||!Object.class.isAssignedFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	134	None	replace
1579	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  type.isPrimitive())  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
1580	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	78	9	replace
1581	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	78	9	replace
1582	[BUG]  [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  <  return  null;  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  {  if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  <  return  null;  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isPrimitive()    ||!Object.class.isAssignableFrom(raw))    {    if(!raw.isPrimitive()  ||!Object.class.isAssignableFrom(raw))  <  return  null;	  	non-compiled	[CE]  illegal  start  of  type	47	None	add
1583	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&|  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(!Object.class.isAssignableFrom(raw)&|  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(!Object.class.isAssignableFrom(raw)&|  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	128	None	add
1584	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {  [CE]  illegal  start  of  expression  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw!=  null  &&!Object.class.isAssignedFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  illegal  start  of  expression	188	None	add
1585	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&  raw.isPrimitive()  ||  raw.isAssignableFrom(type))  {	  if(raw!=    null    &&    raw.isPrimitive())    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	211	None	replace
1586	[BUG]  [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  type.isPrimitive())  {  [CE]  cannot  find  symbol  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&  raw.isPrimitive()  ||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&  raw.isPrimitive()  ||  type.isPrimitive())  {	  if(raw!=    null    &&    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol	211	None	replace
1587	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	129	1	replace
1588	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isPrimitive())  {  [FE]  ComparisonFailure  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||  raw.isPrimitive()  ||  raw.isPrimitive())  {	  if(!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    	compilable	  [FE]  ComparisonFailure  	129	1	replace
1589	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =(raw  ==  null)?  null  :  raw.getConstructor();  [CE]  illegal  start  of  type  [FE]                                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =(raw  ==  null)?  null  :  raw.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =(raw  ==  null)?  null  :  raw.getConstructor();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1590	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  this.raw.getConstructor();  [CE]  illegal  start  of  type  [FE]                                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  this.raw.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  this.raw.getConstructor();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1591	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  scope.getConstructor();  [CE]  illegal  start  of  type  [FE]                                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  scope.getConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  scope.getConstructor();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1592	[BUG]  [BUGGY]  Constructor  <  T>  constructor  =  raw.getDeclaredType();  [CE]  illegal  start  of  type  [FE]                                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  constructor  =  raw.getDeclaredType();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  constructor  =  raw.getDeclaredType();	  Constructor    <    T>    constructor    =    raw.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	121	None	replace
1593	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.createConstructor(raw);  [CE]  illegal  start  of  type  [FE]                      ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  gson.createConstructor(raw);  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.createConstructor(raw);	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1594	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.createConstructor();  [CE]  illegal  start  of  type  [FE]                        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  gson.createConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.createConstructor();	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1595	[BUG]  [BUGGY]  Constructor  <  T>  factory  =  gson.getDeclaredConstructor();  [CE]  illegal  start  of  type  [FE]                          ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Constructor  <  T>  factory  =  gson.getDeclaredConstructor();  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Constructor  <  T>  factory  =  gson.getDeclaredConstructor();	  Constructor    <    T>    factory    =    gson.getConstructor();    	non-compiled	[CE]  illegal  start  of  type	221	None	replace
1596	[BUG]  [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  raw.isAssignableFrom(type)))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  (raw  ==  null  &&  raw.isAssignableFrom(type)))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  (raw  ==  null  &&  raw.isAssignableFrom(type)))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.equals(type)))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	204	None	replace
1597	[BUG]  [BUGGY]  if(raw  ==  null  ||  Raw.isPrimitive(raw))  {  [CE]  cannot  find  symbol  Raw  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Raw.isPrimitive(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  Raw.isPrimitive(raw))  {	  if(raw!=    null    ||    raw.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  Raw	60	None	replace
1598	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
1599	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	124	9	replace
1600	[BUG]  [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {	  if(!raw.isAssignableFrom(Object.class)||    type.isPrimitive())    {    	compilable	  [FE]  IllegalArgumentException  	124	9	replace
1601	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignedFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignedFrom(Object.class)||!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class)||!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1602	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!   "Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!   "Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!   "Object.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  unclosed  string  literal	143	None	replace
1603	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Rhino.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Rhino.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.isPrimitive())  {  if(raw!=  null  ||!Rhino.class.isAssignableFrom(raw))  {	  if(raw!=    null    ||!Object.class.isAssignableFrom(raw))    {    if(raw!=    null    ||!   "Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
1604	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isAssignableFrom(type))  {  [CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isAssignableFrom(type))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isAssignableFrom(type))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isAssignableFrom(type))    {    	non-compiled	[CE]  method  isAssignableFrom  in  class  Class<T#2>  cannot  be  applied  to  given  types;	76	None	replace
1605	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]            IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	37	None	replace
1606	[BUG]  [BUGGY]  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]              IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.Class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(!Object.Class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	37	None	replace
1607	[BUG]  [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  throw  new  IllegalStateException( " ");  }  [CE]  bad  operand  types  for  binary  operator  [FE]                ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null)  {  if(raw  ==  null  ||  getBoundFields(gson,  type,  raw))  {  throw  new  IllegalStateException( " ");  }	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw));    	non-compiled	[CE]  bad  operand  types  for  binary  operator  	205	None	replace
1608	[BUG]  [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  cannot  find  symbol  Class  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))    {    	non-compiled	[CE]  cannot  find  symbol  Class	19	None	replace
1609	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }  [CE]  illegal  start  of  type  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    	non-compiled	[CE]  illegal  start  of  type	195	None	replace
1610	[BUG]  [BUGGY]  if(raw  ==  null  ||  isPrimitive(raw))  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  isPrimitive(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  isPrimitive(raw))  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    (raw    ==    null    &&    raw.isPrimitive()))    {    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
1611	[BUG]  [BUGGY]  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw.getClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw.getClass()))  {	  if(raw    ==    null    ||!Object.class.equals(raw))    {    	compilable	  [FE]  ComparisonFailure  	145	1	replace
1612	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw.getClass()))  {  [FE]  ComparisonFailure  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw.getClass()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isAssignableFrom(raw.getClass()))  {	  if(raw    ==    null    ||!Object.class.equals(raw))    {    	compilable	  [FE]  ComparisonFailure  	145	1	replace
1613	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    if(raw  {  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  	non-compiled	[CE]  ')'  expected	137	None	add
1614	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isPrimitive())    {    if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)&&  raw.isPrimitive())  {	  	non-compiled	[CE]  unclosed  string  literal	137	None	add
1615	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  {  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  ')'  expected	226	None	add
1616	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [CE]  unclosed  string  literal  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    raw.isPrimitive())    {    if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)||  raw.isPrimitive())  {	  	non-compiled	[CE]  unclosed  string  literal	226	None	add
1617	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [CE]  unclosed  string  literal  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw  ==  null  ||! "Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  	non-compiled	[CE]  unclosed  string  literal	141	None	add
1618	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [CE]  ')'  expected  [FE]      ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  if(raw  {  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)&&    raw.isArray())    {    if(raw  {  null  ||!Object.class.isAssignableFrom(raw)&&  raw.isArray())  {	  	non-compiled	[CE]  ')'  expected	141	None	add
1619	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {	  if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	86	9	replace
1620	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  raw.isPrimitive())  {	  if(raw!=    null    &&!raw.isAssignableFrom(Object.class))    {    	compilable	  [FE]  IllegalArgumentException  	86	9	replace
1621	[BUG]  [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!Object.class.isAssignableFrom(raw)||  Object.class.isAssignableFrom(raw))  {  if(raw!=  null  &&!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    &&!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    if(raw!=  null  &&!Object.class.isAssignedFrom(raw)||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	215	None	add
1622	[BUG]  [BUGGY]  if(!ObjectUtil.isPrimitive(raw)||  type.isPrimitive())  {  [CE]  cannot  find  symbol  ObjectUtil  [FE]                    ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(!ObjectUtil.isPrimitive(raw)||  type.isPrimitive())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(!ObjectUtil.isPrimitive(raw)||  type.isPrimitive())  {	  if(!ObjectUtil.class.isAssignableFrom(raw)||    type.isPrimitive())    {    	non-compiled	[CE]  cannot  find  symbol  ObjectUtil	125	None	replace
1623	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw  ==  null  ||!Object.class.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	24	9	replace
1624	[BUG]  [BUGGY]  if(raw  ==  null  ||!Object.class.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!Object.class.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!Object.class.isPrimitive()  ||  Object.class.isAssignableFrom(raw))  {	  if(raw    ==    null    ||!Object.class.isAssignableFrom(raw)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	24	9	replace
1625	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  {  null  ||  raw.isInterface())  {  [CE]  ')'  expected  [FE]    ComparisonFailure    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.isInterface())  {  if(raw  {  null  ||  raw.isInterface())  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    raw.isInterface())    {    if(raw  {  null  ||  raw.isInterface())  {	  	non-compiled	[CE]  ')'  expected	53	None	add
1626	[BUG]  [BUGGY]  Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  not  a  statement  [FE]        ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  if(!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    	non-compiled	[CE]  not  a  statement	153	None	replace
1627	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }  [CE]  illegal  start  of  type  [FE]          IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isPrimitive())  {  if(!raw.isAssignableFrom(Object.class))  <  return  null;  //  it's  a  primitive;  }	  if(!raw.isAssignableFrom(Object.class))    {    if(!raw.isAssignableFrom(Object.class))    <    return    null;    //    it's    a    primitive;    	non-compiled	[CE]  illegal  start  of  type	196	None	replace
1628	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeToken  <  T>())!=  null)  {  [CE]  cannot  find  symbol  [FE]            ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeToken  <  T>())!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  new  TypeToken  <  T>())!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	non-compiled	[CE]  cannot  find  symbol	159	None	replace
1629	[BUG]  [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  deserialized)!=  null)  {  [CE]  cannot  find  symbol  deserialized  [FE]              ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  getBoundFields(gson,  type,  deserialized)!=  null)  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  getBoundFields(gson,  type,  deserialized)!=  null)  {	  if(raw    ==    null)    {    if(raw    ==    null    ||    getBoundFields(gson,    type,    raw)!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  deserialized	159	None	replace
1630	[BUG]  [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [CE]  not  a  statement  [FE]        IllegalArgumentException      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  for(!raw.isAssignableFrom(Object.class))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||!raw.isAssignableFrom(object.class))  {  for(!raw.isAssignableFrom(Object.class))  {	  if(!raw.isAssignableFrom(Object.class))    {    for(!raw.isAssignableFrom(Object.class))    {    	non-compiled	[CE]  not  a  statement	170	None	replace
1631	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.Class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
1632	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||!Object.class.isAssignedFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
1633	[BUG]  [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||! "Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  if(raw!=  null  ||! "Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=    null    ||!Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))    {    if(raw!=  null  ||! "Object.class.isAssignableFrom(raw)||!Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  unclosed  string  literal	42	None	add
1634	[BUG]  [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getQualifiedName()))  {  [CE]  cannot  find  symbol  [FE]                  ComparisonFailure      [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  raw.equals(type.getQualifiedName()))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw  ==  null  ||  raw.equals(type.getQualifiedName()))  {	  if(raw    ==    null    ||    raw.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
1635	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	add	if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
1636	[BUG]  [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw!=  null  &&!raw.isAssignableFrom(Object.class)||  Object.class.isAssignableFrom(raw))  {	  if(!raw.isAssignableFrom(Object.class)||    Object.class.isAssignableFrom(raw))    {    	compilable	  [FE]  IllegalArgumentException  	28	9	replace
1637	[BUG]  [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  {  null  ||  Object.class.isAssignableFrom(raw))  {  [CE]  ')'  expected  [FE]    IllegalArgumentException    [CONTEXT]      @Override  public  <T>  TypeAdapter<T>  create(Gson  gson,  final  TypeToken<T>  type)  {  Class<?  super  T>  raw  =  type.getRawType();      [BUGGY]  if(raw  ==  null  ||  Object.class.isAssignableFrom(raw))  {  if(raw  {  null  ||  Object.class.isAssignableFrom(raw))  {  [BUGGY]      return  null;  //  it's  a  primitive!  }  ObjectConstructor<T>  constructor  =  constructorConstructor.get(type);  return  new  Adapter<T>(constructor,  getBoundFields(gson,  type,  raw));  }  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  create  [RETURN_TYPE]  <T>  Gson  gson  TypeToken<T>  type  [VARIABLES]  ConstructorConstructor  constructorConstructor  boolean  $anonymous1  $anonymous2  deserialized  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Gson  gson  Class  raw  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  Map  boundFields  FieldNamingStrategy  fieldNamingPolicy  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	95	95	1	replace	if(raw    ==    null    ||    Object.class.isAssignableFrom(raw))    {    if(raw  {  null  ||  Object.class.isAssignableFrom(raw))  {	  	non-compiled	[CE]  ')'  expected	77	None	add
