bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	10	None	replace
2	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	10	None	replace
3	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	10	None	replace
4	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	44	None	replace
5	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	44	None	replace
6	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	44	None	replace
7	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  description,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  description,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  description,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	44	None	replace
8	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  serialize,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  serialize,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  serialize,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	44	None	replace
9	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	27	None	replace
10	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  constructorConstructor,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  constructorConstructor,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  constructorConstructor,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	27	None	replace
11	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	76	None	replace
12	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	76	None	replace
13	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serialize,  deserialize,  name);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	76	None	replace
14	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	53	None	replace
15	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	53	None	replace
16	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	53	None	replace
17	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	53	None	replace
18	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  name);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
19	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
20	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
21	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  name);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	3	None	replace
22	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serializedName,  deserialize,  name);  [CE]  cannot  find  symbol  serializedName  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serializedName,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serializedName,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	32	None	replace
23	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
24	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
25	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  i);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  i);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
26	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	22	None	replace
27	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  isPrimitive);  [CE]  cannot  find  symbol  isPrimitive  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  isPrimitive);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  isPrimitive	22	None	replace
28	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
29	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
30	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  raw,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  raw,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  raw,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
31	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	106	None	replace
32	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	106	None	replace
33	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldNamingPolicy,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	106	None	replace
34	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	106	None	replace
35	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNamingPolicy,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	106	None	replace
36	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	106	None	replace
37	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  scope  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    scope,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scope	114	None	replace
38	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  scope  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    scope,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scope	114	None	replace
39	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    scope,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	114	None	replace
40	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    scope,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	114	None	replace
41	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  names  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    scope,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  names	114	None	replace
42	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  i,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  scope  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  i,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  i,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    scope,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scope	114	None	replace
43	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	67	None	replace
44	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  type,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  type,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  type,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	67	None	replace
45	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldType,  deserialize,  type);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldType,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldType,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	67	None	replace
46	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldType,  deserialize,  name);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldType,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldType,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	67	None	replace
47	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	60	None	replace
48	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	60	None	replace
49	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	60	None	replace
50	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	60	None	replace
51	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  cannot  find  symbol  names  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  names	60	None	replace
52	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	80	None	replace
53	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  description,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	80	None	replace
54	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	80	None	replace
55	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	21	None	replace
56	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  isPrivate);  [CE]  cannot  find  symbol  isPrivate  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  isPrivate);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  isPrivate);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  isPrivate	21	None	replace
57	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	21	None	replace
58	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	21	None	replace
59	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  field,  name);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  field,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  field,  name);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	66	None	replace
60	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  field,  deserialize,  type);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  field,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  field,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	66	None	replace
61	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	65	None	replace
62	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(i),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	65	None	replace
63	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	65	None	replace
64	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	65	None	replace
65	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(i),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	65	None	replace
66	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  field,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	65	None	replace
67	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(i),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	65	None	replace
68	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    fieldType,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	63	None	replace
69	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    fieldType,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	63	None	replace
70	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	63	None	replace
71	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	63	None	replace
72	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  jsonAdapterPresent,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	63	None	replace
73	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  names  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  names	63	None	replace
74	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  cannot  find  symbol  serializedName	64	None	replace
75	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	64	None	replace
76	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapterPredicate);  [CE]  cannot  find  symbol  jsonAdapterPredicate  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapterPredicate);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapterPredicate);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPredicate	64	None	replace
77	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapter);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapter);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapter);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	64	None	replace
78	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	64	None	replace
79	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);  [CE]  cannot  find  symbol  serializedName  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  cannot  find  symbol  serializedName	64	None	replace
80	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
81	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  type);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	2	None	replace
82	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
83	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	2	None	replace
84	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
85	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  i);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  i);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
86	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	42	None	replace
87	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serialize);  [CE]  cannot  find  symbol  fieldName  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	96	None	replace
88	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(name),  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(name),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(name),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	96	None	replace
89	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	96	None	replace
90	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	96	None	replace
91	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	96	None	replace
92	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	119	None	replace
93	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);  [CE]  cannot  find  symbol  isPrivate  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);	  BoundField    boundField    =    createBoundField(context,    fieldType,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  isPrivate	119	None	replace
94	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	102	None	replace
95	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	102	None	replace
96	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  description,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  description,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  description,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	102	None	replace
97	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  field,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  field,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  field,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	108	None	replace
98	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	108	None	replace
99	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldName),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldName),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldName),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	108	None	replace
100	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  isPrivate);  [CE]  cannot  find  symbol  isPrivate  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  isPrivate);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  isPrivate);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  isPrivate	75	None	replace
101	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  type,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	75	None	replace
102	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	75	None	replace
103	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  constructorConstructor);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  constructorConstructor);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  deserialize,  constructorConstructor);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	75	None	replace
104	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  name);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	26	None	replace
105	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	26	None	replace
106	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  name,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	26	None	replace
107	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	24	None	replace
108	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  field,  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	24	None	replace
109	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(fieldType),  field,  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(fieldType),  field,  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	24	None	replace
110	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  serialize,  deserialize,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	24	None	replace
111	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	25	None	replace
112	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  name);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	25	None	replace
113	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	25	None	replace
114	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  isPrimitive);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  isPrimitive);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	25	None	replace
115	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  jsonAdapter);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  jsonAdapter);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  jsonAdapter);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	25	None	replace
116	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  type);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	25	None	replace
117	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  name,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  name,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  name,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    type,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	88	None	replace
118	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  serializer  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializer	52	None	replace
119	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  constructorConstructor,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  constructorConstructor,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  constructorConstructor,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
120	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
121	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialization,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  serialization  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialization,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialization,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serialization	52	None	replace
122	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(name,  i);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(name,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(name,  i);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
123	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  name);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  name);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
124	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(name,  field);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(name,  field);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(name,  field);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
125	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(context,  field,  i);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(context,  field,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(context,  field,  i);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
126	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(i,  field);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(i,  field);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(i,  field);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
127	[BUG]  [BUGGY]  Field[]  fields  =  getFieldNames(name,  i);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  getFieldNames(name,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  getFieldNames(name,  i);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
128	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(name,  field,  i);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(name,  field,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(name,  field,  i);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
129	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  field.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  field.toArray(new  Field[fieldType.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
130	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fields.toArray(new  Field[fieldType.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
131	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  name.toArray(new  Field[fieldType.size()  ]));  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  name.toArray(new  Field[fieldType.size()  ]));  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  name.toArray(new  Field[fieldType.size()  ]));	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
132	[BUG]  [BUGGY]  Field[]  fieldNames  =  type.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  type.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  type.toArray(new  Field[fieldType.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
133	[BUG]  [BUGGY]  Field[]  fieldNames  =  new  Field[fieldType.size()  ];  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  new  Field[fieldType.size()  ];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  new  Field[fieldType.size()  ];	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
134	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	59	None	replace
135	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	59	None	replace
136	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	59	None	replace
137	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	59	None	replace
138	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  names  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  names,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  names	59	None	replace
139	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(name),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	45	None	replace
140	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(name),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(name),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	45	None	replace
141	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(name),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	45	None	replace
142	[BUG]  [BUGGY]  BoundField  field  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  field  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  field  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(name),    serialize,    deserialize);    	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	45	None	replace
143	[BUG]  [BUGGY]  BoundField  resultField  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  resultField  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  resultField  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(name),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	45	None	replace
144	[BUG]  [BUGGY]  BoundField  old  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  old  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  old  =  createBoundField(context,  name,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(name),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	45	None	replace
145	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize,  name);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	81	None	replace
146	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize,  type);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	81	None	replace
147	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	81	None	replace
148	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	1	None	replace
149	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapterPresent);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapterPresent);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	1	None	replace
150	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  value);  [CE]  cannot  find  symbol  value  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  value);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  value);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  value	1	None	replace
151	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialized);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialized);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  deserialized	1	None	replace
152	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapter);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapter);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapter);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	1	None	replace
153	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);  [CE]  cannot  find  symbol  isPrivate  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrivate);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  isPrivate	19	None	replace
154	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	19	None	replace
155	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fields.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fields.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fields.toArray(new  Field[fields.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	110	None	replace
156	[BUG]  [BUGGY]  Field[]  fieldNames  =  new  Field[fields.size()  ];  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  new  Field[fields.size()  ];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  new  Field[fields.size()  ];	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	110	None	replace
157	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.toArray(new  Field[fields.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  field.toArray(new  Field[fields.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  field.toArray(new  Field[fields.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	110	None	replace
158	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  +  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	110	None	replace
159	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	110	None	replace
160	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	9	None	replace
161	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	120	None	replace
162	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  description,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  description,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  description,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	120	None	replace
163	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	120	None	replace
164	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	120	None	replace
165	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingPolicy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	71	None	replace
166	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingPolicy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	71	None	replace
167	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingPolicy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	71	None	replace
168	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingPolicy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	71	None	replace
169	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingPolicy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	71	None	replace
170	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingPolicy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	71	None	replace
171	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingPolicy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	71	None	replace
172	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    namedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	46	None	replace
173	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  description  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    namedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	46	None	replace
174	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(name,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(name,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(name,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	58	None	replace
175	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldName,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldName,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldName,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	58	None	replace
176	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	58	None	replace
177	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	58	None	replace
178	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	58	None	replace
179	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	58	None	replace
180	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	58	None	replace
181	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  factory);  [CE]  cannot  find  symbol  factory  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  factory);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  factory);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  factory	104	None	replace
182	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  i);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  i);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    fieldNamingStrategy);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	104	None	replace
183	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  field.name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  field.name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  field.name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field.name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	47	None	replace
184	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field.name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	47	None	replace
185	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(field.name),  serialize,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(field.name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(field.name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field.name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	47	None	replace
186	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(field,  field.name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(field,  field.name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(field,  field.name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field.name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	47	None	replace
187	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field.name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	47	None	replace
188	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	109	None	replace
189	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  factory,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  factory  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  factory,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  factory,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  factory	109	None	replace
190	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  beanNamingStrategy  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanNamingStrategy	109	None	replace
191	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	113	None	replace
192	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	113	None	replace
193	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldNamingStrategy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	113	None	replace
194	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldNamingPolicy,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	113	None	replace
195	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  method,  deserialize);  [CE]  cannot  find  symbol  method  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  method,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  method,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  method	113	None	replace
196	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
197	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fields.toArray(new  Field[fieldType.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
198	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
199	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
200	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getRawClass().size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getRawClass().size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getRawClass().size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
201	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
202	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  type);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  type);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
203	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  field);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  field);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  field);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
204	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  type,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
205	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(type),  serialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(type),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(type),  serialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
206	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  type);  [CE]  cannot  find  symbol  serializedName  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  type);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	12	None	replace
207	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  serialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
208	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	79	None	replace
209	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	79	None	replace
210	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	79	None	replace
211	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
212	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  new  Field[fields.size()  ];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  new  Field[fields.size()  ];	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
213	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
214	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
215	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.toArray(new  Field[fields.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  boundFields.toArray(new  Field[fields.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  boundFields.toArray(new  Field[fields.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
216	[BUG]  [BUGGY]  Field[]  fields  =  name.toArray(new  Field[fields.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  name.toArray(new  Field[fields.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  name.toArray(new  Field[fields.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	35	None	replace
217	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  name);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	18	None	replace
218	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  raw);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	18	None	replace
219	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  isPrimitive);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  isPrimitive);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	18	None	replace
220	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  fieldType,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	118	None	replace
221	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	103	None	replace
222	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	103	None	replace
223	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	103	None	replace
224	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  type);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	82	None	replace
225	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	82	None	replace
226	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  jsonAdapterPresent);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  jsonAdapterPresent);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	82	None	replace
227	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	82	None	replace
228	[BUG]  [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  +  1];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  +  1];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  new  Type[fieldNames.size()  +  1];	  Type[]    result    =    new    Type[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
229	[BUG]  [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  -  1];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  -  1];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  new  Type[fieldNames.size()  -  1];	  Type[]    result    =    new    Type[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
230	[BUG]  [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  *  2];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  *  2];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  new  Type[fieldNames.size()  *  2];	  Type[]    result    =    new    Type[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
231	[BUG]  [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  +  2];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  +  2];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  new  Type[fieldNames.size()  +  2];	  Type[]    result    =    new    Type[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
232	[BUG]  [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  ],  name;  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  ],  name;  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  new  Type[fieldNames.size()  ],  name;	  Type[]    result    =    new    Type[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
233	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    raw);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	6	None	replace
234	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  raw);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    raw);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	6	None	replace
235	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    raw);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	6	None	replace
236	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    raw);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	6	None	replace
237	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  raw);  [CE]  cannot  find  symbol  serializedName  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    raw);    	non-compiled	[CE]  cannot  find  symbol  serializedName	6	None	replace
238	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  description);  [CE]  cannot  find  symbol  description  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  description);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  description);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    raw);    	non-compiled	[CE]  cannot  find  symbol  description	6	None	replace
239	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    name,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	62	None	replace
240	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    name,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	62	None	replace
241	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	16	None	replace
242	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	16	None	replace
243	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	16	None	replace
244	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializationName,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  serializationName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializationName,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializationName,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    namedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializationName	51	None	replace
245	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  type,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  type,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  type,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    namedName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	51	None	replace
246	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	83	None	replace
247	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	83	None	replace
248	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	83	None	replace
249	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serialize,  deserialize,  name);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	83	None	replace
250	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	83	None	replace
251	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  fieldNames,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  fieldNames,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  fieldNames,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldNames,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	116	None	replace
252	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNames,  fieldNamingPolicy,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNames,  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNames,  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldNames,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	116	None	replace
253	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNames,  fieldNamingStrategy,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNames,  fieldNamingStrategy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldNames,  fieldNamingStrategy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldNames,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	116	None	replace
254	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  type,  TypeToken.get(i),  fieldNames,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  type,  TypeToken.get(i),  fieldNames,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  type,  TypeToken.get(i),  fieldNames,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldNames,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	116	None	replace
255	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	85	None	replace
256	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fields,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fields,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fields,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	85	None	replace
257	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serialize,  deserialize,  name);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	85	None	replace
258	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  deserialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  deserialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  deserialize,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	55	None	replace
259	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    name,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	69	None	replace
260	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    name,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	69	None	replace
261	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  name,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    name,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	69	None	replace
262	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  serialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    name,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	69	None	replace
263	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  name,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    name,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	69	None	replace
264	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	70	None	replace
265	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	70	None	replace
266	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	70	None	replace
267	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	70	None	replace
268	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	70	None	replace
269	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	70	None	replace
270	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	70	None	replace
271	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  fieldName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  fieldName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(type),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	86	None	replace
272	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  name,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    fieldName,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	86	None	replace
273	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingStrategy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	29	None	replace
274	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  serialize,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingStrategy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	29	None	replace
275	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  description,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingStrategy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	29	None	replace
276	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	93	None	replace
277	[BUG]  [BUGGY]  Field[]  boundFields  =  fields.toArray(new  Field[fieldNames.size()  ]);  [CE]  cannot  find  symbol  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  boundFields  =  fields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
278	[BUG]  [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  cannot  find  symbol  boundField  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  resultFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	93	None	replace
279	[BUG]  [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [CE]  cannot  find  symbol  boundField  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	93	None	replace
280	[BUG]  [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [CE]  cannot  find  symbol  boundField  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	93	None	replace
281	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
282	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  constructorConstructor,  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  constructorConstructor,  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  constructorConstructor,  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
283	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  constructorConstructor);  [CE]  cannot  find  symbol  serializedName  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  constructorConstructor);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  constructorConstructor);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  serializedName	31	None	replace
284	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
285	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
286	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
287	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  constructorConstructor);  [CE]  cannot  find  symbol  serializedName  [FE]                                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  constructorConstructor);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  constructorConstructor);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  serializedName	31	None	replace
288	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNames,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNames,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNames,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	34	None	replace
289	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	34	None	replace
290	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	34	None	replace
291	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	34	None	replace
292	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	34	None	replace
293	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	20	None	replace
294	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	73	None	replace
295	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  i);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  i);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	73	None	replace
296	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  type);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  type);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	48	None	replace
297	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  name);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	48	None	replace
298	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	48	None	replace
299	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  name);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  name);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	48	None	replace
300	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	48	None	replace
301	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  type,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  type,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  type,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	84	None	replace
302	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  fieldType,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  fieldType,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  fieldType,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	84	None	replace
303	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	84	None	replace
304	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  constructorConstructor,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  constructorConstructor,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  constructorConstructor,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	84	None	replace
305	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	84	None	replace
306	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	84	None	replace
307	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	74	None	replace
308	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldName,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldName,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	74	None	replace
309	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	74	None	replace
310	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(i),  fieldName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(i),  fieldName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(i),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldName,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	74	None	replace
311	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	33	None	replace
312	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	33	None	replace
313	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serializedName,  deserialize,  type);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serializedName,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serializedName,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	33	None	replace
314	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	33	None	replace
315	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	107	None	replace
316	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	107	None	replace
317	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	107	None	replace
318	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	107	None	replace
319	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	107	None	replace
320	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  name.getType());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  name.getType());  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  name.getType());	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
321	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getType(),  name);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getType(),  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getType(),  name);	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
322	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(name,  field.getType());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(name,  field.getType());  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(name,  field.getType());	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
323	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getGenericType());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getGenericType());  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getGenericType());	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
324	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(name.getType());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(name.getType());  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(name.getType());	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
325	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getParent());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getParent());  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getParent());	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
326	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getQualifiedName());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getQualifiedName());  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getQualifiedName());	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
327	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(name),  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(name),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(name),  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	97	None	replace
328	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  name);	  BoundField    boundField    =    createBoundField(context,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	97	None	replace
329	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	97	None	replace
330	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	97	None	replace
331	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    name,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	99	None	replace
332	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	99	None	replace
333	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(name);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(name);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
334	[BUG]  [BUGGY]  Field[]  fields  =  getFieldNames(name);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  getFieldNames(name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  getFieldNames(name);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
335	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  deserialize);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  deserialize);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
336	[BUG]  [BUGGY]  Field[]  fields  =  getFieldNames(name,  field);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  getFieldNames(name,  field);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  getFieldNames(name,  field);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
337	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  -  1]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
338	[BUG]  [BUGGY]  Type[]  result  =  fields.toArray(new  Type[fieldType.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fields.toArray(new  Type[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fields.toArray(new  Type[fieldType.size()  ]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
339	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  +  1]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
340	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  ],  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  ],  name);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
341	[BUG]  [BUGGY]  Type[]  result  =  fieldTypes.toArray(new  Type[fieldType.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldTypes.toArray(new  Type[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldTypes.toArray(new  Type[fieldType.size()  ]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
342	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	117	None	replace
343	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	117	None	replace
344	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  serializedName,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	117	None	replace
345	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(name),  serializedName,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(name),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(name),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	117	None	replace
346	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	11	None	replace
347	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	11	None	replace
348	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	11	None	replace
349	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	11	None	replace
350	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  field,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	11	None	replace
351	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	11	None	replace
352	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(type),  field,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(type),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	11	None	replace
353	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  type);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  cannot  find  symbol  serializedName	28	None	replace
354	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	28	None	replace
355	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	28	None	replace
356	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializer  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    names,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializer	57	None	replace
357	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  name);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	100	None	replace
358	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  name);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  name);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	100	None	replace
359	[BUG]  [BUGGY]  Type[]  result  =  fields.toArray(new  Type[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fields.toArray(new  Type[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fields.toArray(new  Type[fieldNames.size()  ]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	90	None	replace
360	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  -  1]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	90	None	replace
361	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  +  1]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	90	None	replace
362	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  ],  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  ],  name);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	90	None	replace
363	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldTypes.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldTypes.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldTypes.size()  ]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	90	None	replace
364	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  0]);  [CE]  ']'  expected  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  0]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  0]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldNames.size()    ]);    	non-compiled	[CE]  ']'  expected	90	None	replace
365	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	87	None	replace
366	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serializedName,  TypeToken.get(type),  type,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serializedName,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  serializedName,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	87	None	replace
367	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  type,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	87	None	replace
368	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	87	None	replace
369	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(type),  serialize,  deserialize,  field);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(type),  serialize,  deserialize,  field);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(type),  serialize,  deserialize,  field);	  BoundField    boundField    =    createBoundField(context,    type,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	87	None	replace
370	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	5	None	replace
371	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  description,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  description,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  description,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	5	None	replace
372	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
373	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  type);  [CE]  no  suitable  method  found  for  get(int)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
374	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  name);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
375	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
376	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
377	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
378	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  jsonAdapterPresent);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  jsonAdapterPresent);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  jsonAdapterPresent);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
379	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  name,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	95	None	replace
380	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  name,  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  name,  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  name,  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	95	None	replace
381	[BUG]  [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	111	None	replace
382	[BUG]  [BUGGY]  Field[]  fieldNames  =  new  Field[fieldNames.size()  ];  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  new  Field[fieldNames.size()  ];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  new  Field[fieldNames.size()  ];	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	111	None	replace
383	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  name.toArray(new  Field[fieldNames.size()  ]));  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  name.toArray(new  Field[fieldNames.size()  ]));  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  name.toArray(new  Field[fieldNames.size()  ]));	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	111	None	replace
384	[BUG]  [BUGGY]  Field[]  fieldNames  =  name.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  name.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  name.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	111	None	replace
385	[BUG]  [BUGGY]  Field[]  fieldNames  =  field.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  field.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  field.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	111	None	replace
386	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	111	None	replace
387	[BUG]  [BUGGY]  Field[]  boundFields  =  fields.toArray(new  Field[fields.size()  ]);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  boundFields  =  fields.toArray(new  Field[fields.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fields.toArray(new  Field[fields.size()  ]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
388	[BUG]  [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [CE]  cannot  find  symbol  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  +  1]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
389	[BUG]  [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [CE]  cannot  find  symbol  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  ],  name);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
390	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  previous,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  previous,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  previous,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
391	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous,  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
392	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
393	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
394	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
395	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  previous,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  previous,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  previous,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
396	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	8	None	replace
397	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
398	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	14	None	replace
399	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize,    isPrimitive);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
400	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  field,  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  serializedName	23	None	replace
401	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  jsonAdapterPresent);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  jsonAdapterPresent);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	23	None	replace
402	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize,    isPrimitive);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
403	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserialized);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserialized);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  deserialized	23	None	replace
404	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  value);  [CE]  cannot  find  symbol  value  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  value);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  value);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  value	23	None	replace
405	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  type,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    type,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	7	None	replace
406	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  type,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    type,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	7	None	replace
407	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  type,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    type,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	7	None	replace
408	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	7	None	replace
409	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  type,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	7	None	replace
410	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(type),  type,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  namedName,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	7	None	replace
411	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	43	None	replace
412	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	43	None	replace
413	[BUG]  [BUGGY]  BoundField  field  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  field  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  field  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	43	None	replace
414	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	43	None	replace
415	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(field,  context,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(field,  context,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(field,  context,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	43	None	replace
416	[BUG]  [BUGGY]  BoundField  old  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  old  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  old  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	43	None	replace
417	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  i);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  i);	  BoundField    boundField    =    createBoundField(context,    name,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	13	None	replace
418	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  field,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  field,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  field,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	115	None	replace
419	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	115	None	replace
420	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	115	None	replace
421	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	115	None	replace
422	[BUG]  [BUGGY]  BoundField  field  =  createBoundField(context,  name,  field,  TypeToken.get(i),  serialize,  deserialize);  [CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  field  =  createBoundField(context,  name,  field,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  field  =  createBoundField(context,  name,  field,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  variable  field  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	115	None	replace
423	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	78	None	replace
424	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	78	None	replace
425	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  fieldName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  fieldName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(i),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	68	None	replace
426	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldName,  deserialize,  type);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldName,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(i),  fieldName,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldName,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	68	None	replace
427	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedNames,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  serializedNames  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedNames,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedNames,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    names,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedNames	98	None	replace
428	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  TypeToken.get(fieldType),  serialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldType,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    names,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	98	None	replace
429	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	89	None	replace
430	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	89	None	replace
431	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	89	None	replace
432	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  name);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	89	None	replace
433	[BUG]  [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  ];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  new  Field[fieldNames.size()  ];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  new  Field[fieldNames.size()  ];	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	89	None	replace
434	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapterPresent);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapterPresent);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapterPresent);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	4	None	replace
435	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	4	None	replace
436	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  value);  [CE]  cannot  find  symbol  value  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  value);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  value);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  value	4	None	replace
437	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapter);  [CE]  cannot  find  symbol  jsonAdapter  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapter);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  jsonAdapter);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapter	4	None	replace
438	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  factory,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  factory  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  factory,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  factory,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  factory	105	None	replace
439	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingStrategy,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  beanNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingStrategy,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingStrategy,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanNamingStrategy	105	None	replace
440	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingPolicy,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingPolicy,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingPolicy,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	105	None	replace
441	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(name,  fieldType,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(name,  fieldType,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(name,  fieldType,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	61	None	replace
442	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	61	None	replace
443	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	61	None	replace
444	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	61	None	replace
445	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(type,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(type,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(type,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	61	None	replace
446	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serialize,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	61	None	replace
447	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(serialize,  fieldType,  name,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(serialize,  fieldType,  name,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(serialize,  fieldType,  name,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	61	None	replace
448	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
449	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
450	[BUG]  [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
451	[BUG]  [BUGGY]  Field[]  fields  =  new  Field[fieldNames.size()  ];  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  new  Field[fieldNames.size()  ];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  new  Field[fieldNames.size()  ];	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
452	[BUG]  [BUGGY]  Field[]  fields  =  name.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  name.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  name.toArray(new  Field[fieldType.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
453	[BUG]  [BUGGY]  Field[]  fields  =  type.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  type.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  type.toArray(new  Field[fieldType.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
454	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  serialize);  [CE]  cannot  find  symbol  description  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  description,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    description,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	50	None	replace
455	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  context,  TypeToken.get(fieldType),  serialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  context,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  context,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    description,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	50	None	replace
456	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  description);  [CE]  cannot  find  symbol  description  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  description);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  description);	  BoundField    boundField    =    createBoundField(context,    fieldType,    description,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	50	None	replace
457	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  dataArea,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  dataArea,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  dataArea,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    namedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	54	None	replace
458	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	77	None	replace
459	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.getInstance(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  SerializeToken  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.getInstance(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.getInstance(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
460	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  SerializeToken  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
461	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  SerializeToken  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
462	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.getValue(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  SerializeToken  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.getValue(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.getValue(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
463	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  cannot  find  symbol  SerializeToken  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
464	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);  [CE]  cannot  find  symbol  SerializeToken  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
465	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  description,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    description,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	56	None	replace
466	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  specification,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  specification  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  specification,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  specification,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    description,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  specification	56	None	replace
467	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  context,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  context,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  context,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    description,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	56	None	replace
468	[BUG]  [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fields.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fields.toArray(new  Field[fields.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fields.toArray(new  Field[fields.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	36	None	replace
469	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	36	None	replace
470	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  +  1]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	36	None	replace
471	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  name);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	36	None	replace
472	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	43	None	replace
473	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  serialize,  TypeToken.get(i),  fieldName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  serialize,  TypeToken.get(i),  fieldName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  serialize,  TypeToken.get(i),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	43	None	replace
474	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  serialize,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  serialize,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  serialize,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	74	None	replace
475	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldName,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldName,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldName,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	61	None	replace
476	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  name,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	61	None	replace
477	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	61	None	replace
478	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	58	None	replace
479	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(type,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(type,  name,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(type,  name,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	58	None	replace
480	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	58	None	replace
481	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserializer);  [CE]  cannot  find  symbol  deserializer  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserializer);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserializer);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  deserializer	1	None	replace
482	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.name);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.name);	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
483	[BUG]  [BUGGY]  Field[]  fieldNames  =  this.fieldNames.toArray(new  Field[fields.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  this.fieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  this.fieldNames.toArray(new  Field[fields.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	110	None	replace
484	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldNames,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldNames,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  fieldNames,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    type,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	88	None	replace
485	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(type),  type,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  serializedName,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    type,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	88	None	replace
486	[BUG]  [BUGGY]  Field[]  result  =  boundFields.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  boundFields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  boundFields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	89	None	replace
487	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  0]);  [CE]  ']'  expected  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  0]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  0]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  ']'  expected	89	None	replace
488	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  raw,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  raw,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  raw,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	105	None	replace
489	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingPolicy,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingPolicy,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingPolicy,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	105	None	replace
490	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  previous);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(i),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	30	None	replace
491	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
492	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
493	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  name,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  name,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  name,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
494	[BUG]  [BUGGY]  Field[]  fields  =  boundFields.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  boundFields.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  boundFields.toArray(new  Field[fieldType.size()  ]);	  Field[]    fields    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	38	None	replace
495	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	73	None	replace
496	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fields,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fields,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  fields,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	85	None	replace
497	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fields,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fields,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fields,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	85	None	replace
498	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	70	None	replace
499	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	70	None	replace
500	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  factory,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  factory  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  factory,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  factory,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  factory	72	None	replace
501	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	28	None	replace
502	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  i);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  i);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    raw);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	6	None	replace
503	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  type,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    type,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	7	None	replace
504	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  name,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	24	None	replace
505	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  raw,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  raw,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  raw,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	109	None	replace
506	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  beanNamingPolicy  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanNamingPolicy	109	None	replace
507	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	11	None	replace
508	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldName,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldName,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  fieldName,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	115	None	replace
509	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  FieldUtils.safeNegate(fieldNames.get(i),  serialize,  deserialize);  [CE]  ')'  expected  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  FieldUtils.safeNegate(fieldNames.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  FieldUtils.safeNegate(fieldNames.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  ')'  expected	115	None	replace
510	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	26	None	replace
511	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	26	None	replace
512	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  raw,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  raw,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  raw,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	106	None	replace
513	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	106	None	replace
514	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	106	None	replace
515	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  result);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  result);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  result);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	49	None	replace
516	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  dataArea,  deserialize);  [CE]  cannot  find  symbol  dataArea  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  dataArea,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  dataArea,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  dataArea	49	None	replace
517	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  raw,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  raw,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  raw,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	49	None	replace
518	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  constructorConstructor,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  constructorConstructor,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  constructorConstructor,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	49	None	replace
519	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.getType()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
520	[BUG]  [BUGGY]  Field[]  result  =  boundFields.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  boundFields.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  boundFields.toArray(new  Field[fieldType.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
521	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    name,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	62	None	replace
522	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  type,  raw);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	22	None	replace
523	[BUG]  [BUGGY]  Type[]  result  =  boundFields.toArray(new  Type[fieldType.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  boundFields.toArray(new  Type[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  boundFields.toArray(new  Type[fieldType.size()  ]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
524	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.getType()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.getType()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldType.getType()  ]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
525	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  ],  boundField);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  ],  boundField);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldType.size()  ],  boundField);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	94	None	replace
526	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	87	None	replace
527	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  name,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	87	None	replace
528	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	76	None	replace
529	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  name,  deserialize);  [CE]  cannot  find  symbol  SerializeToken  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
530	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  SerializeToken  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
531	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  SerializeToken  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
532	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  SerializeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  SerializeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  SerializeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	101	None	replace
533	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize.get(fieldType),  serialize,  deserialize);  [CE]  boolean  cannot  be  dereferenced  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	101	None	replace
534	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(name),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	45	None	replace
535	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(name),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(String)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  type,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(name),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(String)	45	None	replace
536	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  description,  TypeToken.get(name),  serialize,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  description,  TypeToken.get(name),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  description,  TypeToken.get(name),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(name),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	45	None	replace
537	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  field,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	65	None	replace
538	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	100	None	replace
539	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	100	None	replace
540	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  type);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serializedName,  TypeToken.get(fieldType),  type);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	100	None	replace
541	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  fieldName,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  fieldName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  fieldName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    fieldName,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	86	None	replace
542	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldName,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldName,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  fieldName,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	86	None	replace
543	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  -  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
544	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  +  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
545	[BUG]  [BUGGY]  Field[]  fieldNames  =  name.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  name.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  name.toArray(new  Field[fieldType.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
546	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
547	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	79	None	replace
548	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	79	None	replace
549	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
550	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	14	None	replace
551	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  boundField);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  boundField);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  ],  boundField);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	36	None	replace
552	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  0]);  [CE]  ']'  expected  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  0]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fields.size()  0]);	  Field[]    result    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  ']'  expected	36	None	replace
553	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  field,  name);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  field,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  field,  name);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	8	None	replace
554	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  name,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    name,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	69	None	replace
555	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	20	None	replace
556	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	20	None	replace
557	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  constructorConstructor,  serialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  constructorConstructor,  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  constructorConstructor,  serialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
558	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  constructorConstructor,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  constructorConstructor,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  constructorConstructor,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
559	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  excluder);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  excluder);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  excluder);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
560	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  raw);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	25	None	replace
561	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  name,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
562	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  deserialize,  fieldNamingPolicy);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
563	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  i,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  i,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  i,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	83	None	replace
564	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  name,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	83	None	replace
565	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  fieldNamingPolicy);  [CE]  cannot  find  symbol  serializedName  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  serializedName	104	None	replace
566	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(fieldType),  serialize);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    name,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	99	None	replace
567	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	99	None	replace
568	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  field,  deserialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  field,  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(fieldType),  field,  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize,    isPrimitive);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	23	None	replace
569	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserializer);  [CE]  cannot  find  symbol  deserializer  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserializer);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserializer);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  deserializer	23	None	replace
570	[BUG]  [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [CE]  cannot  find  symbol  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.size()  -  1]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
571	[BUG]  [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.length  ]);  [CE]  cannot  find  symbol  boundField  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.length  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  boundFields  =  fieldNames.toArray(new  Field[fields.length  ]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	91	None	replace
572	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  jsonAdapterPresent,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  jsonAdapterPresent,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	120	None	replace
573	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
574	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingStrategy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	29	None	replace
575	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingStrategy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	29	None	replace
576	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	96	None	replace
577	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  i,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  i,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  i,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
578	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	60	None	replace
579	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	60	None	replace
580	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	113	None	replace
581	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    names,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	98	None	replace
582	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	84	None	replace
583	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	84	None	replace
584	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  name,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	84	None	replace
585	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	117	None	replace
586	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	63	None	replace
587	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    fieldType,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	63	None	replace
588	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  fieldNames,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldNames,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	116	None	replace
589	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldNames,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	116	None	replace
590	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  jsonAdapterPresent,  deserialize);  [CE]  cannot  find  symbol  jsonAdapterPresent  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  jsonAdapterPresent,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  jsonAdapterPresent,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  jsonAdapterPresent	5	None	replace
591	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldName,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldName,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  fieldName,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	68	None	replace
592	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  constructorConstructor,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	68	None	replace
593	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  null,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  null,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  null,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	68	None	replace
594	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingPolicy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	71	None	replace
595	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingPolicy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	71	None	replace
596	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    scope,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	114	None	replace
597	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  scope  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  name,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    scope,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  scope	114	None	replace
598	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	4	None	replace
599	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  i  +  1);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  i  +  1);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  i  +  1);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
600	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  names);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  names);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  names);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
601	[BUG]  [BUGGY]  Field[]  fields  =  getFieldNames(field,  i  +  1);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  getFieldNames(field,  i  +  1);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  getFieldNames(field,  i  +  1);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
602	[BUG]  [BUGGY]  Field[]  fields  =  getFieldNames(field,  i);  [CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fields  =  getFieldNames(field,  i);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fields  =  getFieldNames(field,  i);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fields  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
603	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  Name.class);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  Name.class);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  Name.class);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
604	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  type);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  type);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	53	None	replace
605	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  dataArea,  deserialize);  [CE]  cannot  find  symbol  dataArea  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  dataArea,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  type,  TypeToken.get(fieldType),  dataArea,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  dataArea	53	None	replace
606	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  value,  deserialize);  [CE]  cannot  find  symbol  value  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  value,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  value,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  value	102	None	replace
607	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize,  fieldNamingPolicy);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize,  fieldNamingPolicy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize,  fieldNamingPolicy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	21	None	replace
608	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  name,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	81	None	replace
609	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  fieldNamingPolicy,  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	75	None	replace
610	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  raw);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  type,  raw);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	75	None	replace
611	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldNames,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldNames,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  fieldNames,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	34	None	replace
612	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fields,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fields,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fields,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	34	None	replace
613	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getType(),  deserialize);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getType(),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getType(),  deserialize);	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
614	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getParameterType(0));  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getParameterType(0));  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getParameterType(0));	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
615	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	12	None	replace
616	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
617	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  raw);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  raw);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  raw);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
618	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  serialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  TypeToken.get(type),  serialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
619	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  name);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  name);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
620	[BUG]  [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  ],  deserialize);  [CE]  ';'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  ],  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  new  Type[fieldNames.size()  ],  deserialize);	  Type[]    result    =    new    Type[fieldNames.size()    ];    	non-compiled	[CE]  ';'  expected	92	None	replace
621	[BUG]  [BUGGY]  Type[]  result  =  new  Type[fieldNames.get(i)];  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  new  Type[fieldNames.get(i)];  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  new  Type[fieldNames.get(i)];	  Type[]    result    =    new    Type[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
622	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	107	None	replace
623	[BUG]  [BUGGY]  Type[]  result  =  boundFields.toArray(new  Type[fieldNames.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  boundFields.toArray(new  Type[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  boundFields.toArray(new  Type[fieldNames.size()  ]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	90	None	replace
624	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field.name,  type,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field.name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	47	None	replace
625	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  field,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	108	None	replace
626	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldName,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldName,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  fieldName,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	108	None	replace
627	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	77	None	replace
628	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	77	None	replace
629	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  i,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  i,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  i,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	55	None	replace
630	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldNames.size()  -  1]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	111	None	replace
631	[BUG]  [BUGGY]  Field[]  fieldNames  =  boundFields.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  boundFields.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  boundFields.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	111	None	replace
632	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNamingPolicy,  TypeToken.get(fieldType),  name);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNamingPolicy,  TypeToken.get(fieldType),  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNamingPolicy,  TypeToken.get(fieldType),  name);	  BoundField    boundField    =    createBoundField(context,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	97	None	replace
633	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	64	None	replace
634	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  NameToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  NameToken  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  NameToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  NameToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  cannot  find  symbol  NameToken	64	None	replace
635	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);  [CE]  cannot  find  symbol  serializedName  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializedName,  TypeToken.get(fieldType),  serialize,  deserialize,  isPrimitive);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  cannot  find  symbol  serializedName	64	None	replace
636	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  serialize,  TypeToken.get(type),  type,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  serialize,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  serialize,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	44	None	replace
637	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  i,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	44	None	replace
638	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  previous);  [CE]  cannot  find  symbol  serializedName  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serializedName,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  cannot  find  symbol  serializedName	30	None	replace
639	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  previous,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  previous,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  previous,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    previous);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	30	None	replace
640	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName);  [CE]  cannot  find  symbol  fieldName  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  TypeToken.get(fieldType),  serializedName);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	96	None	replace
641	[BUG]  [BUGGY]  BoundField  fieldField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  fieldField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  fieldField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	42	None	replace
642	[BUG]  [BUGGY]  BoundField  rowField  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  rowField  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  rowField  =  createBoundField(context,  name,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	43	None	replace
643	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  field,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  field,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  field,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    name,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	77	None	replace
644	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  beanDesc  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	63	None	replace
645	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  description,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  description,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  description,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	106	None	replace
646	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  method,  deserialize);  [CE]  cannot  find  symbol  method  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  method,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  method,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  method	106	None	replace
647	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  dataArea,  deserialize);  [CE]  cannot  find  symbol  dataArea  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  dataArea,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  dataArea,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  dataArea	106	None	replace
648	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  i  +  1,  name);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  i  +  1,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  i  +  1,  name);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
649	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  description);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field,  description);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field,  description);	  Field[]    fieldNames    =    getFieldNames(field,    i);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	40	None	replace
650	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  serializeToken  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializeToken	101	None	replace
651	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialization,  deserialize);  [CE]  cannot  find  symbol  SerializeToken  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialization,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  SerializeToken.get(fieldType),  serialization,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    SerializeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  SerializeToken	101	None	replace
652	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	81	None	replace
653	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  scope,  deserialize);  [CE]  cannot  find  symbol  beanDesc  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  scope,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  scope,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    scope,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	114	None	replace
654	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldType);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldType);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type),  fieldType);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
655	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type));  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type));  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(type));	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(type),    type);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	12	None	replace
656	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getName());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getName());  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getName());	  Field[]    fieldNames    =    getFieldNames(field);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	37	None	replace
657	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	82	None	replace
658	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialized);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialized);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(i),  serialize,  deserialized);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	82	None	replace
659	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  serializedName,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	58	None	replace
660	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	58	None	replace
661	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	53	None	replace
662	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  serialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  serialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	53	None	replace
663	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  deserialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	53	None	replace
664	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	53	None	replace
665	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  type,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(i),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    name,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	69	None	replace
666	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldTypes,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldTypes  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldTypes,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldTypes,  fieldNamingPolicy,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldNamingStrategy,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldTypes	29	None	replace
667	[BUG]  [BUGGY]  BoundField  fieldField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  fieldField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  fieldField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	97	None	replace
668	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  deserialize,  TypeToken.get(i),  field,  serialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  deserialize,  TypeToken.get(i),  field,  serialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  deserialize,  TypeToken.get(i),  field,  serialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	66	None	replace
669	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	20	None	replace
670	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  i,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  i,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  i,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	120	None	replace
671	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  deserialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	120	None	replace
672	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  typeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  typeToken  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  typeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  typeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeToken	84	None	replace
673	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	84	None	replace
674	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  deserialize,  fieldNamingStrategy);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  constructorConstructor,  TypeToken.get(i),  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    constructorConstructor,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	84	None	replace
675	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  serialize,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    name,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	87	None	replace
676	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(type),  type,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	7	None	replace
677	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(type),  type,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(type),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(type),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	7	None	replace
678	[BUG]  [BUGGY]  Field[]  fieldNames  =  boundField.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  boundField.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  boundField.toArray(new  Field[fieldType.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
679	[BUG]  [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  fieldNames.toArray(new  Field[fieldType.size()  ],  name);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	112	None	replace
680	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	85	None	replace
681	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  no  suitable  method  found  for  get(int)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(i),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	85	None	replace
682	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  beanDesc  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	59	None	replace
683	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldNamingStrategy,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldNamingStrategy,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  fieldNamingStrategy,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	115	None	replace
684	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  fieldType,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    field,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	115	None	replace
685	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  deserializer,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  deserializer  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  deserializer,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  deserializer,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  deserializer	55	None	replace
686	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  input);  [CE]  cannot  find  symbol  input  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  input);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  input);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  cannot  find  symbol  input	28	None	replace
687	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldName,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldName,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldName,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	61	None	replace
688	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(serialize,  fieldType,  TypeToken.get(fieldType),  fieldType,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(serialize,  fieldType,  TypeToken.get(fieldType),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(serialize,  fieldType,  TypeToken.get(fieldType),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	61	None	replace
689	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	61	None	replace
690	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(fieldType,  fieldType,  serializedName,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(fieldType,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	61	None	replace
691	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  type,  fieldType,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	118	None	replace
692	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  description,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  description,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  description,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    fieldNamingStrategy,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	113	None	replace
693	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	27	None	replace
694	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	107	None	replace
695	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(type),  fieldType,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(type),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(type),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    fieldType,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	107	None	replace
696	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  cannot  find  symbol  serializedName	3	None	replace
697	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	3	None	replace
698	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialization);  [CE]  cannot  find  symbol  deserialization  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialization);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialization);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  deserialization	1	None	replace
699	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getGenericClass());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getGenericClass());  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getGenericClass());	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
700	[BUG]  [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getRawClass());  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  getFieldNames(field.getRawClass());  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  getFieldNames(field.getRawClass());	  Field[]    fieldNames    =    getFieldNames(field.getType());    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	41	None	replace
701	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	70	None	replace
702	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  cannot  find  symbol  beanDesc  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	60	None	replace
703	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  beanDesc,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  beanDesc  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  beanDesc,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  beanDesc,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    serializedName,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	80	None	replace
704	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  type,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    type,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	83	None	replace
705	[BUG]  [BUGGY]  Field[]  fieldNames  =  this.fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  this.fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  this.fieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	111	None	replace
706	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    names,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	98	None	replace
707	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  type,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  fieldNamingStrategy,  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	22	None	replace
708	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldName,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldName,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldName,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	13	None	replace
709	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  FieldUtils.safeMultiply(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  FieldUtils  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  FieldUtils.safeMultiply(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  FieldUtils.safeMultiply(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  FieldUtils	13	None	replace
710	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  typeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  typeToken  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  typeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  typeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    type,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeToken	19	None	replace
711	[BUG]  [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  ],  boundField);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  ],  boundField);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  fieldNames.toArray(new  Type[fieldNames.size()  ],  boundField);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	90	None	replace
712	[BUG]  [BUGGY]  Type[]  previous  =  fieldNames.toArray(new  Type[fieldNames.size()  ]);  [CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  previous  =  fieldNames.toArray(new  Type[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  previous  =  fieldNames.toArray(new  Type[fieldNames.size()  ]);	  Type[]    result    =    fieldNames.toArray(new    Type[fieldNames.size()    ]);    	non-compiled	[CE]  variable  previous  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	90	None	replace
713	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingStrategy,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingStrategy,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNamingStrategy,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	105	None	replace
714	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldName,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldName,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldName,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    beanDesc,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	105	None	replace
715	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  deserialize,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  deserialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  deserialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
716	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  i,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  i,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  i,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	5	None	replace
717	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  description,  TypeToken.get(fieldType),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  description,  TypeToken.get(fieldType),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	16	None	replace
718	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  declaredName);  [CE]  cannot  find  symbol  declaredName  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  declaredName);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  declaredName);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    fieldNamingStrategy);    	non-compiled	[CE]  cannot  find  symbol  declaredName	104	None	replace
719	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fields,  TypeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  fields,  TypeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  fields,  TypeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	68	None	replace
720	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  FieldUtils.safeMultiply(fieldNames.get(i),  serialize,  deserialize);  [CE]  ')'  expected  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  FieldUtils.safeMultiply(fieldNames.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  FieldUtils.safeMultiply(fieldNames.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldName,    deserialize);    	non-compiled	[CE]  ')'  expected	68	None	replace
721	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
722	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  result);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  result);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  type,  result);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	2	None	replace
723	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldNamingStrategy,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldNamingStrategy,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(type),  fieldNamingStrategy,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	75	None	replace
724	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  type,  deserialize);  [CE]  cannot  find  symbol  serializer  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  type,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  type,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    type,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializer	75	None	replace
725	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	25	None	replace
726	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(type),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	25	None	replace
727	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserialization);  [CE]  cannot  find  symbol  deserialization  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserialization);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  serialize,  TypeToken.get(fieldType),  field,  deserialize,  deserialization);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(fieldType),    field,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  deserialization	23	None	replace
728	[BUG]  [BUGGY]  Field[]  fieldNames  =  currentFieldNames.toArray(new  Field[fields.size()  ]);  [CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  fieldNames  =  currentFieldNames.toArray(new  Field[fields.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  fieldNames  =  currentFieldNames.toArray(new  Field[fields.size()  ]);	  Field[]    fieldNames    =    fieldNames.toArray(new    Field[fields.size()    ]);    	non-compiled	[CE]  variable  fieldNames  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	110	None	replace
729	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType)&  0xffff,  deserialize);  [CE]  bad  operand  types  for  binary  operator  '&'  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType)&  0xffff,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType)&  0xffff,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '&'	102	None	replace
730	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serialize,  TypeToken.get(fieldType),  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	49	None	replace
731	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  fieldName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldName,  type,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldName,    type,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldName	15	None	replace
732	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  field,  deserialize);  [CE]  cannot  find  symbol  serializer  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  serializer,  TypeToken.get(fieldType),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serialize,    TypeToken.get(fieldType),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializer	21	None	replace
733	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serializedName,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	103	None	replace
734	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  boundField);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  boundField);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldNames.size()  ],  boundField);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	89	None	replace
735	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  beanDesc);  [CE]  cannot  find  symbol  beanDesc  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  beanDesc);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  beanDesc);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	26	None	replace
736	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  factory);  [CE]  cannot  find  symbol  factory  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  factory);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  factory);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  cannot  find  symbol  factory	26	None	replace
737	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  deserialize,  TypeToken.get(fieldType),  deserialize);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  deserialize,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  deserialize,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	52	None	replace
738	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  methodNamingStrategy,  TypeToken.get(fieldType),  deserialize);  [CE]  cannot  find  symbol  methodNamingStrategy  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  methodNamingStrategy,  TypeToken.get(fieldType),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  methodNamingStrategy,  TypeToken.get(fieldType),  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    jsonAdapterPresent,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  cannot  find  symbol  methodNamingStrategy	52	None	replace
739	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize,  type);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize,  type);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    type);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	33	None	replace
740	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(type),  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(type),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldType,  TypeToken.get(type),  deserialize);	  BoundField    boundField    =    createBoundField(context,    name,    fieldType,    TypeToken.get(fieldType),    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	99	None	replace
741	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(type),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	18	None	replace
742	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  cannot  find  symbol  beanDesc  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  beanDesc,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    name,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  beanDesc	62	None	replace
743	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  name,  deserialize);  [CE]  cannot  find  symbol  namedName  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  name,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  namedName,  TypeToken.get(fieldType),  name,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    serializedName,    TypeToken.get(fieldType),    name,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  namedName	62	None	replace
744	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  factory);  [CE]  cannot  find  symbol  factory  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  factory);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  factory);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  factory	31	None	replace
745	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  result);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  result);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  result);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	31	None	replace
746	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  method);  [CE]  cannot  find  symbol  method  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  method);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  method);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  method	31	None	replace
747	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  input);  [CE]  cannot  find  symbol  input  [FE]                                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  input);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  constructorConstructor,  input);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    constructorConstructor);    	non-compiled	[CE]  cannot  find  symbol  input	31	None	replace
748	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  names,  TypeToken.get(i),  field,  deserialize);  [CE]  cannot  find  symbol  names  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  names,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  names,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  names	65	None	replace
749	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(i),  field,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(i),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(i),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(i),    field,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	65	None	replace
750	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize);  [CE]  cannot  find  symbol  serializedName  [FE]                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  serializedName	34	None	replace
751	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	34	None	replace
752	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  result);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  result);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  result);	  BoundField    boundField    =    createBoundField(context,    fieldType,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	34	None	replace
753	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(type),  serialize,  deserialize);  [CE]  name  has  private  access  in  Field  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field.name,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field.name,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  name  has  private  access  in  Field	47	None	replace
754	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  name,  TypeToken.get(type),  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	9	None	replace
755	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  TypeToken.get(fieldType),  serialize,  deserialize,  raw,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    TypeToken.get(fieldType),    serialize,    deserialize,    raw);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	6	None	replace
756	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialized);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialized);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  deserialized	4	None	replace
757	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  deserializer);  [CE]  cannot  find  symbol  deserializer  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  deserializer);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  deserializer);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  deserializer	4	None	replace
758	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  factory);  [CE]  cannot  find  symbol  factory  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  factory);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(fieldType),  serialize,  deserialize,  factory);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrimitive);    	non-compiled	[CE]  cannot  find  symbol  factory	4	None	replace
759	[BUG]  [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  ],  fieldType;  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Type[]  result  =  new  Type[fieldNames.size()  ],  fieldType;  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Type[]  result  =  new  Type[fieldNames.size()  ],  fieldType;	  Type[]    result    =    new    Type[fieldNames.size()    ];    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	92	None	replace
760	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialized);  [CE]  cannot  find  symbol  deserialized  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialized);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  deserialized);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  cannot  find  symbol  deserialized	64	None	replace
761	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  deserializer);  [CE]  cannot  find  symbol  deserializer  [FE]                            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  deserializer);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  name,  TypeToken.get(fieldType),  serialize,  deserialize,  deserializer);	  BoundField    boundField    =    createBoundField(context,    fieldType,    name,    TypeToken.get(fieldType),    serialize,    deserialize,    isPrivate);    	non-compiled	[CE]  cannot  find  symbol  deserializer	64	None	replace
762	[BUG]  [BUGGY]  Field[]  headerFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [CE]  cannot  find  symbol  boundField  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  headerFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  headerFields  =  fieldNames.toArray(new  Field[fieldNames.size()  ]);	  Field[]    boundFields    =    fieldNames.toArray(new    Field[fieldNames.size()    ]);    	non-compiled	[CE]  cannot  find  symbol  boundField	93	None	replace
763	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fields,  TypeToken.get(fieldType),  serialize,  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    fields,    TypeToken.get(fieldType),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	73	None	replace
764	[BUG]  [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ],  boundField);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ],  boundField);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  fieldNames.toArray(new  Field[fieldType.size()  ],  boundField);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
765	[BUG]  [BUGGY]  Field[]  result  =  boundField.toArray(new  Field[fieldType.size()  ]);  [CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)  [FE]                                  ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  Field[]  result  =  boundField.toArray(new  Field[fieldType.size()  ]);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	Field[]  result  =  boundField.toArray(new  Field[fieldType.size()  ]);	  Field[]    result    =    fieldNames.toArray(new    Field[fieldType.size()    ]);    	non-compiled	[CE]  variable  result  is  already  defined  in  method  getBoundFields(Gson,TypeToken<?>,Class<?>)	39	None	replace
766	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize,  name);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(fieldType),  serialize,  deserialize,  name);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	32	None	replace
767	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(fieldType),  serialize,  deserialize,  previous);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(fieldType),    serialize,    deserialize,    name);    	non-compiled	[CE]  method  createBoundField  in  class  ReflectiveTypeAdapterFactory  cannot  be  applied  to  given  types;	32	None	replace
768	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(type),  field,  deserialize);  [CE]  cannot  find  symbol  description  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(type),  field,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  field,  description,  TypeToken.get(type),  field,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serializedName,    TypeToken.get(type),    field,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  description	11	None	replace
769	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  typeToken.get(i),  serialize,  deserialize);  [CE]  cannot  find  symbol  typeToken  [FE]                    ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  typeToken.get(i),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  typeToken.get(i),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  typeToken	17	None	replace
770	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                      ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
771	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  deserialize,  fieldNamingStrategy);  [CE]  no  suitable  method  found  for  get(int)  [FE]                        ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  deserialize,  fieldNamingStrategy);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldType,  TypeToken.get(i),  deserialize,  fieldNamingStrategy);	  BoundField    boundField    =    createBoundField(context,    fieldType,    TypeToken.get(i),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	17	None	replace
772	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(type),  serialize,  deserialize);  [CE]  cannot  find  symbol  fieldNamingStrategy  [FE]            ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(type),  serialize,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  fieldNamingStrategy,  TypeToken.get(type),  serialize,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  cannot  find  symbol  fieldNamingStrategy	76	None	replace
773	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serializedName,  deserialize);  [CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)  [FE]              ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serializedName,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames,  field,  TypeToken.get(type),  serializedName,  deserialize);	  BoundField    boundField    =    createBoundField(context,    fieldNames,    field,    TypeToken.get(type),    serialize,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(TypeToken<CAP#1>)	76	None	replace
774	[BUG]  [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames.get(i),  serialize,  TypeToken.get(i),  fieldType,  deserialize);  [CE]  no  suitable  method  found  for  get(int)  [FE]                          ComparisonFailure      [CONTEXT]      if  (!serialize  &&  !deserialize)  {  continue;  }  field.setAccessible(true);  Type  fieldType  =  $Gson$Types.resolve(type.getType(),  raw,  field.getGenericType());  List<String>  fieldNames  =  getFieldNames(field);  BoundField  previous  =  null;  for  (int  i  =  0;  i  <  fieldNames.size();  ++i)  {  String  name  =  fieldNames.get(i);  if  (i  !=  0)  serialize  =  false;  //  only  serialize  the  default  name      [BUGGY]  BoundField  boundField  =  createBoundField(context,  fieldNames.get(i),  serialize,  TypeToken.get(i),  fieldType,  deserialize);  [BUGGY]      TypeToken.get(fieldType),  serialize,  deserialize);  BoundField  replaced  =  result.put(name,  boundField);  if  (previous  ==  null)  previous  =  replaced;  }  if  (previous  !=  null)  {  throw  new  IllegalArgumentException(declaredType  +       "  declares  multiple  JSON  fields  named       "  +  previous.name);  }  }  type  =  TypeToken.get($Gson$Types.resolve(type.getType(),  raw,  raw.getGenericSuperclass()));  [CLASS]  ReflectiveTypeAdapterFactory  1  BoundField  Adapter  [METHOD]  getBoundFields  [RETURN_TYPE]  Map  Gson  context  TypeToken<?>  type  Class<?>  raw  [VARIABLES]  Gson  context  String  $anonymous0  alternate  name  serializedName  Excluder  excluder  FieldNamingStrategy  fieldNamingPolicy  int  i  ConstructorConstructor  constructorConstructor  Field  field  Type  declaredType  fieldType  boolean  $anonymous1  $anonymous2  deserialize  deserialized  isPrimitive  jsonAdapterPresent  serialize  serialized  TypeToken  type  ObjectConstructor  constructor  Class  raw  List  fieldNames  Map  boundFields  result  Field[]  fields  BoundField  boundField  previous  replaced  	projects/Gson10/gson/src/main/java/com/google/gson/internal/bind/ReflectiveTypeAdapterFactory.java	0.3333333333333333	163	164	1	replace	BoundField  boundField  =  createBoundField(context,  fieldNames.get(i),  serialize,  TypeToken.get(i),  fieldType,  deserialize);	  BoundField    boundField    =    createBoundField(context,    field,    serialize,    TypeToken.get(i),    fieldType,    deserialize);    	non-compiled	[CE]  no  suitable  method  found  for  get(int)	67	None	replace
